Note: the nonterminal symbol list (from ocamldoc-odoc_text.mly) is renamed ocamldoc_odoc_text_list.
File "ocamldoc-odoc_text.mly", line 30, characters 7-12:
Warning: the token ERROR is unused.
%{
(***********************************************************************)
(*                             OCamldoc                                *)
(*                                                                     *)
(*            Maxence Guesdon, projet Cristal, INRIA Rocquencourt      *)
(*                                                                     *)
(*  Copyright 2001 Institut National de Recherche en Informatique et   *)
(*  en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the Q Public License version 1.0.               *)
(*                                                                     *)
(***********************************************************************)

(* $Id: odoc_text_parser.mly,v 1.4 2004/05/23 10:41:50 guesdon Exp $ *)

open Odoc_types

let identchar = 
  "[A-Z a-z_\192-\214\216-\246\248-\255'0-9]"
let blank = "[ \010\013\009\012]"

let remove_beginning_blanks s =
  Str.global_replace (Str.regexp ("^"^blank^"+")) "" s

let remove_trailing_blanks s =
  Str.global_replace (Str.regexp (blank^"+$")) "" s

let print_DEBUG s = print_string s; print_newline ()
%}
%start main
%token VERB
%token VAL_REF
%token <int * string option> Title
%token TYP_REF
%token SUPERSCRIPT
%token SUBSCRIPT
%token SHORTCUT_LIST_ITEM
%token SHORTCUT_ENUM_ITEM
%token SEC_REF
%token RIGHT
%token MOD_REF
%token MOD_LIST_REF
%token MODT_REF
%token MET_REF
%token LIST
%token LINK
%token LEFT
%token LATEX
%token ITEM
%token ITALIC
%token INDEX_LIST
%token EXC_REF
%token ERROR
%token EOF
%token ENUM
%token END_VERB
%token END_SHORTCUT_LIST
%token END_LATEX
%token END_CODE_PRE
%token END_CODE
%token END
%token EMP
%token ELE_REF
%token <string> Char
%token CODE_PRE
%token CODE
%token CLT_REF
%token CLA_REF
%token CENTER
%token BOLD
%token BLANK_LINE
%token BEGIN_SHORTCUT_LIST_ITEM
%token BEGIN_SHORTCUT_ENUM_ITEM
%token ATT_REF

%type <Odoc_types.text> main
%%

main:
| text EOF
    { $1 }
| EOF
    { [Raw ""] }

text:
| text_element_list
    { $1 }

text_element_list:
| text_element
    { [ $1 ] }
| text_element text_element_list
    { $1 :: $2 }

text_element:
| Title text END
    { let n, l_opt = $1 in Title (n, l_opt, $2) }
| BOLD text END
    { Bold $2 }
| ITALIC text END
    { Italic $2 }
| EMP text END
    { Emphasize $2 }
| SUPERSCRIPT text END
    { Superscript $2 }
| SUBSCRIPT text END
    { Subscript $2 }
| CENTER text END
    { Center $2 }
| LEFT text END
    { Left $2 }
| RIGHT text END
    { Right $2 }
| LIST ocamldoc_odoc_text_list END
    { List $2 }
| ENUM ocamldoc_odoc_text_list END
    { Enum $2 }
| CODE string END_CODE
    { Code $2 }
| CODE_PRE string END_CODE_PRE
    { CodePre $2 }
| ELE_REF string END
    { 
      let s2 = remove_beginning_blanks $2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, None) 
     }
| VAL_REF string END
    { 
      let s2 = remove_beginning_blanks $2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, Some RK_value) 
     }
| TYP_REF string END
    { 
      let s2 = remove_beginning_blanks $2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, Some RK_type) 
     }
| EXC_REF string END
    { 
      let s2 = remove_beginning_blanks $2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, Some RK_exception) 
     }
| MOD_REF string END
    { 
      let s2 = remove_beginning_blanks $2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, Some RK_module) 
     }
| MODT_REF string END
    { 
      let s2 = remove_beginning_blanks $2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, Some RK_module_type) 
     }
| CLA_REF string END
    { 
      let s2 = remove_beginning_blanks $2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, Some RK_class) 
     }
| CLT_REF string END
    { 
      let s2 = remove_beginning_blanks $2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, Some RK_class_type) 
     }
| ATT_REF string END
    { 
      let s2 = remove_beginning_blanks $2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, Some RK_attribute) 
     }
| MET_REF string END
    { 
      let s2 = remove_beginning_blanks $2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, Some RK_method) 
     }
| SEC_REF string END
    { 
      let s2 = remove_beginning_blanks $2 in
      let s3 = remove_trailing_blanks s2 in
      Ref (s3, Some (RK_section []))
     }
| MOD_LIST_REF string END
    { 
      let s2 = remove_beginning_blanks $2 in
      let s3 = remove_trailing_blanks s2 in
      let l = Odoc_misc.split_with_blanks s3 in
      Module_list l
     }
| INDEX_LIST
    { Index_list }
| VERB string END_VERB
    { Verbatim $2 }
| LATEX string END_LATEX
    { Latex $2 }
| LINK string END text END
    { Link ($2, $4) }
| BLANK_LINE
    { Newline }
| BEGIN_SHORTCUT_LIST_ITEM shortcut_list END_SHORTCUT_LIST
    { List $2 }
| BEGIN_SHORTCUT_LIST_ITEM shortcut_list EOF
    { List $2 }
| BEGIN_SHORTCUT_ENUM_ITEM shortcut_enum END_SHORTCUT_LIST
    { Enum $2 }
| BEGIN_SHORTCUT_ENUM_ITEM shortcut_enum EOF
    { Enum $2 }
| string
    { Raw $1 }

ocamldoc_odoc_text_list:
| string
    { [] (* A VOIR : un test pour voir qu'il n'y a que des blancs *) }
| string ocamldoc_odoc_text_list
    { $2 }
| ocamldoc_odoc_text_list string
    { $1 }
| item
    { [ $1 ] }
| item ocamldoc_odoc_text_list
    { $1 :: $2 }

item:
| ITEM text END
    { $2 }

shortcut_list:
| text shortcut_list2
    { $1 :: $2 }
| text
    { [ $1 ] }

shortcut_list2:
| SHORTCUT_LIST_ITEM shortcut_list
    { $2 }

shortcut_enum:
| text shortcut_enum2
    { $1 :: $2 }
| text
    { [ $1 ] }

shortcut_enum2:
| SHORTCUT_ENUM_ITEM shortcut_enum
    { $2 }

string:
| Char
    { $1 }
| Char string
    { $1^$2 }

%%
 




