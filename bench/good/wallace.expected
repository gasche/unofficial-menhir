File "wallace.mly", line 57, characters 7-11:
Warning: the token GIVE is unused.
File "wallace.mly", line 73, characters 7-9:
Warning: the token OF is unused.
File "wallace.mly", line 91, characters 7-9:
Warning: the token TO is unused.
File "wallace.mly", line 99, characters 7-12:
Warning: the token WHERE is unused.
%{

open Types
open Type_expr
open Interpreter

%}
%start phrase
%token WITH
%token WHERE
%token VALUE
%token UNIT
%token UNDERSCORE
%token TYPE
%token TRY
%token TRUE
%token TO
%token THEN
%token <string> STRINGCONST
%token STRING
%token STAR
%token SHARP
%token SEMISEMI
%token SEMI
%token RPAREN
%token REF
%token REC
%token RBRACKET
%token RBRACE
%token RAISES
%token RAISE
%token QUOTE
%token PRE
%token PLUS
%token PERCENT
%token OF
%token MISSING
%token MINUS
%token MAYBE
%token MATCH
%token LPAREN
%token LET
%token LEFTARROW
%token LBRACKETBAR
%token LBRACKET
%token LBRACE
%token <int> INTCONST
%token INT
%token INCLUDE
%token IN
%token IMPLIES
%token IF
%token <string> IDENT
%token GIVE
%token FUNCTION
%token FUN
%token <float> FLOATCONST
%token FLOAT
%token FALSE
%token EQUAL
%token ELSE
%token DOT
%token <string> CONSTRUCTOR
%token COMMA
%token COLON
%token COERCEBACK
%token COERCE
%token <char> CHARCONST
%token CHAR
%token BOOL
%token BARRBRACKET
%token BAR
%token BANG
%token ATAT
%token AT
%token ASSIGN
%token AS
%token ARROW
%token AND
%token ABS

%type <Interpreter.phrase> phrase
%%

phrase:
| SHARP IDENT
    { PhraseDirective $2 }
| LET binding_list SEMISEMI
    { PhraseLet(false, $2) }
| LET REC binding_list SEMISEMI
    { PhraseLet(true, $3) }
| VALUE IDENT COLON type_scheme SEMISEMI
    { PhraseValue($2, $4) }
| expression SEMISEMI
    { PhraseLet (false, [PVar "_unnamed", $1]) }
| INCLUDE STRINGCONST
    { PhraseInclude $2 }
| TYPE IDENT SEMISEMI
    { PhraseAbstractType ($2, []) }
| TYPE IDENT LPAREN variance_comma_list RPAREN SEMISEMI
    { PhraseAbstractType ($2, $4) }

expression:
| expression3
    { $1 }
| FUNCTION function_match
    { VGeneralFun $2 }
| FUN fun_match
    { VGeneralFun $2 }
| MATCH expression WITH function_match
    { VApp (VGeneralFun $4, $2) }
| LET binding_list IN expression
    { VLet(false, $2, $4) }
| LET REC binding_list IN expression
    { VLet(true, $3, $5) }
| REC pattern IN expression
    { VRec ($2, $4) }
| TRY expression WITH try_match
    { VGeneralTry ($2, $4) }

expression3:
| expression2
    { $1 }
| expression2 SEMI expression
    { VApp(VGeneralFun [[PWildcard], $3], $1) }

expression2:
| expression1
    { $1 }
| IF expression1 THEN expression2 ELSE expression2
    { VIf ($2, $4, $6) }
| expression1 COMMA expression2
    { VPair ($1, $3) }
| expression1 ASSIGN expression1
    { VApp (VApp(VVar ":=", $1), $3) }

expression1:
| expression0
    { $1 }
| CONSTRUCTOR expression0
    { VConstruct ($1, $2) }
| expression1 expression0
    { VApp ($1, $2) }
| RAISE expression0
    { VApp (VVar "raise", $2) }
| REF expression0
    { VApp (VVar "ref", $2) }

expression0:
| IDENT
    { VVar $1 }
| CONSTRUCTOR
    { VConstruct ($1, VConstant ConstUnit) }
| constant
    { VConstant $1 }
| LBRACKET expression COLON constrained_type RBRACKET
    { VUsage ($2, $4) }
| LPAREN expression COLON type_scheme RPAREN
    { VCast ($2, $4) }
| LPAREN expression RPAREN
    { $2 }
| LBRACE label_expression_list RBRACE
    { VRecord $2 }
| LBRACKETBAR expr_semi_list BARRBRACKET
    { VVector $2 }
| BANG expression0
    { VApp (VVar "!", $2) }
| expression0 DOT IDENT LEFTARROW expression1
    { VApp (VApp (VRecordUpdate $3, $1), $5) }
| expression0 DOT IDENT
    { VRecordAccess ($1, $3) }
| expression0 AT expression1
    { VApp (VApp (VAsymRecordConcat, $1), $3) }
| expression0 ATAT expression1
    { VApp (VApp (VSymRecordConcat, $1), $3) }

constant:
| INTCONST
    { ConstInt $1 }
| FALSE
    { ConstBool false }
| TRUE
    { ConstBool true }
| UNIT
    { ConstUnit }
| FLOATCONST
    { ConstFloat $1 }
| CHARCONST
    { ConstChar $1 }
| STRINGCONST
    { ConstString $1 }

label_expression:
| IDENT EQUAL expression2
    { $1, $3 }

label_expression_list:
| 
    { [] }
| label_expression
    { [$1] }
| label_expression SEMI label_expression_list
    { $1 :: $3 }

expr_semi_list:
| 
    { [] }
| expression2
    { [$1] }
| expression2 SEMI expr_semi_list
    { $1 :: $3 }

fun_match:
| simple_pattern_list ARROW expression BAR fun_match
    { ($1, $3) :: $5 }
| simple_pattern_list ARROW expression
    { [$1, $3] }

function_match:
| pattern ARROW expression BAR function_match
    { ([$1], $3) :: $5 }
| pattern ARROW expression
    { [[$1], $3] }

try_match:
| pattern ARROW expression BAR try_match
    { ($1, $3) :: $5 }
| pattern ARROW expression
    { [$1, $3] }

simple_pattern:
| UNDERSCORE
    { PWildcard }
| IDENT
    { PVar $1 }
| constant
    { PConstant $1 }
| CONSTRUCTOR
    { PConstruct ($1, PConstant ConstUnit) }
| LPAREN pattern RPAREN
    { $2 }
| LBRACE label_pattern_list RBRACE
    { PRecord $2 }

pattern:
| simple_pattern
    { $1 }
| pattern AS IDENT
    { PAlias ($1, $3) }
| pattern COMMA pattern
    { PPair ($1, $3) }
| CONSTRUCTOR simple_pattern
    { PConstruct ($1, $2) }
| REF simple_pattern
    { PRef $2 }
| pattern BAR pattern
    { POr ($1, $3) }

label_pattern:
| IDENT EQUAL pattern
    { $1, $3 }

label_pattern_list:
| 
    { [] }
| label_pattern
    { [$1] }
| label_pattern SEMI label_pattern_list
    { $1 :: $3 }

simple_pattern_list:
| simple_pattern
    { [$1] }
| simple_pattern simple_pattern_list
    { $1 :: $2 }

binding_list:
| binding AND binding_list
    { $1 :: $3 }
| binding
    { [$1] }

binding:
| pattern EQUAL expression
    { ($1, $3) }
| IDENT simple_pattern_list EQUAL expression
    { (PVar $1, VGeneralFun [$2, $4]) }

constrained_type:
| type1
    { $1, TEBottom, [] }
| type1 RAISES type1
    { $1, $3, [] }
| type1 BAR LBRACE coercion_list RBRACE
    { $1, TEBottom, $4 }
| type1 RAISES type1 BAR LBRACE coercion_list RBRACE
    { $1, $3, $6 }

type_scheme:
| type1
    { [], $1, TEBottom, [] }
| type1 RAISES type1
    { [], $1, $3, [] }
| type1 BAR LBRACE coercion_list RBRACE
    { [], $1, TEBottom, $4 }
| type1 RAISES type1 BAR LBRACE coercion_list RBRACE
    { [], $1, $3, $6 }
| COERCE context COERCEBACK IMPLIES type1
    { $2, $5, TEBottom, [] }
| COERCE context COERCEBACK IMPLIES type1 RAISES type1
    { $2, $5, $7, [] }
| COERCE context COERCEBACK IMPLIES type1 BAR LBRACE coercion_list RBRACE
    { $2, $5, TEBottom, $8 }
| COERCE context COERCEBACK IMPLIES type1 RAISES type1 BAR LBRACE coercion_list RBRACE
    { $2, $5, $7, $10 }

type_comma_list:
| type1
    { [$1] }
| type1 COMMA type_comma_list
    { $1 :: $3 }

type1:
| type0
    { $1 }
| type0 ARROW type1 RAISES type0
    { TEAbstract ("->", [$1; $5; $3]) }

type0:
| INT
    { TEAbstract("int", []) }
| BOOL
    { TEAbstract("bool", []) }
| UNIT
    { TEAbstract("unit", []) }
| STRING
    { TEAbstract("string", []) }
| CHAR
    { TEAbstract("char", []) }
| FLOAT
    { TEAbstract("float", []) }
| INTCONST
    { match $1 with
      	       	       	       	       	       	       	    0 -> TEBottom 
							  | 1 -> TETop
							  | _ -> failwith "Unexpected integer in type expression."
							}
| variable_leader IDENT
    { TEVar $2 }
| type0 STAR type0
    { TEAbstract ("*", [$1; $3]) }
| IDENT
    { TEAbstract ($1, []) }
| type0 IDENT
    { TEAbstract ($2, [$1]) }
| LPAREN type1 COMMA type_comma_list RPAREN IDENT
    { TEAbstract ($6, $2 :: $4) }
| LPAREN type1 COMMA type_comma_list RPAREN REF
    { TEAbstract ("ref", $2 :: $4) }
| LBRACE record_row RBRACE
    { TERecord (fst $2, snd $2) }
| LBRACKET variant_row RBRACKET
    { TEVariant (fst $2, snd $2) }
| LPAREN type1 RPAREN
    { $2 }

variable_leader:
| QUOTE
    { () }
| PLUS
    { () }
| MINUS
    { () }
| PERCENT
    { () }

record_row:
| row_type
    { [], $1 }
| IDENT COLON row_type SEMI record_row
    { let entries, rest = $5 in ($1, $3) :: entries, rest }

variant_row:
| row_type
    { [], $1 }
| CONSTRUCTOR COLON row_type SEMI variant_row
    { let entries, rest = $5 in ($1, $3) :: entries, rest }

row_type:
| ABS
    { TEAbsent }
| PRE type1
    { TEPresent $2 }
| MAYBE type1
    { TEMaybe $2 }
| MISSING
    { TEMissing }
| type1
    { $1 }

coercion_list:
| coercion
    { $1 }
| coercion SEMI coercion_list
    { $1 @ $3 }

coercion:
| type_comma_list COERCE type_comma_list
    { [$1, $3] }
| type_comma_list COERCE type1 COERCE type_comma_list
    { [($1, [$3]); ([$3], $5)] }
| type1 EQUAL type1
    { [([$1], [$3]); ([$3], [$1])] }

context:
| context_entry
    { [$1] }
| context_entry SEMI context
    { $1 :: $3 }

context_entry:
| IDENT COLON type1
    { $1, $3 }

variance_comma_list:
| variance
    { [$1] }
| variance COMMA variance_comma_list
    { $1 :: $3 }

variance:
| PLUS
    { true }
| MINUS
    { false }

%%



