File "confluence-psl.mly", line 69, characters 23-28:
Warning: the token Abort is unused.
File "confluence-psl.mly", line 57, characters 23-26:
Warning: the token Amp is unused.
File "confluence-psl.mly", line 46, characters 23-28:
Warning: the token Aster is unused.
File "confluence-psl.mly", line 141, characters 23-33:
Warning: the token Bang_equal is unused.
File "confluence-psl.mly", line 59, characters 23-26:
Warning: the token Bar is unused.
File "confluence-psl.mly", line 48, characters 23-34:
Warning: the token Bar_dash_gt is unused.
File "confluence-psl.mly", line 49, characters 23-35:
Warning: the token Bar_equal_gt is unused.
File "confluence-psl.mly", line 78, characters 23-30:
Warning: the token Boolean is unused.
File "confluence-psl.mly", line 52, characters 23-35:
Warning: the token Brackl_aster is unused.
File "confluence-psl.mly", line 54, characters 23-37:
Warning: the token Brackl_dash_gt is unused.
File "confluence-psl.mly", line 55, characters 23-35:
Warning: the token Brackl_equal is unused.
File "confluence-psl.mly", line 53, characters 23-41:
Warning: the token Brackl_plus_brackr is unused.
File "confluence-psl.mly", line 148, characters 23-29:
Warning: the token Carrot is unused.
File "confluence-psl.mly", line 79, characters 23-28:
Warning: the token Clock is unused.
File "confluence-psl.mly", line 45, characters 23-34:
Warning: the token Colon_equal is unused.
File "confluence-psl.mly", line 80, characters 23-28:
Warning: the token Const is unused.
File "confluence-psl.mly", line 81, characters 23-32:
Warning: the token Countones is unused.
File "confluence-psl.mly", line 146, characters 23-27:
Warning: the token Dash is unused.
File "confluence-psl.mly", line 83, characters 23-30:
Warning: the token Default is unused.
File "confluence-psl.mly", line 61, characters 23-29:
Warning: the token Dollar is unused.
File "confluence-psl.mly", line 88, characters 23-31:
Warning: the token Endpoint is unused.
File "confluence-psl.mly", line 44, characters 23-28:
Warning: the token Equal is unused.
File "confluence-psl.mly", line 140, characters 23-34:
Warning: the token Equal_equal is unused.
File "confluence-psl.mly", line 93, characters 23-29:
Warning: the token Forall is unused.
File "confluence-psl.mly", line 144, characters 23-25:
Warning: the token Gt is unused.
File "confluence-psl.mly", line 145, characters 23-31:
Warning: the token Gt_equal is unused.
File "confluence-psl.mly", line 95, characters 23-25:
Warning: the token In is unused.
File "confluence-psl.mly", line 96, characters 23-26:
Warning: the token Inf is unused.
File "confluence-psl.mly", line 152, characters 23-36:
Warning: the token Integer_width is unused.
File "confluence-psl.mly", line 98, characters 23-32:
Warning: the token Isunknown is unused.
File "confluence-psl.mly", line 159, characters 23-34:
Warning: the token Lexer_error is unused.
File "confluence-psl.mly", line 142, characters 23-25:
Warning: the token Lt is unused.
File "confluence-psl.mly", line 143, characters 23-31:
Warning: the token Lt_equal is unused.
File "confluence-psl.mly", line 112, characters 23-29:
Warning: the token Onehot is unused.
File "confluence-psl.mly", line 113, characters 23-30:
Warning: the token Onehot0 is unused.
File "confluence-psl.mly", line 47, characters 23-27:
Warning: the token Plus is unused.
File "confluence-psl.mly", line 115, characters 23-27:
Warning: the token Prev is unused.
File "confluence-psl.mly", line 114, characters 23-31:
Warning: the token Property is unused.
File "confluence-psl.mly", line 181, characters 7-15:
Warning: the token Question is unused.
File "confluence-psl.mly", line 120, characters 23-31:
Warning: the token Sequence is unused.
File "confluence-psl.mly", line 121, characters 23-29:
Warning: the token Stable is unused.
File "confluence-psl.mly", line 147, characters 23-28:
Warning: the token Tildy is unused.
File "confluence-psl.mly", line 125, characters 23-28:
Warning: the token Union is unused.
File "confluence-psl.mly", line 186, characters 7-13:
Warning: the token Vl_amp is unused.
File "confluence-psl.mly", line 183, characters 7-17:
Warning: the token Vl_amp_amp is unused.
File "confluence-psl.mly", line 190, characters 13-20:
Warning: the token Vl_bang is unused.
File "confluence-psl.mly", line 184, characters 7-13:
Warning: the token Vl_bar is unused.
File "confluence-psl.mly", line 182, characters 7-17:
Warning: the token Vl_bar_bar is unused.
File "confluence-psl.mly", line 190, characters 30-39:
Warning: the token Vl_uminus is unused.
File "confluence-psl.mly", line 190, characters 21-29:
Warning: the token Vl_uplus is unused.
File "confluence-psl.mly", line 133, characters 23-29:
Warning: the token Within is unused.
%{
(* Pre Code *)
let parse_error s =
  Parser_util.error ("Unexpected token: '" ^ (Parser_util.get_current_token ()) ^ "'")
;;

let debug msg =
  print_string msg; print_newline ()
;;

%}
%start psl_specification
%token <Psl_ast.token> Vunit
%token <Psl_ast.token> Vprop
%token <Psl_ast.token> Vmode
%token <Psl_ast.token> Strong
%token <Psl_ast.token> String
%token <Psl_ast.token> Stable
%token <Psl_ast.token> Slash
%token <Psl_ast.token> Sequence
%token <Psl_ast.token> Rose
%token <Psl_ast.token> Restrict_guarantee
%token <Psl_ast.token> Restrict
%token <Psl_ast.token> Report
%token <Psl_ast.token> Property
%token <Psl_ast.token> Prev
%token <Psl_ast.token> Posedge
%token <Psl_ast.token> Period_period
%token <Psl_ast.token> Period
%token <Psl_ast.token> Parenr
%token <Psl_ast.token> Parenl
%token <Psl_ast.token> Onehot0
%token <Psl_ast.token> Onehot
%token <Psl_ast.token> Next_event_e
%token <Psl_ast.token> Next_event_a
%token <Psl_ast.token> Negedge
%token <Psl_ast.token> Lexer_error
%token <Psl_ast.token> Isunknown
%token <Psl_ast.token> Integer_width
%token <Psl_ast.token> Integer
%token <Psl_ast.token> Inherit
%token <Psl_ast.token> Inf
%token <Psl_ast.token> In
%token <Psl_ast.token> Identifier_esc
%token <Psl_ast.token> Identifier
%token <Psl_ast.token> Forall
%token <Psl_ast.token> Fell
%token <Psl_ast.token> Fairness
%token <Psl_ast.token> Equal
%token <Psl_ast.token> Endpoint
%token <Psl_ast.token> EOF
%token <Psl_ast.token> E
%token <Psl_ast.token> Dollar
%token <Psl_ast.token> Default
%token <Psl_ast.token> Cover
%token <Psl_ast.token> Countones
%token <Psl_ast.token> Const
%token <Psl_ast.token> Comma
%token <Psl_ast.token> Colon_equal
%token <Psl_ast.token> Clock
%token <Psl_ast.token> Brackr
%token <Psl_ast.token> Bracer
%token <Psl_ast.token> Bracel
%token <Psl_ast.token> Boolean
%token <Psl_ast.token> Aster
%token <Psl_ast.token> Assume_guarantee
%token <Psl_ast.token> Assume
%token <Psl_ast.token> Assert
%token <Psl_ast.token> A
%token <Psl_ast.token> Never
%token <Psl_ast.token> G
%token <Psl_ast.token> Always
%token <Psl_ast.token> Lt_dash_gt
%token <Psl_ast.token> Dash_gt
%token <Psl_ast.token> Bar_equal_gt
%token <Psl_ast.token> Bar_dash_gt
%token <Psl_ast.token> W
%token <Psl_ast.token> Until_bang_
%token <Psl_ast.token> Until_bang
%token <Psl_ast.token> Until_
%token <Psl_ast.token> Until
%token <Psl_ast.token> U
%token <Psl_ast.token> Before_bang_
%token <Psl_ast.token> Before_bang
%token <Psl_ast.token> Before_
%token <Psl_ast.token> Before
%token <Psl_ast.token> X_bang
%token <Psl_ast.token> X
%token <Psl_ast.token> Next_event_e_bang
%token <Psl_ast.token> Next_event_bang
%token <Psl_ast.token> Next_event_a_bang
%token <Psl_ast.token> Next_event
%token <Psl_ast.token> Next_e_bang
%token <Psl_ast.token> Next_e
%token <Psl_ast.token> Next_bang
%token <Psl_ast.token> Next_a_bang
%token <Psl_ast.token> Next_a
%token <Psl_ast.token> Next
%token <Psl_ast.token> F
%token <Psl_ast.token> Eventually_bang
%token <Psl_ast.token> EX
%token <Psl_ast.token> EG
%token <Psl_ast.token> EF
%token <Psl_ast.token> AX
%token <Psl_ast.token> AG
%token <Psl_ast.token> AF
%token <Psl_ast.token> Abort
%token <Psl_ast.token> Semicolon
%token <Psl_ast.token> Colon
%token <Psl_ast.token> Bar_bar
%token <Psl_ast.token> Bar
%token <Psl_ast.token> Amp_amp
%token <Psl_ast.token> Amp
%token <Psl_ast.token> Within
%token <Psl_ast.token> Brackl_plus_brackr
%token <Psl_ast.token> Brackl_equal
%token <Psl_ast.token> Brackl_dash_gt
%token <Psl_ast.token> Brackl_aster
%token <Psl_ast.token> At
%token <Psl_ast.token> Union
%token <Psl_ast.token> Bang
%token <Psl_ast.token> Carrot
%token <Psl_ast.token> Equal_equal
%token <Psl_ast.token> Bang_equal
%token <Psl_ast.token> Lt_equal
%token <Psl_ast.token> Lt
%token <Psl_ast.token> Gt_equal
%token <Psl_ast.token> Gt
%token <Psl_ast.token> Plus
%token <Psl_ast.token> Dash
%token <Psl_ast.token> Tildy
%token <Psl_ast.token> Brackl
%right Never G Always 
%right Lt_dash_gt Dash_gt 
%right Bar_equal_gt Bar_dash_gt 
%right W Until_bang_ Until_bang Until_ Until U Before_bang_ Before_bang Before_ Before 
%right X_bang X Next_event_e_bang Next_event_bang Next_event_a_bang Next_event Next_e_bang Next_e Next_bang Next_a_bang Next_a Next F Eventually_bang 
%left EX EG EF AX AG AF 
%left Abort 
%left Semicolon 
%left Colon 
%left Bar_bar Bar 
%left Amp_amp Amp 
%left Within 
%left Brackl_plus_brackr Brackl_equal Brackl_dash_gt Brackl_aster 
%left At 
%left Union 
%left Bang 
%right Question 
%left Vl_bar_bar 
%left Vl_amp_amp 
%left Vl_bar 
%left Carrot 
%left Vl_amp 
%left Equal_equal Bang_equal 
%left Lt_equal Lt Gt_equal Gt 
%left Plus Dash 
%left Vl_uplus Vl_uminus Vl_bang Tildy 
%left Brackl 
%type <Psl_ast.spec> psl_specification
%%

psl_specification:
| verification_items EOF
    { List.rev $1 }

verification_items:
| 
    { [] }
| verification_items verification_unit
    { $2 :: $1 }

verification_unit:
| vunit_type identifier Bracel inherit_specs vunit_items Bracer
    { raise (Parser_util.Error "Verification unit requires module name.") }
| vunit_type identifier Parenl hierarchical_hdl_name Parenr Bracel inherit_specs vunit_items Bracer
    { List.hd $4, List.rev $8 }

vunit_type:
| Vunit
    { $1 }
| Vprop
    { raise (Parser_util.Error "\"vprop\" not supported.") }
| Vmode
    { raise (Parser_util.Error "\"vmode\" not supported.") }

hierarchical_hdl_name:
| identifier hierarchical_hdl_names
    { fst $1 :: List.rev $2 }

hierarchical_hdl_names:
| 
    { [] }
| hierarchical_hdl_names path_separator identifier
    { raise (Parser_util.Error "Hierarchical names are not supported.") }

path_separator:
| Period
    { () }
| Slash
    { () }

inherit_specs:
| 
    { [] }
| inherit_specs inherit_spec
    { $2 :: $1 }

inherit_spec:
| Inherit identifier comma_identifiers
    { Parser_util.error "\"inherit\" not supported." }

vunit_items:
| 
    { [] }
| vunit_items vunit_item
    { $2 :: $1 }

vunit_item:
| psl_directive
    { $1 }

psl_directive:
| verification_directive
    { $1 }
| identifier Colon verification_directive
    { $3 }

verification_directive:
| Assert property report Semicolon
    { Psl_ast.Assert (snd $1, $2, $3) }
| Assume property Semicolon
    { raise (Parser_util.Error "\"assume\" directive not supported.") }
| Assume_guarantee property report Semicolon
    { raise (Parser_util.Error "\"assume_guarantee\" directive not supported.") }
| Restrict property Semicolon
    { raise (Parser_util.Error "\"restrict\" directive not supported.") }
| Restrict_guarantee property report Semicolon
    { raise (Parser_util.Error "\"restrict_guarantee\" directive not supported.") }
| Cover property report Semicolon
    { raise (Parser_util.Error "\"cover\" directive not supported.") }
| Fairness property Semicolon
    { raise (Parser_util.Error "\"fairness\" directive not supported.") }
| Strong Fairness property Comma property Semicolon
    { raise (Parser_util.Error "\"strong fairness\" directive not supported.") }

finite_range:
| number range_sym number
    { $1, $3 }

range_sym:
| Colon
    { () }
| Period_period
    { () }

report:
| 
    { "" }
| Report String
    { let s = fst $2 in String.sub s 1 (String.length s - 2) }

identifier:
| Identifier
    { $1 }
| Identifier_esc
    { $1 }

comma_identifiers:
| 
    { () }
| Comma identifier comma_identifiers
    { () }

number:
| Integer
    { int_of_string (fst $1) }

property:
| identifier
    { Ltl.Variable (fst $1) }
| Parenl property Parenr
    { $2 }
| property At clock_expression
    { $3 $1 }
| Bang property
    { Ltl.not_ $2 }
| property Amp_amp property
    { Ltl.and_ $1 $3 }
| property Bar_bar property
    { Ltl.or_ $1 $3 }
| property Dash_gt property
    { Ltl.imply $1 $3 }
| property Lt_dash_gt property
    { Ltl.equivalent $1 $3 }
| X property
    { Ltl.next false $2 }
| X_bang property
    { Ltl.next true  $2 }
| F property
    { Ltl.eventually $2 }
| G property
    { Ltl.always $2 }
| Brackl property U property Brackr
    { Ltl.until true  $2 $4 }
| Brackl property W property Brackr
    { Ltl.until false $2 $4 }
| Always property
    { Ltl.always $2 }
| Never property
    { Ltl.never $2 }
| Next property
    { Ltl.next false $2 }
| Next_bang property
    { Ltl.next true  $2 }
| Eventually_bang property
    { Ltl.eventually $2 }
| property Until property
    { Ltl.until false $1 $3 }
| property Until_bang property
    { Ltl.until true  $1 $3 }
| property Until_bang_ property
    { Ltl.until_overlap true  $1 $3 }
| property Until_ property
    { Ltl.until_overlap false $1 $3 }
| property Before property
    { Ltl.before false $1 $3 }
| property Before_bang property
    { Ltl.before true  $1 $3 }
| property Before_bang_ property
    { Ltl.before_overlap true  $1 $3 }
| property Before_ property
    { Ltl.before_overlap false $1 $3 }
| X Brackl number Brackr Parenl property Parenr
    { Ltl.next_repeat false $3 $6 }
| X_bang Brackl number Brackr Parenl property Parenr
    { Ltl.next_repeat true  $3 $6 }
| Next Brackl number Brackr Parenl property Parenr
    { Ltl.next_repeat false $3 $6 }
| Next_bang Brackl number Brackr Parenl property Parenr
    { Ltl.next_repeat true  $3 $6 }
| Next_a Brackl finite_range Brackr Parenl property Parenr
    { Ltl.next_ae false true  (fst $3) (snd $3) $6 }
| Next_a_bang Brackl finite_range Brackr Parenl property Parenr
    { Ltl.next_ae true  true  (fst $3) (snd $3) $6 }
| Next_e Brackl finite_range Brackr Parenl property Parenr
    { Ltl.next_ae false false (fst $3) (snd $3) $6 }
| Next_e_bang Brackl finite_range Brackr Parenl property Parenr
    { Ltl.next_ae true  false (fst $3) (snd $3) $6 }
| Next_event Parenl property Parenr Parenl property Parenr
    {Ltl.next_event false $3 $6 }
| Next_event_bang Parenl property Parenr Parenl property Parenr
    {Ltl.next_event true  $3 $6 }
| Next_event Parenl property Parenr Brackl number Brackr Parenl property Parenr
    { Ltl.next_event_repeat false $6 $3 $9 }
| Next_event_bang Parenl property Parenr Brackl number Brackr Parenl property Parenr
    { Ltl.next_event_repeat true  $6 $3 $9 }
| Next_event_a Parenl property Parenr Brackl finite_range Brackr Parenl property Parenr
    { Ltl.next_event_ae false true  (fst $6) (snd $6) $3 $9 }
| Next_event_a_bang Parenl property Parenr Brackl finite_range Brackr Parenl property Parenr
    { Ltl.next_event_ae true  true  (fst $6) (snd $6) $3 $9 }
| Next_event_e Parenl property Parenr Brackl finite_range Brackr Parenl property Parenr
    { Ltl.next_event_ae false false (fst $6) (snd $6) $3 $9 }
| Next_event_e_bang Parenl property Parenr Brackl finite_range Brackr Parenl property Parenr
    { Ltl.next_event_ae true  false (fst $6) (snd $6) $3 $9 }
| AX property
    { raise (Parser_util.Error "PSL OBE properties are not supported.") }
| AF property
    { raise (Parser_util.Error "PSL OBE properties are not supported.") }
| AG property
    { raise (Parser_util.Error "PSL OBE properties are not supported.") }
| A Brackl property U property Brackr
    { raise (Parser_util.Error "PSL OBE properties are not supported.") }
| EX property
    { raise (Parser_util.Error "PSL OBE properties are not supported.") }
| EF property
    { raise (Parser_util.Error "PSL OBE properties are not supported.") }
| EG property
    { raise (Parser_util.Error "PSL OBE properties are not supported.") }
| E Brackl property U property Brackr
    { raise (Parser_util.Error "PSL OBE properties are not supported.") }

clock_expression:
| Parenl Posedge identifier Parenr
    { Ltl.posedge (fst $3) }
| Parenl Negedge identifier Parenr
    { Ltl.negedge (fst $3) }
| Rose Parenl identifier Parenr
    { Ltl.posedge (fst $3) }
| Fell Parenl identifier Parenr
    { Ltl.negedge (fst $3) }

%%

(* Post Code *)





