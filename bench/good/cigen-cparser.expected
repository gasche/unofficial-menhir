File "cigen-cparser.mly", line 124, characters 18-36:
Warning: the token Chars_extended_raw is unused.
File "cigen-cparser.mly", line 123, characters 18-27:
Warning: the token Chars_raw is unused.
File "cigen-cparser.mly", line 120, characters 17-23:
Warning: the token Double is unused.
File "cigen-cparser.mly", line 121, characters 17-28:
Warning: the token Double_long is unused.
File "cigen-cparser.mly", line 122, characters 17-22:
Warning: the token Float is unused.
File "cigen-cparser.mly", line 118, characters 15-27:
Warning: the token Integer_long is unused.
File "cigen-cparser.mly", line 119, characters 15-31:
Warning: the token Integer_unsigned is unused.
File "cigen-cparser.mly", line 74, characters 7-16:
Warning: the token KW_access is unused.
File "cigen-cparser.mly", line 68, characters 7-13:
Warning: the token KW_add is unused.
File "cigen-cparser.mly", line 78, characters 7-16:
Warning: the token KW_add_to is unused.
File "cigen-cparser.mly", line 96, characters 7-13:
Warning: the token KW_and is unused.
File "cigen-cparser.mly", line 86, characters 7-20:
Warning: the token KW_assign_add is unused.
File "cigen-cparser.mly", line 90, characters 7-20:
Warning: the token KW_assign_and is unused.
File "cigen-cparser.mly", line 84, characters 7-20:
Warning: the token KW_assign_div is unused.
File "cigen-cparser.mly", line 91, characters 7-21:
Warning: the token KW_assign_exor is unused.
File "cigen-cparser.mly", line 88, characters 7-21:
Warning: the token KW_assign_left is unused.
File "cigen-cparser.mly", line 85, characters 7-20:
Warning: the token KW_assign_mod is unused.
File "cigen-cparser.mly", line 92, characters 7-19:
Warning: the token KW_assign_or is unused.
File "cigen-cparser.mly", line 89, characters 7-22:
Warning: the token KW_assign_right is unused.
File "cigen-cparser.mly", line 87, characters 7-20:
Warning: the token KW_assign_sub is unused.
File "cigen-cparser.mly", line 83, characters 7-22:
Warning: the token KW_assign_times is unused.
File "cigen-cparser.mly", line 34, characters 7-15:
Warning: the token KW_break is unused.
File "cigen-cparser.mly", line 35, characters 7-14:
Warning: the token KW_case is unused.
File "cigen-cparser.mly", line 107, characters 7-15:
Warning: the token KW_colon is unused.
File "cigen-cparser.mly", line 80, characters 7-20:
Warning: the token KW_complement is unused.
File "cigen-cparser.mly", line 38, characters 7-18:
Warning: the token KW_continue is unused.
File "cigen-cparser.mly", line 39, characters 7-17:
Warning: the token KW_default is unused.
File "cigen-cparser.mly", line 71, characters 7-13:
Warning: the token KW_div is unused.
File "cigen-cparser.mly", line 40, characters 7-12:
Warning: the token KW_do is unused.
File "cigen-cparser.mly", line 42, characters 7-14:
Warning: the token KW_else is unused.
File "cigen-cparser.mly", line 98, characters 7-15:
Warning: the token KW_equal is unused.
File "cigen-cparser.mly", line 97, characters 7-14:
Warning: the token KW_exor is unused.
File "cigen-cparser.mly", line 46, characters 7-13:
Warning: the token KW_for is unused.
File "cigen-cparser.mly", line 47, characters 7-14:
Warning: the token KW_goto is unused.
File "cigen-cparser.mly", line 103, characters 7-17:
Warning: the token KW_greater is unused.
File "cigen-cparser.mly", line 105, characters 7-19:
Warning: the token KW_greatereq is unused.
File "cigen-cparser.mly", line 48, characters 7-12:
Warning: the token KW_if is unused.
File "cigen-cparser.mly", line 94, characters 7-18:
Warning: the token KW_lazy_and is unused.
File "cigen-cparser.mly", line 93, characters 7-17:
Warning: the token KW_lazy_or is unused.
File "cigen-cparser.mly", line 100, characters 7-14:
Warning: the token KW_left is unused.
File "cigen-cparser.mly", line 102, characters 7-15:
Warning: the token KW_lower is unused.
File "cigen-cparser.mly", line 104, characters 7-17:
Warning: the token KW_lowereq is unused.
File "cigen-cparser.mly", line 72, characters 7-13:
Warning: the token KW_mod is unused.
File "cigen-cparser.mly", line 81, characters 7-13:
Warning: the token KW_not is unused.
File "cigen-cparser.mly", line 95, characters 7-12:
Warning: the token KW_or is unused.
File "cigen-cparser.mly", line 73, characters 7-15:
Warning: the token KW_point is unused.
File "cigen-cparser.mly", line 52, characters 7-16:
Warning: the token KW_return is unused.
File "cigen-cparser.mly", line 101, characters 7-15:
Warning: the token KW_right is unused.
File "cigen-cparser.mly", line 55, characters 7-16:
Warning: the token KW_sizeof is unused.
File "cigen-cparser.mly", line 69, characters 7-13:
Warning: the token KW_sub is unused.
File "cigen-cparser.mly", line 79, characters 7-18:
Warning: the token KW_sub_from is unused.
File "cigen-cparser.mly", line 58, characters 7-16:
Warning: the token KW_switch is unused.
File "cigen-cparser.mly", line 75, characters 7-14:
Warning: the token KW_test is unused.
File "cigen-cparser.mly", line 99, characters 7-17:
Warning: the token KW_unequal is unused.
File "cigen-cparser.mly", line 64, characters 7-15:
Warning: the token KW_while is unused.
File "cigen-cparser.mly", line 134, characters 7-16:
Warning: the token Nulltoken is unused.
File "cigen-cparser.mly", line 126, characters 18-37:
Warning: the token String_extended_raw is unused.
File "cigen-cparser.mly", line 125, characters 18-28:
Warning: the token String_raw is unused.
%{
  (* header *)
  open Ctypes
  open Cparseraux
  
  let check_for_typedefs d =
  ( if List.mem S_typedef (fst(d.d_specs)) then
    (  let n = (List.map name_of_declarator (d.d_decl)) in
          List.iter (fun x-> print_endline ("new typedef: "^x)) n;
          flush stdout;
          typedef_names := n @ !typedef_names
    )
  )

%}
%start nothing
%start translation_unit
%token < string > Typedef_ident
%token < string > String_raw
%token < string > String_extended_raw
%token Nulltoken
%token KW_while
%token KW_volatile
%token KW_void
%token KW_unsigned
%token KW_union
%token KW_unequal
%token KW_typedef
%token KW_times
%token KW_test
%token KW_switch
%token KW_sub_from
%token KW_sub
%token KW_struct
%token KW_static
%token KW_sizeof
%token KW_signed
%token KW_short
%token KW_semicolon
%token KW_right
%token KW_return
%token KW_register
%token KW_point
%token KW_or
%token KW_oparen
%token KW_obracket
%token KW_obrace
%token KW_not
%token KW_mod
%token KW_lowereq
%token KW_lower
%token KW_long
%token KW_left
%token KW_lazy_or
%token KW_lazy_and
%token KW_int
%token KW_if
%token KW_greatereq
%token KW_greater
%token KW_goto
%token KW_for
%token KW_float
%token KW_extern
%token KW_exor
%token KW_equal
%token KW_enum
%token KW_else
%token KW_double
%token KW_do
%token KW_div
%token KW_default
%token KW_cparen
%token KW_continue
%token KW_const
%token KW_complement
%token KW_comma
%token KW_colon
%token KW_char
%token KW_cbracket
%token KW_cbrace
%token KW_case
%token KW_break
%token KW_auto
%token KW_assign_times
%token KW_assign_sub
%token KW_assign_right
%token KW_assign_or
%token KW_assign_mod
%token KW_assign_left
%token KW_assign_exor
%token KW_assign_div
%token KW_assign_and
%token KW_assign_add
%token KW_assign
%token KW_andsoon
%token KW_and
%token KW_add_to
%token KW_add
%token KW_access
%token < int > Integer_unsuffixed
%token < int > Integer_unsigned
%token < int > Integer_long
%token < string > Ident
%token < float > Float
%token Endofstream
%token < float > Double_long
%token < float > Double
%token < string > Chars_raw
%token < string > Chars_extended_raw

%type < unit > nothing
%type < Ctypes.declaration list > translation_unit
%%

nothing:
| Endofstream
    { () }

translation_unit:
| declaration Endofstream
    { [$1] }
| declaration translation_unit
    { $1 :: $2 }

declaration:
| declaration_specifiers init_declarator_list KW_semicolon
    { let d = {d_specs=$1; d_decl=$2} in
          check_for_typedefs d;
          d
      }
| declaration_specifiers KW_semicolon
    { let d = {d_specs=$1; d_decl=[]} in
          check_for_typedefs d;
          d
      }

declaration_specifiers:
| storage_class_specifier declaration_specifiers
    { ($1::(fst $2), snd $2) }
| storage_class_specifier
    { ([$1], ([],[])) }
| type_specifier declaration_specifiers
    { (fst $2, ($1::fst(snd $2),snd (snd $2)) ) }
| type_specifier
    { ([],([$1],[])) }
| type_qualifier declaration_specifiers
    { (fst $2, (fst(snd $2), $1::snd(snd $2))) }
| type_qualifier
    { ([],([],[$1])) }

storage_class_specifier:
| KW_auto
    { S_auto }
| KW_register
    { S_register }
| KW_static
    { S_static }
| KW_extern
    { S_extern }
| KW_typedef
    { S_typedef }

type_specifier:
| KW_void
    { T_void }
| KW_char
    { T_char }
| KW_short
    { T_short }
| KW_int
    { T_int }
| KW_long
    { T_long }
| KW_float
    { T_float }
| KW_double
    { T_double }
| KW_signed
    { T_signed }
| KW_unsigned
    { T_unsigned }
| struct_or_union_specifier
    { T_struct $1 }
| enum_specifier
    { T_enum $1 }
| typedef_name
    { T_typedef $1 }

type_qualifier:
| KW_const
    { Q_const }
| KW_volatile
    { Q_volatile }

struct_or_union_specifier:
| struct_or_union Ident KW_obrace struct_declaration_list KW_cbrace
    { {struct_su = $1; struct_tag = Some $2; struct_lst = $4 }}
| struct_or_union Typedef_ident KW_obrace struct_declaration_list KW_cbrace
    { {struct_su = $1; struct_tag = Some $2; struct_lst = $4 }}
| struct_or_union KW_obrace struct_declaration_list KW_cbrace
    { {struct_su = $1; struct_tag = None; struct_lst = $3 }}
| struct_or_union Ident
    { {struct_su = $1; struct_tag = Some $2; struct_lst = [] }}
| struct_or_union Typedef_ident
    { {struct_su = $1; struct_tag = Some $2; struct_lst = [] }}

struct_or_union:
| KW_struct
    { Is_struct }
| KW_union
    { Is_union }

struct_declaration_list:
| struct_declaration
    { [$1] }
| struct_declaration struct_declaration_list
    { $1 :: $2 }

init_declarator_list:
| declarator
    { [$1] }
| declarator KW_comma init_declarator_list
    { $1 :: $3 }

struct_declaration:
| specifier_qualifier_list struct_declarator_list KW_semicolon
    { {s_specs = $1; s_decl = $2} }

specifier_qualifier_list:
| type_specifier
    { ([$1],[]) }
| type_specifier specifier_qualifier_list
    { ($1::(fst $2),snd $2) }
| type_qualifier
    { ([],[$1]) }
| type_qualifier specifier_qualifier_list
    { (fst $2,$1::(snd $2)) }

struct_declarator_list:
| declarator
    { [$1] }
| declarator KW_comma struct_declarator_list
    { $1 :: $3 }

enum_specifier:
| KW_enum Ident KW_obrace enumerator_list KW_cbrace
    { {enum_tag = Some $2; enum_labels =$4 }}
| KW_enum Typedef_ident KW_obrace enumerator_list KW_cbrace
    { {enum_tag = Some $2; enum_labels =$4 }}
| KW_enum KW_obrace enumerator_list KW_cbrace
    { {enum_tag = None; enum_labels = $3} }
| KW_enum Ident
    { {enum_tag = Some $2; enum_labels = [] } }
| KW_enum Typedef_ident
    { {enum_tag = Some $2; enum_labels = [] } }

enumerator_list:
| enumerator
    { [$1] }
| enumerator KW_comma enumerator_list
    { $1 :: $3 }

enumerator:
| Ident
    { ($1,None) }
| Ident KW_assign Integer_unsuffixed
    { ($1,Some $3) }

declarator:
| direct_declarator
    { $1 }
| pointer direct_declarator
    { D_pointer ($2,$1) }

direct_declarator:
| Ident
    { D_name $1 }
| KW_oparen declarator KW_cparen
    { $2 }
| direct_declarator KW_obracket KW_cbracket
    { D_openarray $1 }
| direct_declarator KW_obracket Integer_unsuffixed KW_cbracket
    { D_array ($1,$3) }
| direct_declarator KW_oparen parameter_type_list KW_cparen
    { D_function ($1,$3) }

pointer:
| KW_times type_qualifier_list
    { [$2] }
| KW_times
    { [[]] }
| KW_times type_qualifier_list pointer
    { $2 :: $3 }
| KW_times pointer
    { [] :: $2 }

type_qualifier_list:
| type_qualifier
    { [$1] }
| type_qualifier type_qualifier_list
    { $1 :: $2 }

parameter_type_list:
| parameter_list
    { $1 }
| parameter_list KW_comma KW_andsoon
    { $1 @ [P_var] }

parameter_list:
| parameter_declaration
    { [$1] }
| parameter_list KW_comma parameter_declaration
    { $1 @  [$3] }

parameter_declaration:
| declaration_specifiers declarator
    { P_decl ($1,$2) }
| declaration_specifiers abstract_declarator
    { P_abs ($1,$2) }
| declaration_specifiers
    { P_null $1 }

abstract_declarator:
| pointer
    { D_abspointer $1 }
| pointer direct_abstract_declarator
    { D_pointer ($2,$1) }
| direct_abstract_declarator
    { $1 }

direct_abstract_declarator:
| KW_oparen abstract_declarator KW_cparen
    { $2 }
| direct_abstract_declarator KW_obracket KW_cbracket
    { D_openarray $1 }
| direct_abstract_declarator KW_obracket Integer_unsuffixed KW_cbracket
    { D_array ($1,$3) }
| KW_obracket KW_cbracket
    { D_absopenarray }
| KW_obracket Integer_unsuffixed KW_cbracket
    { D_absarray $2 }
| direct_abstract_declarator KW_oparen parameter_type_list KW_cparen
    { D_function ($1,$3) }
| direct_abstract_declarator KW_oparen KW_cparen
    { D_function ($1,[]) }
| KW_oparen parameter_type_list KW_cparen
    { D_absfunction $2 }
| KW_oparen KW_cparen
    { D_absfunction [] }

typedef_name:
| Typedef_ident
    { $1 }

%%


(**** trailer ****)




