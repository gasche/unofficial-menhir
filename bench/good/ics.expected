Note: the nonterminal symbol list (from ics.mly) is renamed ics_list.
File "ics.mly", line 47, characters 13-19:
Warning: the token ACLBRA is unused.
File "ics.mly", line 47, characters 7-12:
Warning: the token ALBRA is unused.
File "ics.mly", line 50, characters 48-57:
Warning: the token BACKSLASH is unused.
File "ics.mly", line 45, characters 7-10:
Warning: the token BOT is unused.
File "ics.mly", line 57, characters 22-27:
Warning: the token BWAND is unused.
File "ics.mly", line 57, characters 45-50:
Warning: the token BWIFF is unused.
File "ics.mly", line 57, characters 39-44:
Warning: the token BWIMP is unused.
File "ics.mly", line 57, characters 16-21:
Warning: the token BWITE is unused.
File "ics.mly", line 57, characters 51-56:
Warning: the token BWNOT is unused.
File "ics.mly", line 57, characters 28-32:
Warning: the token BWOR is unused.
File "ics.mly", line 57, characters 33-38:
Warning: the token BWXOR is unused.
File "ics.mly", line 47, characters 20-25:
Warning: the token CLBRA is unused.
File "ics.mly", line 35, characters 28-36:
Warning: the token COMMANDS is unused.
File "ics.mly", line 50, characters 23-27:
Warning: the token DDOT is unused.
File "ics.mly", line 51, characters 36-40:
Warning: the token DIFF is unused.
File "ics.mly", line 61, characters 24-30:
Warning: the token DIVIDE is unused.
File "ics.mly", line 50, characters 38-47:
Warning: the token ENDMARKER is unused.
File "ics.mly", line 55, characters 13-17:
Warning: the token FREE is unused.
File "ics.mly", line 54, characters 22-27:
Warning: the token FRESH is unused.
File "ics.mly", line 37, characters 7-9:
Warning: the token IN is unused.
File "ics.mly", line 46, characters 11-17:
Warning: the token NEGINF is unused.
File "ics.mly", line 37, characters 10-15:
Warning: the token NOTIN is unused.
File "ics.mly", line 34, characters 82-91:
Warning: the token PARTITION is unused.
File "ics.mly", line 70, characters 7-11:
Warning: the token PROJ is unused.
File "ics.mly", line 49, characters 37-45:
Warning: the token PROPLPAR is unused.
File "ics.mly", line 49, characters 46-54:
Warning: the token PROPRPAR is unused.
File "ics.mly", line 68, characters 7-14:
Warning: the token PROPVAR is unused.
File "ics.mly", line 38, characters 11-16:
Warning: the token QUOTE is unused.
File "ics.mly", line 34, characters 34-37:
Warning: the token SET is unused.
File "ics.mly", line 35, characters 12-16:
Warning: the token SIGN is unused.
File "ics.mly", line 34, characters 73-81:
Warning: the token SOLUTION is unused.
File "ics.mly", line 35, characters 21-27:
Warning: the token SYNTAX is unused.
File "ics.mly", line 50, characters 35-37:
Warning: the token TO is unused.
File "ics.mly", line 34, characters 27-33:
Warning: the token TOGGLE is unused.
File "ics.mly", line 45, characters 23-26:
Warning: the token TOP is unused.
File "ics.mly", line 33, characters 7-11:
Warning: the token TYPE is unused.
File "ics.mly", line 49, characters 55-65:
Warning: the token UNDERSCORE is unused.
File "ics.mly", line 63, characters 7-15:
Warning: the token UNSIGNED is unused.
File "ics.mly", line 64, characters 7-11:
Warning: the token WITH is unused.
%{

(** Command parser. *)

  open Mpa
  open Tools

let name_of_slack = Name.of_string "k"
let name_of_zero_slack = Name.of_string "k0"
let name_of_rename = Name.of_string "v"


%}
%start atomeof
%start commands
%start commandseof
%start commandsequence
%start propeof
%start termeof
%token WITH
%token VALID
%token USE
%token UNTRACE
%token UNSIGNED
%token UNSAT
%token UNDO
%token UNDERSCORE
%token TYPE
%token TT
%token TRUE
%token TRACE
%token TOP
%token TOGGLE
%token THEN
%token TAIL
%token SYNTAX
%token SYMTAB
%token SUP
%token SUB
%token <string> STRING
%token SPLIT
%token SOLVE
%token SOLUTION
%token SIMPLIFY
%token SIGN
%token SIGMA
%token SIG
%token SHOW
%token SET
%token SAVE
%token SAT
%token S
%token RPAR
%token RESTORE
%token RESET
%token REMOVE
%token REAL
%token RCUR
%token RBRA
%token <Mpa.Q.t> RATCONST
%token QUOTE
%token PROPVAR
%token PROPRPAR
%token PROPLPAR
%token PROP
%token PROJ
%token PARTITION
%token OUTR
%token OUTL
%token OUT
%token NIL
%token NEGINF
%token NEG
%token MODEL
%token LPAR
%token LAMBDA
%token KLAMMERAFFE
%token K
%token INV
%token <int> INTCONST
%token INT
%token INR
%token INL
%token INJ
%token INF
%token IF
%token <string> IDENT
%token I
%token HELP
%token HEAD
%token GET
%token FULL
%token <string * int> FRESH
%token <int> FREE
%token FORGET
%token FIND
%token FF
%token FALSE
%token EXIT
%token EOF
%token ENDMARKER
%token END
%token EMPTY
%token ELSE
%token ECHO
%token DROP
%token DOT
%token DOM
%token DEF
%token DDOT
%token CTXT
%token CREATE
%token CONS
%token CONC
%token COMMANDS
%token COMMA
%token CMP
%token CLBRA
%token CHECK
%token CDR
%token CAR
%token CAN
%token C
%token BWNOT
%token BWITE
%token <string> BVCONST
%token BV
%token BOT
%token BACKSLASH
%token ASSIGN
%token ASSERT
%token ALBRA
%token ACLBRA
%token XOR
%token IMPL
%token DISJ
%token CONJ
%token BIIMPL
%token SUBSET
%token LESSOREQUAL
%token LESS
%token GREATEROREQUAL
%token GREATER
%token EQUAL
%token DISEQ
%token APPLY
%token UNION
%token INTER
%token DIFF
%token COMPL
%token PLUS
%token MINUS
%token DIVIDE
%token TIMES
%token EXPT
%token LISTCONS
%token BVCONC
%token BWXOR
%token BWOR
%token BWIMP
%token BWIFF
%token BWAND
%token TO
%token NOTIN
%token IN
%token LCUR
%token LBRA
%token COLON
%right XOR IMPL DISJ 
%left CONJ BIIMPL 
%nonassoc SUBSET LESSOREQUAL LESS GREATEROREQUAL GREATER EQUAL DISEQ 
%left APPLY 
%right UNION 
%right INTER DIFF 
%nonassoc COMPL 
%left PLUS MINUS 
%left DIVIDE 
%left TIMES 
%right EXPT 
%right LISTCONS 
%right BVCONC 
%right BWXOR BWOR BWIMP 
%left BWIFF BWAND 
%nonassoc TO 
%nonassoc NOTIN IN 
%nonassoc LCUR 
%nonassoc LBRA 
%nonassoc COLON 
%nonassoc prec_unary 
%type <Atom.t> atomeof
%type <unit> commands
%type <unit> commandseof
%type <unit> commandsequence
%type <Prop.t> propeof
%type <Term.t> termeof
%%

termeof:
| term EOF
    { $1 }

atomeof:
| atom EOF
    { $1 }

propeof:
| prop EOF
    { $1 }

commandseof:
| command EOF
    { () }

commands:
| command DOT
    { () }
| EOF
    { raise End_of_file }

commandsequence:
| command DOT commandsequence
    { () }
| command DOT
    { () }
| EOF
    { raise End_of_file }

prop:
| LBRA prop RBRA
    { $2 }
| name
    { try Istate.prop_of $1 with Not_found -> Prop.mk_var $1 }
| atom
    { Prop.mk_poslit $1 }
| prop CONJ prop
    { Prop.mk_conj [$1; $3] }
| prop DISJ prop
    { Prop.mk_disj [$1; $3] }
| prop BIIMPL prop
    { Prop.mk_iff $1 $3 }
| prop XOR prop
    { Prop.mk_neg (Prop.mk_iff $1 $3) }
| prop IMPL prop
    { Prop.mk_disj [Prop.mk_neg $1; $3] }
| NEG prop %prec prec_unary
    { Prop.mk_neg $2 }
| IF prop THEN prop ELSE prop END
    { Prop.mk_ite $2 $4 $6 }

int:
| INTCONST
    { $1 }

rat:
| int
    { Q.of_int $1 }
| RATCONST
    { $1 }

name:
| IDENT
    { Name.of_string $1 }

namelist:
| name
    { [$1] }
| namelist COMMA name
    { $3 :: $1 }

term:
| var
    { $1 }
| app
    { $1 }
| LPAR term RPAR
    { $2 }
| arith
    { $1 }
| array
    { $1 }
| bv
    { $1 }
| product
    { $1 }
| boolean
    { $1 }
| coproduct
    { $1 }
| ics_list
    { $1 }
| apply
    { $1 }
| propset
    { $1 }

var:
| name
    { try
	    match Istate.entry_of $1 with
	      | Symtab.Def(Symtab.Term(a)) -> a
	      | Symtab.Type(c)  -> Term.Var.mk_var $1 c
	      | _ -> Term.Var.mk_var $1 Var.Cnstrnt.Unconstrained
	  with
	      Not_found -> Term.Var.mk_var $1 Var.Cnstrnt.Unconstrained }
| name LCUR cnstrnt RCUR
    { Term.Var.mk_var $1 $3 }

app:
| funsym LPAR termlist RPAR
    { Term.App.mk_app $1 (List.rev $3) }

funsym:
| name
    { Sym.Uninterp.make $1 }

ics_list:
| term LISTCONS term
    { Coproduct.mk_inj 1 (Product.mk_cons $1 $3) }
| HEAD LPAR term RPAR
    { Product.mk_car (Coproduct.mk_out 1 $3) }
| TAIL LPAR term RPAR
    { Product.mk_cdr (Coproduct.mk_out 1 $3) }
| NIL
    { Coproduct.mk_inj 0 (Bitvector.mk_eps()) }

apply:
| term APPLY term
    { Apply.mk_apply $1 $3 }
| S
    { Apply.mk_s () }
| K
    { Apply.mk_k () }
| I
    { Apply.mk_i () }
| C
    { Apply.mk_c () }
| LAMBDA namelist COLON term
    { let nl = $2 in   (* in reverse order! *)
				  let body = $4 in
				  let rec abstract_star acc = function
				    | [] -> assert false
				    | [n] -> Apply.abstract n acc
				    | n :: nl -> abstract_star (Apply.abstract n acc) nl
				  in 
				  abstract_star body nl }

boolean:
| TRUE
    { Boolean.mk_true() }
| FALSE
    { Boolean.mk_false() }

arith:
| rat
    { Arith.mk_num $1 }
| term PLUS term
    { Arith.mk_add $1 $3 }
| term MINUS term
    { Arith.mk_sub $1 $3 }
| MINUS term %prec prec_unary
    { Arith.mk_neg $2 }
| term TIMES term
    { Pprod.mk_mult $1 $3 }
| term EXPT int
    { Pprod.mk_expt $1 $3 }

product:
| CONS LPAR term COMMA term RPAR
    { Product.mk_cons $3 $5 }
| CAR LPAR term RPAR
    { Product.mk_car $3 }
| CDR LPAR term RPAR
    { Product.mk_cdr $3 }

coproduct:
| INL LPAR term RPAR
    { Coproduct.mk_inl $3 }
| INR LPAR term RPAR
    { Coproduct.mk_inr $3 }
| OUTL LPAR term RPAR
    { Coproduct.mk_outl $3 }
| OUTR LPAR term RPAR
    { Coproduct.mk_outr $3 }
| INJ LBRA INTCONST RBRA LPAR term RPAR
    { Coproduct.mk_inj $3 $6 }
| OUT LBRA INTCONST RBRA LPAR term RPAR
    { Coproduct.mk_out $3 $6 }

array:
| CREATE LPAR term RPAR
    { Funarr.mk_create $3 }
| term LBRA term ASSIGN term RBRA
    { Funarr.mk_update Term.is_equal $1 $3 $5 }
| term LBRA term RBRA
    { Funarr.mk_select Term.is_equal $1 $3 }

propset:
| EMPTY
    { Propset.mk_empty() }
| FULL
    { Propset.mk_full() }
| term UNION term
    { Propset.mk_union $1 $3 }
| term INTER term
    { Propset.mk_inter $1 $3 }
| COMPL term %prec prec_unary
    { Propset.mk_compl $2 }

bv:
| BVCONST
    { Bitvector.mk_const (Bitv.from_string $1)  }
| CONC LBRA INTCONST COMMA INTCONST RBRA LPAR term COMMA term RPAR
    { Bitvector.mk_conc $3 $5 $8 $10 }
| SUB LBRA INTCONST COMMA INTCONST COMMA INTCONST RBRA LPAR term RPAR
    { Bitvector.mk_sub $3 $5 $7 $10 }
| term BVCONC term
    { match Istate.width_of $1, Istate.width_of $3 with
	 | Some(n), Some(m) -> 
	     if n < 0 then
	       raise (Invalid_argument ("Negative length of " ^ Term.to_string $1))
	     else if m < 0 then
	       raise (Invalid_argument ("Negative length of " ^ Term.to_string $3))
	     else 
	       Bitvector.mk_conc n m $1 $3
	 | Some _, _ -> 
	     raise (Invalid_argument (Term.to_string $3 ^ " not a bitvector."))
	 | _ -> 
	     raise (Invalid_argument (Term.to_string $1 ^ " not a bitvector.")) }
| term LBRA INTCONST COLON INTCONST RBRA
    { match Istate.width_of $1 with
	 | Some(n) -> 
	     if n < 0 then
	       raise(Invalid_argument ("Negative length of " ^ Term.to_string $1))
	     else if not(0 <= $3 && $3 <= $5 && $5 < n) then
	       raise(Invalid_argument ("Invalid extraction from " ^ Term.to_string $1))
	     else 
	       Bitvector.mk_sub n $3 $5 $1
	 | None ->  
	     raise (Invalid_argument (Term.to_string $1 ^ " not a bitvector.")) }

atom:
| FF
    { Atom.mk_false }
| TT
    { Atom.mk_true }
| term EQUAL term
    { Atom.mk_equal ($1, $3) }
| term DISEQ term
    { Atom.mk_diseq ($1, $3) }
| term LESS term
    { Atom.mk_pos (Arith.mk_sub $3 $1) }
| term GREATER term
    { Atom.mk_pos (Arith.mk_sub $1 $3) }
| term LESSOREQUAL term
    { Atom.mk_nonneg (Arith.mk_sub $3 $1) }
| term GREATEROREQUAL term
    { Atom.mk_nonneg (Arith.mk_sub $1 $3) }
| term SUBSET term
    { Atom.mk_equal (Propset.mk_inter $1 $3, $1) }

dom:
| INT
    { Dom.Int }
| REAL
    { Dom.Real }

cnstrnt:
| dom
    { Var.Cnstrnt.Real($1) }
| signature
    { Var.Cnstrnt.Bitvector($1) }

termlist:
| 
    { [] }
| term
    { [$1] }
| termlist COMMA term
    { $3 :: $1 }

atomlist:
| 
    { [] }
| atom
    { [$1] }
| atomlist COMMA atom
    { $3 :: $1 }

signature:
| BV LBRA INTCONST RBRA
    { $3 }

command:
| CAN term
    { Istate.do_can $2 }
| SIMPLIFY atom
    { Istate.do_simplify $2 }
| ASSERT optname atom
    { Istate.do_process1 ($2, $3) }
| ASSERT optname atom COMMA atomlist
    { Istate.do_process ($2, $3 :: $5) }
| DEF name ASSIGN term
    { Istate.do_def ($2, (Symtab.Term($4))) }
| PROP name ASSIGN prop
    { Istate.do_prop ($2, $4) }
| SIG name COLON cnstrnt
    { Istate.do_typ ([$2], $4) }
| SIG namelist COLON cnstrnt
    { Istate.do_typ ($2, $4) }
| RESET
    { Istate.do_reset () }
| SAVE name
    { Istate.do_save(Some($2)) }
| SAVE
    { Istate.do_save(None) }
| RESTORE name
    { Istate.do_restore $2 }
| REMOVE name
    { Istate.do_remove $2 }
| FORGET
    { Istate.do_forget() }
| VALID optname atomlist
    { Istate.do_valid ($2, $3) }
| UNSAT optname atomlist
    { Istate.do_unsat ($2, $3) }
| EXIT
    { raise End_of_file }
| DROP
    { failwith "drop" }
| SYMTAB
    { Istate.do_symtab None }
| SYMTAB name
    { Istate.do_symtab (Some($2)) }
| CTXT optname
    { Istate.do_ctxt $2 }
| SIGMA term
    { Istate.do_sigma $2 }
| term CMP term
    { Istate.do_cmp ($1, $3) }
| SHOW optname
    { Istate.do_show $2 None }
| SHOW optname eqth
    { Istate.do_show $2 (Some($3)) }
| FIND optname eqth term
    { Istate.do_find ($2, $3, $4) }
| INV optname th term
    { Istate.do_inv ($2, $3, $4) }
| USE optname th term
    { Istate.do_dep ($2, $3, $4) }
| DOM optname term
    { Istate.do_dom ($2, $3) }
| DISEQ optname term
    { Istate.do_diseq ($2, $3) }
| SPLIT optname
    { Istate.do_split $2 }
| SOLVE th term EQUAL term
    { Istate.do_solve ($2, ($3, $5)) }
| TRACE identlist
    { Istate.do_trace $2 }
| UNTRACE
    { Istate.do_untrace None }
| UNTRACE identlist
    { Istate.do_untrace (Some($2)) }
| SAT optname prop
    { Istate.do_sat ($2, $3) }
| CHECK optname
    { Istate.do_check_sat $2 }
| MODEL optname optvarspecs
    { Istate.do_model ($2, List.rev $3) }
| ECHO STRING
    { Format.eprintf "%s@." $2 }
| GET varname
    { Istate.do_get $2 }
| varname ASSIGN value
    { Istate.do_set ($1, $3)}
| GET
    { Istate.do_show_vars () }
| SUP optname term
    { Istate.do_sup ($2, $3) }
| INF optname term
    { Istate.do_inf ($2, $3) }
| UNDO
    { Istate.do_undo () }
| help
    { $1 }

optvarspecs:
| 
    { [] }

varname:
| IDENT
    { Istate.Parameters.of_string $1 }

value:
| IDENT
    { $1 }
| TRUE
    { "true" }
| FALSE
    { "false" }

identlist:
| IDENT
    { [$1] }
| identlist COMMA IDENT
    { $3 :: $1 }

th:
| IDENT
    { Th.of_string $1 }

eqth:
| IDENT
    { try Some(Th.of_string $1)
    with exc -> if $1 = "v" then None else raise exc }

help:
| HELP
    { Istate.do_help Istate.All }
| HELP CAN
    { Istate.do_help (Istate.Command("can")) }
| HELP HELP
    { Istate.do_help (Istate.Command("help")) }
| HELP SIMPLIFY
    { Istate.do_help (Istate.Command("simplify")) }
| HELP ASSERT
    { Istate.do_help (Istate.Command("assert")) }
| HELP DEF
    { Istate.do_help (Istate.Command("def")) }
| HELP PROP
    { Istate.do_help (Istate.Command("prop")) }
| HELP SIG
    { Istate.do_help (Istate.Command("sig")) }
| HELP RESET
    { Istate.do_help (Istate.Command("reset")) }
| HELP SAVE
    { Istate.do_help (Istate.Command("save")) }
| HELP RESTORE
    { Istate.do_help (Istate.Command("restore")) }
| HELP REMOVE
    { Istate.do_help (Istate.Command("remove")) }
| HELP FORGET
    { Istate.do_help (Istate.Command("forget")) }
| HELP VALID
    { Istate.do_help (Istate.Command("valid")) }
| HELP UNSAT
    { Istate.do_help (Istate.Command("unsat")) }
| HELP EXIT
    { Istate.do_help (Istate.Command("exit")) }
| HELP DROP
    { Istate.do_help (Istate.Command("drop")) }
| HELP SYMTAB
    { Istate.do_help (Istate.Command("symtab")) }
| HELP CTXT
    { Istate.do_help (Istate.Command("ctxt")) }
| HELP SIGMA
    { Istate.do_help (Istate.Command("sigma")) }
| HELP CMP
    { Istate.do_help (Istate.Command("cmp")) }
| HELP SHOW
    { Istate.do_help (Istate.Command("show")) }
| HELP FIND
    { Istate.do_help (Istate.Command("find")) }
| HELP INV
    { Istate.do_help (Istate.Command("inv")) }
| HELP USE
    { Istate.do_help (Istate.Command("use")) }
| HELP DOM
    { Istate.do_help (Istate.Command("dom")) }
| HELP DISEQ
    { Istate.do_help (Istate.Command("diseq")) }
| HELP SPLIT
    { Istate.do_help (Istate.Command("split")) }
| HELP SOLVE
    { Istate.do_help (Istate.Command("solve")) }
| HELP TRACE
    { Istate.do_help (Istate.Command("trace")) }
| HELP UNTRACE
    { Istate.do_help (Istate.Command("untrace")) }
| HELP SAT
    { Istate.do_help (Istate.Command("sat")) }
| HELP MODEL
    { Istate.do_help (Istate.Command("model")) }
| HELP CHECK
    { Istate.do_help (Istate.Command("check")) }
| HELP ECHO
    { Istate.do_help (Istate.Command("echo")) }
| HELP GET
    { Istate.do_help (Istate.Command("get")) }
| HELP SUP
    { Istate.do_help (Istate.Command("sup")) }
| HELP INF
    { Istate.do_help (Istate.Command("inf")) }
| HELP ASSIGN
    { Istate.do_help (Istate.Command("set")) }
| HELP LESS IDENT GREATER
    { Istate.do_help (Istate.Nonterminal($3)) }
| HELP UNDO
    { Istate.do_help (Istate.Command("undo")) }

optname:
| 
    { None }
| KLAMMERAFFE name
    { Some($2) }

%%





