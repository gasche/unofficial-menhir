%{

open Strings
open Fsub.Raw

%}
%start toplevel
%token USCORE
%token <string> UCID
%token TTOP
%token SEMI
%token RSQUARE
%token RPAREN
%token RCURLY
%token LSQUARE
%token LPAREN
%token LET
%token LEQ
%token LCURLY
%token <string> LCID
%token LAMBDA
%token IN
%token EQ
%token EOF
%token DOT
%token COMMA
%token COLON
%token ARROW
%token ALL

%type <Fsub.Raw.toplevel> toplevel
%%

toplevel:
| EOF
    { TopEOF }
| Term SEMI toplevel
    { TopEval ($1, $3) }
| UCID TyBinder SEMI toplevel
    { TopTypeBind ($1, $2, $4) }
| LCID Binder SEMI toplevel
    { TopTermBind ($1, $2, $4) }

Binder:
| COLON Type
    { $2 }

Type:
| ArrowType
    { $1 }
| ALL UCID OType DOT Type
    { TForall ($2, $3, $5) }

AType:
| LPAREN Type RPAREN
    { $2 }
| UCID
    { TVar $1 }
| TTOP
    { TTop }
| LCURLY FieldTypes RCURLY
    { TRecord $2 }

TyBinder:
| 
    { TTop }
| LEQ Type
    { $2 }

ArrowType:
| AType ARROW ArrowType
    { TArrow ($1, $3) }
| AType
    { $1 }

Term:
| AppTerm
    { $1 }
| LAMBDA LCID COLON Type DOT Term
    { EAbs ($2, $4, $6) }
| LET Pattern EQ Term IN Term
    { ELet ($2, $4, $6) }
| LAMBDA UCID OType DOT Term
    { ETyAbs ($2, $3, $5) }

AppTerm:
| PathTerm
    { $1 }
| AppTerm PathTerm
    { EApp ($1, $2) }
| AppTerm LSQUARE Type RSQUARE
    { ETyApp ($1, $3) }

PathTerm:
| PathTerm DOT LCID
    { EProj ($1, $3) }
| ATerm
    { $1 }

FieldTypes:
| 
    { StringMap.empty }
| NEFieldTypes
    { $1 }

NEFieldTypes:
| LCID COLON Type
    { StringMap.singleton $1 $3 }
| LCID COLON Type COMMA NEFieldTypes
    { StringMap.add $1 $3 $5 }

TermSeq:
| Term
    { $1 }
| Term SEMI TermSeq
    { ELet (PWildcard, $1, $3) }

ATerm:
| LPAREN TermSeq RPAREN
    { $2 }
| LCID
    { EVar $1 }
| LCURLY Fields RCURLY
    { ERecord $2 }

Fields:
| 
    { StringMap.empty }
| NEFields
    { $1 }

NEFields:
| LCID EQ Term
    { StringMap.singleton $1 $3 }
| LCID EQ Term COMMA NEFields
    { StringMap.add $1 $3 $5 }

OType:
| 
    { TTop}
| LEQ Type
    { $2 }

Pattern:
| USCORE
    { PWildcard }
| LCID COLON Type
    { PVar ($1, $3) }
| LCURLY PatFields RCURLY
    { PRecord $2 }

PatFields:
| 
    { StringMap.empty }
| NEPatFields
    { $1 }

NEPatFields:
| LCID EQ Pattern
    { StringMap.singleton $1 $3 }
| LCID EQ Pattern COMMA NEPatFields
    { StringMap.add $1 $3 $5 }

%%



