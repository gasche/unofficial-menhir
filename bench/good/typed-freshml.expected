Warning: you are using the standard library and/or the %inline keyword. We
recommend switching on --infer in order to avoid obscure type error messages.
%{

open Source.Raw

let boolpat b =
  Annotation.make Location.dummy (PBool b)

%}
%start program
%start specification_alone
%token WILD
%token WHERE
%token TYPE
%token TRUE
%token THEN
%token <Identifier.t> TAG
%token SUPPORT
%token SUBSET
%token STAR
%token RPAR
%token RANGLE
%token PRODUCES
%token OUTER
%token OF
%token NOTHING
%token NEXT
%token MEMBER
%token LPAR
%token LET
%token LANGLE
%token INNER
%token IN
%token IF
%token <Identifier.t> ID
%token FUN
%token FRESH
%token FALSE
%token FAIL
%token EOF
%token END
%token EMPTYSET
%token ELSE
%token DISJOINT
%token DEFEQ
%token COMMA
%token COLON
%token CASE
%token BOUND
%token BOOL
%token BINDS
%token BAR
%token ATOMSET
%token ATOM
%token ARROW
%token ACCEPTS
%token ABSURD
%token BOR
%token BAND
%token BNOT
%token CMPEQ
%token SETUNION
%token SETMINUS
%left BOR 
%left BAND 
%nonassoc BNOT 
%nonassoc CMPEQ 
%left SETUNION 
%nonassoc SETMINUS 
%type <Source.Raw.program> program
%type <Source.Raw.specification> specification_alone
%%

located_raw_pattern_:
| x = raw_pattern
    { Annotation.make ($startpos, $endpos) x }

located_raw_expression_:
| x = raw_expression
    { Annotation.make ($startpos, $endpos) x }

located_raw_atomic_expression_:
| x = raw_atomic_expression
    { Annotation.make ($startpos, $endpos) x }

located_optional_layout_:
| x = optional_layout
    { Annotation.make ($startpos, $endpos) x }

located_layout_:
| x = layout
    { Annotation.make ($startpos, $endpos) x }

located_atomic_layout_:
| x = atomic_layout
    { Annotation.make ($startpos, $endpos) x }

list_preceded_WHERE_contrainte__:
| 
    { [] }
| WHERE x0 = contrainte xs = list_preceded_WHERE_contrainte__
    {let x =
  let x = x0 in
  ( x )
in
 x :: xs }

list_definition_:
| 
    { [] }
| x = definition xs = list_definition_
    { x :: xs }

list_data_constructor_declaration_:
| 
    { [] }
| x = data_constructor_declaration xs = list_data_constructor_declaration_
    { x :: xs }

lenient_parenthesized_tuple_pattern_:
| 
    { [] }
| LPAR xs = separated_nonempty_list_COMMA_pattern_ RPAR
    { xs }

lenient_parenthesized_tuple_atomic_expression_:
| 
    { [] }
| LPAR xs = separated_nonempty_list_COMMA_atomic_expression_ RPAR
    { xs }

set_function:
| SUPPORT
    { SFSupport }
| OUTER
    { SFOuter }
| INNER
    { SFInner}
| BOUND
    { SFBound }

set_expression:
| EMPTYSET
    { SEEmpty }
| e1 = set_expression SETUNION e2 = set_expression
    { SEUnion (e1, e2) }
| e1 = set_expression SETMINUS e2 = set_expression
    { SEDifference (e1, e2) }
| f = set_function LPAR x = ID RPAR
    { SEApp (f, x) }
| LPAR e = set_expression RPAR
    { e }

set_operator:
| SUBSET
    { OpSubset }
| CMPEQ
    { OpEqual }
| DISJOINT
    { OpDisjoint }

set_constraint:
| e1 = set_expression op = set_operator e2 = set_expression
    { (e1, op, e2) }

boolean_expression:
| FALSE
    { FFalse }
| TRUE
    { FTrue }
| b1 = boolean_expression BAND b2 = boolean_expression
    { FAnd (b1, b2) }
| b1 = boolean_expression CMPEQ b2 = boolean_expression
    { FIff (b1, b2) }
| b1 = boolean_expression BOR b2 = boolean_expression
    { FChoice (b1, b2) }
| BNOT b = boolean_expression
    { FNot b }
| x = ID
    { FVar x }
| LPAR b = boolean_expression RPAR
    { b }

contrainte:
| b = boolean_expression
    { CBoolean b }
| c = set_constraint
    { CSet (FTrue, c) }
| b = boolean_expression ARROW c = set_constraint
    { CSet (b, c) }

contraintes:
| cs = list_preceded_WHERE_contrainte__
    { cs }

pattern:
| p = located_raw_pattern_
    { p }

prefix_callee:
| f = ID
    { CUser f }
| SUPPORT
    { CPrim PrimGenericSupport }
| OUTER
    { CPrim PrimGenericOuter }
| INNER
    { CPrim PrimGenericInner }
| BOUND
    { CPrim PrimGenericBound }
| MEMBER
    { CPrim PrimMember }

variables:
| NOTHING
    { [] }
| xs = separated_nonempty_list_COMMA_ID_
    { xs }

typ:
| t = ID
    { TData t }
| ATOM
    { TAtom }
| ATOMSET
    { TAtomSet }
| BOOL
    { TBool }

optional_layout:
| 
    { LTuple [] }
| OF layout = layout
    { layout }

specification:
| ACCEPTS xs = variables pre = contraintes PRODUCES ys = variables post = contraintes
    { xs, pre, (ys, post) }

program:
| defs = list_definition_ EOF
    { defs }

specification_alone:
| spec = specification EOF
    { spec }

nonempty_list_branch_:
| x = branch
    { [ x ] }
| x = branch xs = nonempty_list_branch_
    { x :: xs }

separated_nonempty_list_STAR_located_atomic_layout__:
| x = located_atomic_layout_
    { [ x ] }
| x = located_atomic_layout_ STAR xs = separated_nonempty_list_STAR_located_atomic_layout__
    { x :: xs }

separated_nonempty_list_COMMA_pattern_:
| x = pattern
    { [ x ] }
| x = pattern COMMA xs = separated_nonempty_list_COMMA_pattern_
    { x :: xs }

separated_nonempty_list_COMMA_atomic_expression_:
| x = atomic_expression
    { [ x ] }
| x = atomic_expression COMMA xs = separated_nonempty_list_COMMA_atomic_expression_
    { x :: xs }

separated_nonempty_list_COMMA_ID_:
| x = ID
    { [ x ] }
| x = ID COMMA xs = separated_nonempty_list_COMMA_ID_
    { x :: xs }

raw_pattern:
| WILD
    { PWildcard }
| x = ID
    { PVar x }
| tag = TAG ps = lenient_parenthesized_tuple_pattern_
    { PTagTuple (tag, ps) }
| TRUE
    { PBool true }
| FALSE
    { PBool false }

raw_atomic_expression:
| x = ID
    { EVar x }
| TRUE
    { EBool true }
| FALSE
    { EBool false }
| tag = TAG es = lenient_parenthesized_tuple_atomic_expression_
    { ETagTuple (tag, es) }
| CASE e = expression OF branches = nonempty_list_branch_ END
    { ECase (e, branches) }
| callee = prefix_callee LPAR e = expression RPAR
    { ECall (callee, e) }
| LPAR e = raw_expression RPAR
    { e }
| BNOT e = atomic_expression
    { ECall (CPrim PrimBoolNot, e) }
| e1 = atomic_expression CMPEQ e2 = atomic_expression
    {let p =
  ( PrimAtomEquality )
in
 ECall (CPrim p, Annotation.make ($startpos, $endpos) (EMulti [ e1; e2 ])) }
| e1 = atomic_expression BAND e2 = atomic_expression
    {let p =
  ( PrimBoolAnd )
in
 ECall (CPrim p, Annotation.make ($startpos, $endpos) (EMulti [ e1; e2 ])) }
| e1 = atomic_expression BOR e2 = atomic_expression
    {let p =
  ( PrimBoolOr )
in
 ECall (CPrim p, Annotation.make ($startpos, $endpos) (EMulti [ e1; e2 ])) }
| NEXT CASE
    { ENextCase }

atomic_expression:
| e = located_raw_atomic_expression_
    { e }

raw_expression:
| ABSURD
    { EAbsurd }
| FAIL
    { EFail }
| FRESH xs = variables IN e = expression
    { EFresh (xs, e) }
| IF e = expression THEN e1 = expression ELSE e2 = expression
    { ECase (e, [ [ boolpat true ], e1 ; [ boolpat false ], e2 ]) }
| LET xs = variables claim = contraintes DEFEQ e1 = expression IN e2 = expression
    { ELetMulti (e1, (xs, claim, e2)) }
| LET tag = TAG ps = lenient_parenthesized_tuple_pattern_ DEFEQ e1 = expression IN e2 = expression
    { let p = Annotation.make ($startpos(tag), $endpos(ps)) (PTagTuple (tag, ps)) in
      ECase (e1, [ [ p ], e2 ]) }
| NOTHING
    { EMulti [] }
| e = atomic_expression COMMA es = separated_nonempty_list_COMMA_atomic_expression_
    { EMulti (e :: es) }
| e = raw_atomic_expression
    { e }

expression:
| e = located_raw_expression_
    { e }

branch:
| BAR ps = separated_nonempty_list_COMMA_pattern_ ARROW e = expression
    { ps, e }

atomic_layout:
| t = typ
    {let x =
  ( None )
in
 LComponent (x, t) }
| x00 = ID COLON t = typ
    {let x =
  let x0 = x00 in
  let x =
    let x = x0 in
    ( x )
  in
  ( Some x )
in
 LComponent (x, t) }
| INNER layout = located_atomic_layout_
    { LInner layout }
| OUTER layout = located_atomic_layout_
    { LOuter layout }
| LANGLE layout = located_layout_ RANGLE
    { LAbstraction layout }

layout:
| layout = atomic_layout
    { layout }
| head = located_atomic_layout_ STAR tail = separated_nonempty_list_STAR_located_atomic_layout__
    { LTuple (head :: tail) }

data_constructor_declaration:
| BAR tag = TAG layout = located_optional_layout_ guard = contraintes
    { tag, (layout, guard) }

definition:
| FUN f = ID spec = specification DEFEQ e = expression
    { let xs, pre, opc = spec in
      DefValFun (f, (xs, pre, opc, e)) }
| TYPE t = ID kind = kind DEFEQ ds = list_data_constructor_declaration_
    { DefDataType (t, (kind, ds)) }

kind:
| 
    { KExpression }
| BINDS
    { KPattern }

%%



