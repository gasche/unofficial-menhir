File "cime-poly-interp.mly", line 29, characters 7-15:
Warning: the token LEFT_BRA is unused.
File "cime-poly-interp.mly", line 29, characters 16-25:
Warning: the token RIGHT_BRA is unused.
%{

  open Signatures;;
  open Poly_interp;;

  exception Syntax_error of string

  let var s =
    try
      let n = Listutils.index s !current_poly_vars
      in IntPolynomials.var n
    with 
	Not_found -> raise (Syntax_error ("undefined variable "^s))
;;

%}
%start poly_interp_entry
%start weight_entry
%token <string> VAR
%token SEMICOLON
%token RIGHT_PAR
%token RIGHT_BRA
%token LEFT_PAR
%token LEFT_BRA
%token <User_signatures.symbol_id> INTERP
%token <Numbers.t> INT
%token EQUAL
%token EOF
%token COMMA
%token PLUS
%token MINUS
%token MULT
%token EXP
%left PLUS MINUS 
%left MULT 
%nonassoc UMINUS 
%right EXP 
%type <(User_signatures.symbol_id, Poly_interp.IntPolynomials.poly) Signatures.SymbolMap.t > poly_interp_entry
%type <(User_signatures.symbol_id, int) Signatures.SymbolMap.t > weight_entry
%%

poly_interp_entry:
| interp EOF
    { $1 }

interp:
| 
    { SymbolMap.empty }
| symbol_interp EQUAL poly SEMICOLON interp
    { SymbolMap.add $1 $3 $5 }

symbol_interp:
| INTERP
    { current_poly_vars := []; $1 }
| INTERP LEFT_PAR vars
    { current_poly_vars := $3; $1 }

vars:
| VAR RIGHT_PAR
    { [$1] }
| VAR COMMA vars
    { $1::$3 }

poly:
| VAR
    { var $1 }
| INT
    { IntPolynomials.cte $1 }
| LEFT_PAR poly RIGHT_PAR
    { $2 }
| poly PLUS poly
    { IntPolynomials.add $1 $3 }
| poly MINUS poly
    { IntPolynomials.sub $1 $3 }
| MINUS poly %prec UMINUS
    { IntPolynomials.minus $2 }
| poly MULT poly
    { IntPolynomials.mult $1 $3 }
| poly EXP INT
    { try
	IntPolynomials.power $1 (Numbers.to_int $3) 
      with 
	Failure("int_of_big_int") ->
	  failwith "Exponent too large"
    }

weight_entry:
| weight EOF
    { $1 }

weight:
| 
    { SymbolMap.empty }
| INTERP EQUAL INT SEMICOLON weight
    { SymbolMap.add $1 (Numbers.to_int $3) $5 }

%%



