%{
open Fp;;
%}
%start cmd
%start exp
%start fct
%token Rsqu
%token Rpar
%token Rang
%token Lwhile
%token <string> Lvar
%token <string> Lstr
%token Lsqu
%token Lscl
%token <int> Ls
%token <int> Lr
%token Lpar
%token <int> Lint
%token Lins
%token <string> Lident
%token Leol
%token Lcom
%token Lbu
%token Lapplytoall
%token Lang
%token Laff
%token LUndef
%token LT
%token LShow
%token LSave
%token LQuit
%token LLoad
%token LF
%token LDef
%token Leval
%token <string> Lprim
%token Lcond
%token Lo
%token Lcst
%right Leval 
%left Lprim 
%right Lcond 
%right Lo 
%left Lcst 
%type <Fp.cmd> cmd
%type <Fp.expr> exp
%type <Fp.fct> fct
%%

cmd:
| LDef Lident Laff fct Leol
    { Def($2,$4) }
| LUndef Lident Leol
    { Undef $2 }
| LShow Lident Leol
    { Show $2 }
| exp Leol
    { Exp $1 }
| LQuit Leol
    { Quit }
| LLoad Lstr Leol
    { Load $2 }
| LSave Lstr Leol
    { Save $2 }
| Leol
    { None }

exp:
| LT
    { T }
| LF
    { F }
| Lint
    { Int (Num.Int $1) }
| Lvar
    { Var $1 }
| Lpar exp Rpar
    { $2 }
| Lang Rang
    { Seq [] }
| Lang fp_list Rang
    { Seq $2 }
| fct Leval exp
    { App($1, $3) }

fatom:
| Lprim
    { Prim $1 }
| Ls
    { Sel $1 }
| Lr
    { RSel $1 }
| Lident
    { User $1 }
| Lapplytoall fatom
    { ApplyToAll $2 }
| Lins fatom
    { Insert $2 }
| Lcst exp
    { Constant $2 }
| Lsqu fctlist Rsqu
    { Construction $2 }
| Lbu fatom exp
    { Bu($2,$3) }
| Lwhile fatom fatom
    { While($2,$3) }
| Lpar fct Rpar
    { $2 }

fct:
| comp Lcond comp Lscl fct
    { Condition($1,$3,$5) }
| comp
    { $1 }

comp:
| fatom Lo comp
    { Composition($1,$3) }
| fatom
    { $1 }

fp_list:
| exp Lcom fp_list
    { $1 :: $3 }
| exp
    { [ $1 ] }

fctlist:
| fct Lcom fctlist
    { $1 :: $3 }
| fct
    { [ $1 ] }

%%

  




Note: the nonterminal symbol list (from fp.mly) is renamed fp_list.
