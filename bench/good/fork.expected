Warning: you are using the standard library and/or the %inline keyword. We
recommend switching on --infer in order to avoid obscure type error messages.
%{

  open Syntax

  let mkid sort (name, startp, endp) =
    Identifier.make name sort startp endp

  (* A sordid incantation for turning multiple binding forms into single binding
     forms while generating reasonable location information. *)

  let bind
      ((ids : (Error.location * 'id) list), (ko : 'annotation))
      (form : Lexing.position -> 'id -> 'annotation -> Error.location * 'a -> Error.location * 'a)
      (body : Error.location * 'a) : 'a =
    let _, body =
      List.fold_right (fun ((startp, _), id) body ->
	form startp id ko body
      ) ids body
    in
    body

  let mktyabs ((_, endp), _) startp id ko ty =
    (startp, endp), TyAbs (id, ko, ty)

  let mktyquantified q ((_, endp), _) startp id ko ty =
    (startp, endp), TyQuantified (q, id, ko, ty)

  let mksforall _ id ko (_, s) =
    Error.dummy, SForall (id, ko, s)

  let mkteabs ((_, endp), _) startp id ty t =
    (startp, endp), TeAbs (id, ty, t)

  let mktetyabs ((_, endp), _) startp id ko t =
    (startp, endp), TeTyAbs (id, ko, t)

%}
%start program
%token WILDCARD
%token UNPACK
%token TYPE
%token TERM
%token STAR
%token RPAR
%token RBRACKET
%token PACK
%token LPAR
%token LET
%token LEMMA
%token LBRACKET
%token LATER
%token LAMBDA
%token KIND
%token <string> INCLUDE
%token IN
%token <string * Lexing.position * Lexing.position> IDENTIFIER
%token FORALL
%token EXISTS
%token EQ
%token EOF
%token DOT
%token DEFAULT
%token COMMA
%token COLON
%token BIGLAMBDA
%token BACKQUOTE
%token ASSERT
%token AS
%token ARROW

%type <Syntax.declarations> program
%%

kind_variable:
| id = IDENTIFIER
    { mkid kind_sort id }

type_variable:
| id = IDENTIFIER
    { mkid type_sort id }

term_variable:
| id = IDENTIFIER
    { mkid term_sort id }

quantifier:
| FORALL
    { QForall }
| EXISTS
    { QExists }

statement:
| x0 = ty2 _menhir_p0 = EQ x1 = ty2
    {let ty2 =
  let _startpos = _endpos__menhir_p0_ in
  let x = x1 in
  ( (($startpos, $endpos), x) )
in
let ty1 =
  let _endpos = _startpos__menhir_p0_ in
  let x = x0 in
  ( (($startpos, $endpos), x) )
in
 SEquation (ty1, ty2) }
| FORALL b = type_binder DOT s = statement
    { bind b mksforall (Error.dummy, s) }

program:
| ds = list_declaration_ EOF
    { List.flatten ds }

list_declaration_:
| 
    { [] }
| x = declaration xs = list_declaration_
    { x :: xs }

nonempty_list_loc_type_variable__:
| x0 = type_variable
    {let x =
  let x = x0 in
  ( (($startpos, $endpos), x) )
in
 [ x ] }
| x0 = type_variable xs = nonempty_list_loc_type_variable__
    {let x =
  let _endpos = _startpos_xs_ in
  let x = x0 in
  ( (($startpos, $endpos), x) )
in
 x :: xs }

nonempty_list_loc_term_variable__:
| x0 = term_variable
    {let x =
  let x = x0 in
  ( (($startpos, $endpos), x) )
in
 [ x ] }
| x0 = term_variable xs = nonempty_list_loc_term_variable__
    {let x =
  let _endpos = _startpos_xs_ in
  let x = x0 in
  ( (($startpos, $endpos), x) )
in
 x :: xs }

kind0:
| STAR
    { KStar }
| id = kind_variable
    { KDefined id }
| LATER kind = kind0
    { KLater kind }
| LPAR kind0 = kind1 RPAR
    {let kind =
  let kind = kind0 in
  ( kind )
in
 kind }

kind1:
| kind = kind0
    { kind }
| kind1 = kind0 ARROW kind2 = kind1
    { KArrow (kind1, kind2) }

type_binder:
| ids = nonempty_list_loc_type_variable__
    { ids, None }
| ids = nonempty_list_loc_type_variable__ COLON kind0 = kind1
    {let kind =
  let kind = kind0 in
  ( kind )
in
 ids, Some kind }

ty0:
| id = type_variable
    { TyVar id }
| LPAR RPAR
    { TyUnit }
| LPAR ty0 = ty3 RPAR
    {let ty =
  let ty = ty0 in
  ( ty )
in
 ty }
| _menhir_p0 = LPAR ty00 = ty3 _menhir_p1 = COLON kind0 = kind1 RPAR
    {let kind =
  let kind = kind0 in
  ( kind )
in
let ty =
  let _endpos = _startpos__menhir_p1_ in
  let _startpos = _endpos__menhir_p0_ in
  let ty0 = ty00 in
  let x =
    let ty = ty0 in
    ( ty )
  in
  ( (($startpos, $endpos), x) )
in
 TyConstraint (ty, kind) }
| _menhir_p0 = LPAR ty00 = ty3 delimiter = COMMA ty01 = ty3 _menhir_p1 = RPAR
    {let ty2 =
  let _endpos = _startpos__menhir_p1_ in
  let _startpos = _endpos_delimiter_ in
  let ty0 = ty01 in
  let x =
    let ty = ty0 in
    ( ty )
  in
  ( (($startpos, $endpos), x) )
in
let ty1 =
  let _endpos = _startpos_delimiter_ in
  let _startpos = _endpos__menhir_p0_ in
  let ty0 = ty00 in
  let x =
    let ty = ty0 in
    ( ty )
  in
  ( (($startpos, $endpos), x) )
in
 let loc1 = ($startpos, $endpos(delimiter))
      and () = delimiter in (* avoid a warning *)
      TyPair (loc1, ty1, ty2) }

ty1:
| ty = ty0
    { ty }
| x0 = ty1 x1 = ty0
    {let ty2 =
  let _startpos = _endpos_x0_ in
  let x = x1 in
  ( (($startpos, $endpos), x) )
in
let _startpos_ty2_ = _endpos_x0_ in
let ty1 =
  let _endpos = _startpos_ty2_ in
  let x = x0 in
  ( (($startpos, $endpos), x) )
in
 TyApp (ty1, ty2) }

ty2:
| ty = ty1
    { ty }
| x0 = ty2 _menhir_p0 = BACKQUOTE x1 = ty1 delimiter = BACKQUOTE x2 = ty1
    {let ty2 =
  let _startpos = _endpos_delimiter_ in
  let x = x2 in
  ( (($startpos, $endpos), x) )
in
let ty =
  let _startpos = _endpos__menhir_p0_ in
  let _endpos = _startpos_delimiter_ in
  let x = x1 in
  ( (($startpos, $endpos), x) )
in
let ty1 =
  let _endpos = _startpos__menhir_p0_ in
  let x = x0 in
  ( (($startpos, $endpos), x) )
in
 let loc = ($startpos, $endpos(delimiter)) in
      let () = delimiter in (* avoid a warning *)
      TyApp ((loc, TyApp (ty, ty1)), ty2) }

ty3:
| ty = ty2
    { ty }
| x0 = ty2 delimiter = ARROW x1 = ty3
    {let ty2 =
  let _startpos = _endpos_delimiter_ in
  let x = x1 in
  ( (($startpos, $endpos), x) )
in
let ty1 =
  let _endpos = _startpos_delimiter_ in
  let x = x0 in
  ( (($startpos, $endpos), x) )
in
 let loc1 = ($startpos, $endpos(delimiter))
      and () = delimiter in (* avoid a warning *)
      TyArrow (loc1, ty1, ty2) }
| LAMBDA b = type_binder _menhir_p0 = DOT x0 = ty3
    {let ty =
  let _startpos = _endpos__menhir_p0_ in
  let x = x0 in
  ( (($startpos, $endpos), x) )
in
 bind b (mktyabs ty) ty }
| q = quantifier b = type_binder _menhir_p0 = DOT x0 = ty3
    {let ty =
  let _startpos = _endpos__menhir_p0_ in
  let x = x0 in
  ( (($startpos, $endpos), x) )
in
 bind b (mktyquantified q ty) ty }

term_variable_or_wildcard:
| id = term_variable
    { Some id }
| WILDCARD
    { None }

term_binder:
| ids = nonempty_list_loc_term_variable__ _menhir_p0 = COLON ty00 = ty3
    {let ty =
  let _startpos = _endpos__menhir_p0_ in
  let ty0 = ty00 in
  let x =
    let ty = ty0 in
    ( ty )
  in
  ( (($startpos, $endpos), x) )
in
 ids, ty }

term0:
| id = term_variable
    { TeVar id }
| LPAR RPAR
    { TeUnit }
| LPAR t0 = term3 RPAR
    {let t =
  let t = t0 in
  ( t )
in
 t }
| _menhir_p0 = LPAR t00 = term3 _menhir_p1 = COLON ty00 = ty3 _menhir_p2 = RPAR
    {let ty =
  let _endpos = _startpos__menhir_p2_ in
  let _startpos = _endpos__menhir_p1_ in
  let ty0 = ty00 in
  let x =
    let ty = ty0 in
    ( ty )
  in
  ( (($startpos, $endpos), x) )
in
let t =
  let _endpos = _startpos__menhir_p1_ in
  let _startpos = _endpos__menhir_p0_ in
  let t0 = t00 in
  let x =
    let t = t0 in
    ( t )
  in
  ( (($startpos, $endpos), x) )
in
 TeConstraint (t, ty) }
| _menhir_p0 = LPAR t00 = term3 _menhir_p1 = COMMA t01 = term3 _menhir_p2 = RPAR
    {let t2 =
  let _endpos = _startpos__menhir_p2_ in
  let _startpos = _endpos__menhir_p1_ in
  let t0 = t01 in
  let x =
    let t = t0 in
    ( t )
  in
  ( (($startpos, $endpos), x) )
in
let t1 =
  let _endpos = _startpos__menhir_p1_ in
  let _startpos = _endpos__menhir_p0_ in
  let t0 = t00 in
  let x =
    let t = t0 in
    ( t )
  in
  ( (($startpos, $endpos), x) )
in
 TePair (t1, t2) }

term1:
| t = term0
    { t }
| x0 = term1 x1 = term0
    {let t2 =
  let _startpos = _endpos_x0_ in
  let x = x1 in
  ( (($startpos, $endpos), x) )
in
let _startpos_t2_ = _endpos_x0_ in
let t1 =
  let _endpos = _startpos_t2_ in
  let x = x0 in
  ( (($startpos, $endpos), x) )
in
 TeApp (t1, t2) }
| x0 = term1 _menhir_p0 = LBRACKET ty00 = ty3 _menhir_p1 = RBRACKET
    {let ty =
  let _endpos = _startpos__menhir_p1_ in
  let _startpos = _endpos__menhir_p0_ in
  let ty0 = ty00 in
  let x =
    let ty = ty0 in
    ( ty )
  in
  ( (($startpos, $endpos), x) )
in
let t =
  let _endpos = _startpos__menhir_p0_ in
  let x = x0 in
  ( (($startpos, $endpos), x) )
in
 TeTyApp (t, ty) }

term2:
| t = term1
    { t }
| x0 = term2 _menhir_p0 = BACKQUOTE x1 = term1 delimiter = BACKQUOTE x2 = term1
    {let t2 =
  let _startpos = _endpos_delimiter_ in
  let x = x2 in
  ( (($startpos, $endpos), x) )
in
let t =
  let _startpos = _endpos__menhir_p0_ in
  let _endpos = _startpos_delimiter_ in
  let x = x1 in
  ( (($startpos, $endpos), x) )
in
let t1 =
  let _endpos = _startpos__menhir_p0_ in
  let x = x0 in
  ( (($startpos, $endpos), x) )
in
 let loc = ($startpos, $endpos(delimiter)) in
      let () = delimiter in (* avoid a warning *)
      TeApp ((loc, TeApp (t, t1)), t2) }

term3:
| t = term2
    { t }
| LAMBDA b = term_binder _menhir_p0 = DOT x0 = term3
    {let t =
  let _startpos = _endpos__menhir_p0_ in
  let x = x0 in
  ( (($startpos, $endpos), x) )
in
 bind b (mkteabs t) t }
| BIGLAMBDA b = type_binder _menhir_p0 = DOT x0 = term3
    {let t =
  let _startpos = _endpos__menhir_p0_ in
  let x = x0 in
  ( (($startpos, $endpos), x) )
in
 bind b (mktetyabs t) t }
| _menhir_p0 = PACK ty00 = ty3 _menhir_p1 = COMMA t00 = term3 _menhir_p2 = AS ty01 = ty3
    {let ty1 =
  let _startpos = _endpos__menhir_p2_ in
  let ty0 = ty01 in
  let x =
    let ty = ty0 in
    ( ty )
  in
  ( (($startpos, $endpos), x) )
in
let t =
  let _endpos = _startpos__menhir_p2_ in
  let _startpos = _endpos__menhir_p1_ in
  let t0 = t00 in
  let x =
    let t = t0 in
    ( t )
  in
  ( (($startpos, $endpos), x) )
in
let ty2 =
  let _endpos = _startpos__menhir_p1_ in
  let _startpos = _endpos__menhir_p0_ in
  let ty0 = ty00 in
  let x =
    let ty = ty0 in
    ( ty )
  in
  ( (($startpos, $endpos), x) )
in
 TePack (t, ty1, ty2) }
| UNPACK alpha = type_variable COMMA x = term_variable _menhir_p0 = EQ t00 = term3 _menhir_p1 = IN t01 = term3
    {let t2 =
  let _startpos = _endpos__menhir_p1_ in
  let t0 = t01 in
  let x =
    let t = t0 in
    ( t )
  in
  ( (($startpos, $endpos), x) )
in
let t1 =
  let _endpos = _startpos__menhir_p1_ in
  let _startpos = _endpos__menhir_p0_ in
  let t0 = t00 in
  let x =
    let t = t0 in
    ( t )
  in
  ( (($startpos, $endpos), x) )
in
 TeUnpack (alpha, x, t1, t2) }
| LET id = term_variable _menhir_p0 = EQ t00 = term3 _menhir_p1 = IN t01 = term3
    {let t2 =
  let _startpos = _endpos__menhir_p1_ in
  let t0 = t01 in
  let x =
    let t = t0 in
    ( t )
  in
  ( (($startpos, $endpos), x) )
in
let t1 =
  let _endpos = _startpos__menhir_p1_ in
  let _startpos = _endpos__menhir_p0_ in
  let t0 = t00 in
  let x =
    let t = t0 in
    ( t )
  in
  ( (($startpos, $endpos), x) )
in
 TeLet (id, t1, t2) }
| LET LPAR id1 = term_variable_or_wildcard COMMA id2 = term_variable_or_wildcard RPAR _menhir_p0 = EQ t00 = term3 _menhir_p1 = IN t01 = term3
    {let t2 =
  let _startpos = _endpos__menhir_p1_ in
  let t0 = t01 in
  let x =
    let t = t0 in
    ( t )
  in
  ( (($startpos, $endpos), x) )
in
let t1 =
  let _endpos = _startpos__menhir_p1_ in
  let _startpos = _endpos__menhir_p0_ in
  let t0 = t00 in
  let x =
    let t = t0 in
    ( t )
  in
  ( (($startpos, $endpos), x) )
in
 TeLetPair (id1, id2, t1, t2) }
| ASSERT id = term_variable _menhir_p0 = COLON ty00 = ty3 _menhir_p1 = IN t00 = term3
    {let t =
  let _startpos = _endpos__menhir_p1_ in
  let t0 = t00 in
  let x =
    let t = t0 in
    ( t )
  in
  ( (($startpos, $endpos), x) )
in
let ty =
  let _endpos = _startpos__menhir_p1_ in
  let _startpos = _endpos__menhir_p0_ in
  let ty0 = ty00 in
  let x =
    let ty = ty0 in
    ( ty )
  in
  ( (($startpos, $endpos), x) )
in
let _endpos_ty_ = _startpos__menhir_p1_ in
 let var = ($startpos(id), $endpos(id)), TeVar id in
      let con = ($startpos(id), $endpos(ty)), TeConstraint (var, ty) in
      TeLet (id, con, t) }
| LET id = term_variable _menhir_p0 = COLON ty00 = ty3 _menhir_p1 = EQ t00 = term3 _menhir_p2 = IN t01 = term3
    {let t2 =
  let _startpos = _endpos__menhir_p2_ in
  let t0 = t01 in
  let x =
    let t = t0 in
    ( t )
  in
  ( (($startpos, $endpos), x) )
in
let t1 =
  let _endpos = _startpos__menhir_p2_ in
  let _startpos = _endpos__menhir_p1_ in
  let t0 = t00 in
  let x =
    let t = t0 in
    ( t )
  in
  ( (($startpos, $endpos), x) )
in
let ty =
  let _endpos = _startpos__menhir_p1_ in
  let _startpos = _endpos__menhir_p0_ in
  let ty0 = ty00 in
  let x =
    let ty = ty0 in
    ( ty )
  in
  ( (($startpos, $endpos), x) )
in
let _endpos_ty_ = _startpos__menhir_p1_ in
 let con = ($startpos(id), $endpos(ty)), TeConstraint (t1, ty) in
      TeLet (id, con, t2) }
| TYPE id = type_variable _menhir_p0 = EQ ty00 = ty3 _menhir_p1 = IN t00 = term3
    {let t =
  let _startpos = _endpos__menhir_p1_ in
  let t0 = t00 in
  let x =
    let t = t0 in
    ( t )
  in
  ( (($startpos, $endpos), x) )
in
let ty =
  let _endpos = _startpos__menhir_p1_ in
  let _startpos = _endpos__menhir_p0_ in
  let ty0 = ty00 in
  let x =
    let ty = ty0 in
    ( ty )
  in
  ( (($startpos, $endpos), x) )
in
 TeType (id, ty, t) }

declaration:
| KIND id = kind_variable EQ kind0 = kind1
    {let kind =
  let kind = kind0 in
  ( kind )
in
 [ DKind (id, kind) ] }
| TYPE id = type_variable COLON kind0 = kind1 _menhir_p0 = EQ ty00 = ty3
    {let ty =
  let _startpos = _endpos__menhir_p0_ in
  let ty0 = ty00 in
  let x =
    let ty = ty0 in
    ( ty )
  in
  ( (($startpos, $endpos), x) )
in
let kind =
  let kind = kind0 in
  ( kind )
in
 [ DType (id, kind, ty) ] }
| DEFAULT KIND id = type_variable COLON kind0 = kind1
    {let kind =
  let kind = kind0 in
  ( kind )
in
 [ DDefaultKind (id, kind) ] }
| LEMMA IDENTIFIER COLON s = statement
    { [ DLemma s ] }
| TERM id = term_variable _menhir_p0 = COLON ty00 = ty3 _menhir_p1 = EQ t00 = term3
    {let t =
  let _startpos = _endpos__menhir_p1_ in
  let t0 = t00 in
  let x =
    let t = t0 in
    ( t )
  in
  ( (($startpos, $endpos), x) )
in
let ty =
  let _endpos = _startpos__menhir_p1_ in
  let _startpos = _endpos__menhir_p0_ in
  let ty0 = ty00 in
  let x =
    let ty = ty0 in
    ( ty )
  in
  ( (($startpos, $endpos), x) )
in
 [ DTerm (id, ty, t) ] }
| filename = INCLUDE
    { !ParserBootstrap.load_and_parse filename }

%%



