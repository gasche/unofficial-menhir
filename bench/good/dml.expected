File "dml.mly", line 33, characters 7-12:
Warning: the token AMPER is unused.
File "dml.mly", line 63, characters 27-31:
Warning: the token BANG is unused.
File "dml.mly", line 29, characters 10-16:
Warning: the token BANGEQ is unused.
File "dml.mly", line 35, characters 26-31:
Warning: the token BREAK is unused.
File "dml.mly", line 35, characters 32-37:
Warning: the token CARET is unused.
File "dml.mly", line 35, characters 43-47:
Warning: the token CHAR is unused.
File "dml.mly", line 35, characters 48-56:
Warning: the token CONTINUE is unused.
File "dml.mly", line 52, characters 6-10:
Warning: the token EQEQ is unused.
File "dml.mly", line 51, characters 12-17:
Warning: the token GTDOT is unused.
File "dml.mly", line 51, characters 26-33:
Warning: the token GTEQDOT is unused.
File "dml.mly", line 51, characters 6-11:
Warning: the token LTDOT is unused.
File "dml.mly", line 51, characters 18-25:
Warning: the token LTEQDOT is unused.
File "dml.mly", line 34, characters 7-14:
Warning: the token LTMINUS is unused.
File "dml.mly", line 63, characters 16-26:
Warning: the token MINUSMINUS is unused.
File "dml.mly", line 63, characters 7-15:
Warning: the token PLUSPLUS is unused.
File "dml.mly", line 37, characters 7-13:
Warning: the token RETURN is unused.
File "dml.mly", line 32, characters 29-38:
Warning: the token SEMICOLON is unused.
File "dml.mly", line 37, characters 19-25:
Warning: the token STRING is unused.
File "dml.mly", line 37, characters 36-40:
Warning: the token TYPE is unused.
File "dml.mly", line 37, characters 52-56:
Warning: the token UNIT is unused.
File "dml.mly", line 48, characters 6-19:
Warning: the token prec_ind_bop1 is unused.
File "dml.mly", line 205, characters 0-15:
Warning: symbol open_tvar_decls is unreachable from any of the start symbol(s).
File "dml.mly", line 210, characters 0-10:
Warning: symbol tvar_decls is unreachable from any of the start symbol(s).
%{

open Dmlsyn

%}
%start top
%token WITHTYPE
%token WITH
%token VAL
%token UNIT
%token UNDERSCORE
%token TYPE
%token TRUE
%token TILDE
%token THEN
%token STRING
%token SORT
%token SEMICOLON
%token RPAREN
%token RETURN
%token RBRACKET
%token RBRACE
%token QUOTE
%token OP
%token OF
%token NAT
%token LTMINUS
%token LPAREN
%token LET
%token LBRACKET
%token LBRACE
%token INT
%token IN
%token IF
%token <string> IDENT
%token FUN
%token FN
%token FALSE
%token EQGT
%token EOF
%token END
%token ELSE
%token DATATYPE
%token CONTINUE
%token <string> CONSTSTRING
%token <int> CONSTINT
%token <float> CONSTFLOAT
%token <char> CONSTCHAR
%token COLONCOLON
%token COLON
%token CHAR
%token CASE
%token BREAK
%token BOOL
%token BANGEQ
%token AS
%token APPEND
%token AND
%token COMMA
%token EQ
%token MINUSGT
%token BARBAR
%token AMPERAMPER
%token LTEQ
%token LT
%token GTEQ
%token GT
%token LTGT
%token PLUS
%token MINUS
%token TIMES
%token PERCENT
%token DIV
%token DOT
%token BAR
%token AMPER
%token CARET
%token LOR
%token LAND
%left COMMA 
%right EQ 
%right prec_if 
%right prec_case 
%right MINUSGT 
%right prec_exp_lop 
%left BARBAR 
%left AMPERAMPER 
%left prec_ind_bop1 
%left prec_exp_bop1 
%left LTEQ LT GTEQ GT 
%left LTEQDOT LTDOT GTEQDOT GTDOT 
%left LTGT EQEQ 
%left prec_ind_bop2 
%left prec_exp_bop2 
%left PLUS MINUS 
%left prec_ind_aop1 
%left prec_exp_aop1 
%left TIMES PERCENT DIV 
%left prec_ind_aop2 
%left prec_exp_aop2 
%left DOT 
%right prec_exi 
%right PLUSPLUS MINUSMINUS BANG 
%left BAR 
%left AMPER 
%left CARET 
%left LOR 
%left LAND 
%type <Dmlsyn.decl list> top
%%

top:
| decls EOF
    { $1 }

decls:
| decl decls
    { $1 :: $2 }
| decl
    { [$1] }

decl:
| FUN fun_decls
    { Fdecl $2 }
| VAL var_typ_decl
    { VTdecl $2 }
| VAL val_decls
    { Vdecl $2 }
| SORT isort_decl
    { Sdecl $2 }
| DATATYPE union_decls
    { Udecl $2 }

ident:
| IDENT
    { $1 }

constant:
| TRUE
    { Cboo true }
| FALSE
    { Cboo false}
| CONSTCHAR
    { Ccha $1 }
| CONSTFLOAT
    { Cflo $1 }
| CONSTINT
    { Cint $1 }
| CONSTSTRING
    { Cstr $1 }

opname:
| OP PLUS
    { "+" }
| OP MINUS
    { "-" }
| OP TIMES
    { "*" }
| OP DIV
    { "/" }
| OP PERCENT
    { "%" }
| OP GT
    { ">" }
| OP GTEQ
    { ">=" }
| OP LT
    { "<" }
| OP LTEQ
    { "<=" }
| OP EQ
    { "=" }
| OP LTGT
    { "<>" }
| OP AMPERAMPER
    { "&&" }
| OP BARBAR
    { "||" }
| OP APPEND
    { "@" }

var_typ_decl:
| IDENT COLON dtype
    { {var_nam = $1; var_typ = Some $3} }
| opname COLON dtype
    { {var_nam = $1; var_typ = Some $3} }

val_decl:
| pattern EQ exp
    { {vd_pat = $1; vd_exp = $3} }

val_decls:
| val_decl AND val_decls
    { $1 :: $3 }
| val_decl
    { [$1] }

fun_args:
| simple_pattern fun_args
    { $1 :: $2 }
| simple_pattern
    { [$1] }

fun_decl_clause:
| IDENT fun_args EQ exp
    { ($1, ($2, $4)) }

fun_decl_clauses:
| fun_decl_clause BAR fun_decl_clauses
    { $1 :: $3 }
| fun_decl_clause
    { [$1] }

owithtype:
| WITHTYPE dtype
    { Some $2 }
| 
    { None }

fun_decl:
| tvar_para fun_decl_clauses owithtype
    { mk_function_d $1 $2 $3 }

fun_decls:
| fun_decl AND fun_decls
    { $1 :: $3 }
| fun_decl
    { [$1] }

isort_decl:
| IDENT EQ isort
    { { sd_nam = $1; sd_def = $3 } }

union_decl:
| tvar_para IDENT ud_sorts EQ union_field_decls
    { { ud_nam = $2;
				            ud_tvs = $1;
				            ud_sts = $3;
					    ud_fds = $5 } }

union_decls:
| union_decl AND union_decls
    { $1 :: $3 }
| union_decl
    { [$1] }

open_tvar_para:
| tvar RPAREN
    { [TDvar (to_btv $1)] }
| tvar COMMA open_tvar_para
    { TDvar (to_btv $1) :: $3 }

tvar_para:
| LPAREN open_tvar_para
    { $2 }
| tvar
    { [TDvar (to_btv $1)] }
| 
    { [] }

ud_sorts:
| WITH isort
    { [$2] }
| WITH LPAREN open_isort_list
    { $3 }
| 
    { [] }

open_isort_list:
| isort RPAREN
    { [$1] }
| isort COMMA open_isort_list
    { $1 :: $3 }

tvar:
| QUOTE IDENT
    { $2 }

ivar_decl:
| ident COLON isort
    { IDvar (to_ubiv $1 $3) }
| iprop
    { IDprop $1 }

ivar_decls:
| ivar_decl COMMA ivar_decls
    { $1 :: $3 }
| ivar_decl BAR ivar_decls
    { $1 :: $3 }
| ivar_decl
    { [$1] }

uni_ivar_decls:
| LBRACE ivar_decls RBRACE
    { $2 }

exi_ivar_decls:
| LBRACKET ivar_decls RBRACKET
    { $2 }

ind_bop1:
| LAND
    { INFop "/\\" }
| LOR
    { INFop "\\/" }

ind_bop2:
| LT
    { INFop "<" }
| LTEQ
    { INFop "<=" }
| GT
    { INFop ">" }
| GTEQ
    { INFop ">=" }
| EQ
    { INFop "=" }
| LTGT
    { INFop "<>" }

ind_aop1:
| PLUS
    { INFop "+" }
| MINUS
    { INFop "-" }
| BARBAR
    { INFop "||" }

ind_aop2:
| TIMES
    { INFop "*" }
| DIV
    { INFop "/" }
| PERCENT
    { INFop "mod" }
| AMPERAMPER
    { INFop "&&" }

simple_index:
| ident
    { Ivar $1 }
| CONSTINT
    { Iint $1 }
| MINUS simple_index
    { Ifun("uminus", [$2]) }
| ident LPAREN open_comma_index_list
    { Ifun($1, $3) }
| LPAREN index RPAREN
    { $2 }

int_index:
| simple_index
    { $1 }
| int_index ind_aop1 int_index %prec prec_ind_aop1
    { mk_infix_ind $1 $2 $3 }
| int_index ind_aop2 int_index %prec prec_ind_aop2
    { mk_infix_ind $1 $2 $3 }

bool_index_seq:
| int_index ind_bop2 int_index
    { ($2, $3, [mk_infix_ind $1 $2 $3]) }
| bool_index_seq ind_bop2 int_index %prec prec_ind_bop2
    { mk_infix_bool_ind_seq $1 $2 $3 }

bool_index:
| bool_index_seq
    { ind_of_bool_ind_seq $1 }
| bool_index ind_bop1 bool_index
    { mk_infix_ind $1 $2 $3 }
| LPAREN bool_index RPAREN
    { $2 }

index:
| int_index
    { $1 }
| bool_index
    { $1 }

open_comma_index_list:
| index COMMA open_comma_index_list
    { $1 :: $3 }
| index RPAREN
    { [$1] }

iprop:
| index
    { ip_of_ind $1 }

isort:
| INT
    { ISint }
| NAT
    { isnat }
| IDENT
    { ISnam $1 }
| LBRACE ident COLON isort BAR iprop RBRACE
    { ISsub (to_ubiv $2 $4, $6) }

named_dtype:
| IDENT
    { ([], $1) }
| simple_dtype IDENT
    { ([$1], $2) }
| LPAREN dtype open_comma_dtype_list IDENT
    { ($2 :: $3, $4) }

open_comma_dtype_list:
| COMMA dtype open_comma_dtype_list
    { $2 :: $3 }
| COMMA dtype LPAREN
    { [$2] }

simple_dtype:
| tvar
    { mkdt (DTvar $1) }
| BOOL
    { mkdt (DTnam([], "bool", [])) }
| BOOL LPAREN index RPAREN
    { mkdt (DTnam([], "bool", [$3])) }
| INT
    { mkdt (DTnam([], "int", [])) }
| NAT
    { mkdt dtnat_dsc }
| INT LPAREN index RPAREN
    { mkdt (DTnam([], "int", [$3])) }
| INT LPAREN index COMMA index RPAREN
    { mkdt (dtint_lr_dsc $3 $5) }
| INT LPAREN index COMMA index RBRACKET
    { mkdt (dtint_lR_dsc $3 $5) }
| INT LBRACKET index COMMA index RPAREN
    { mkdt (dtint_Lr_dsc $3 $5) }
| INT LBRACKET index COMMA index RBRACKET
    { mkdt (dtint_LR_dsc $3 $5) }
| named_dtype
    { let (dts, name) = $1
                                          in mkdt_nam (dts, name, [])}
| named_dtype LPAREN open_comma_index_list
    { let (dts, name) = $1
                                          in mkdt_nam (dts, name, $3) }
| exi_ivar_decls simple_dtype %prec prec_exi
    { mkdt (DTexi ($1, $2)) }
| LPAREN dtype RPAREN
    { $2 }

tuple_dtype:
| rev_tuple_dtype
    { mkdt_tup (List.rev $1) }

rev_tuple_dtype:
| simple_dtype
    { [$1] }
| rev_tuple_dtype TIMES simple_dtype
    { $3 :: $1 }

metric:
| LT int_index_list GT
    { $2 }
| LTGT
    { [] }

int_index_list:
| int_index comma_int_index_list
    { $1 :: $2 }
| 
    { [] }

comma_int_index_list:
| COMMA int_index comma_int_index_list
    { $2 :: $3 }
| 
    { [] }

dtype:
| tuple_dtype
    { $1 }
| tuple_dtype MINUSGT dtype
    { mkdt (DTfun ($1, $3)) }
| metric EQGT dtype
    { mkdt (DTmet ($1, $3)) }
| uni_ivar_decls dtype
    { mkdt (DTuni ($1, $2)) }
| tvar_para DOT dtype
    { mkdt (DTlam ($1, $3)) }

dtype_opt:
| OF dtype
    { Some $2 }
| 
    { None }

union_field_decl:
| IDENT dtype_opt
    { { uf_nam = $1;
					    uf_arg = $2;
                                            uf_res = [];
                                            uf_qua = [] } }
| IDENT LPAREN open_comma_index_list dtype_opt
    { { uf_nam = $1;
					    uf_arg = $4;
                                            uf_res = $3;
                                            uf_qua = [] } }
| uni_ivar_decls IDENT dtype_opt
    { { uf_nam = $2;
					    uf_arg = $3;
                                            uf_res = [];
                                            uf_qua = $1 } }
| uni_ivar_decls IDENT LPAREN open_comma_index_list dtype_opt
    { { uf_nam = $2;
					    uf_arg = $5;
                                            uf_res = $4;
                                            uf_qua = $1 } }

union_field_decls:
| union_field_decl BAR union_field_decls
    { $1 :: $3 }
| union_field_decl
    { [$1] }

exp_bop1:
| AMPERAMPER
    { INFop "&&" }
| BARBAR
    { INFop "||" }

exp_bop2:
| LT
    { INFop "<" }
| LTEQ
    { INFop "<=" }
| GT
    { INFop ">" }
| GTEQ
    { INFop ">=" }
| LTGT
    { INFop "<>" }
| EQ
    { INFop "=" }

exp_aop1:
| PLUS
    { INFop "+" }
| MINUS
    { INFop "-" }

exp_aop2:
| TIMES
    { INFop "*" }
| DIV
    { INFop "/" }
| PERCENT
    { INFop "%" }

exp_lop:
| COLONCOLON
    { INFop "cons" }
| APPEND
    { INFop "@" }

simple_exp:
| IDENT
    { mkexp (Evar $1) }
| constant
    { mkexp (Ecst $1) }
| TILDE simple_exp
    { mkexp (Eapp (mkexp (Evar "uminus"),
					               $2)) }
| LET decls IN exp END
    { mkexp (Elet ($2, $4)) }
| LPAREN exp_list RPAREN
    { mkexp_tup $2 }
| LPAREN exp COLON dtype RPAREN
    { mkexp (Eann ($2, $4)) }
| LBRACKET exp_list RBRACKET
    { mkexp_list $2 }

app_exp:
| app_exp simple_exp
    { mkexp (Eapp ($1, $2)) }
| simple_exp
    { $1 }

exp:
| app_exp
    { $1 }
| exp exp_bop1 exp %prec prec_exp_bop1
    { mk_infix_exp $1 $2 $3 }
| exp exp_bop2 exp %prec prec_exp_bop2
    { mk_infix_exp $1 $2 $3 }
| exp exp_aop1 exp %prec prec_exp_aop1
    { mk_infix_exp $1 $2 $3 }
| exp exp_aop2 exp %prec prec_exp_aop2
    { mk_infix_exp $1 $2 $3 }
| exp exp_lop exp %prec prec_exp_lop
    { mk_infix_exp $1 $2 $3 }
| IF exp THEN exp ELSE exp %prec prec_if
    { mkexp_if ($2, $4, $6) }
| CASE exp OF case_clauses
    { mkexp (Ecas ($2, $4)) }
| FN case_clauses
    { mkexp (Efn $2) }

exp_list:
| exp comma_exp_list
    { $1 :: $2 }
| 
    { [] }

comma_exp_list:
| COMMA exp comma_exp_list
    { $2 :: $3 }
| 
    { [] }

pattern:
| simple_pattern
    { $1 }
| simple_pattern COLONCOLON pattern
    { mkpat (Pcstr ("cons",
                                                        mkpat_tup [$1; $3])) }
| IDENT simple_pattern
    { mkpat (Pcstr ($1, $2)) }
| IDENT AS pattern
    { mkpat (Pas ($1, $3)) }

simple_pattern:
| IDENT
    { mkpat (Pvar $1) }
| UNDERSCORE
    { mkpat (Pany) }
| constant
    { mkpat (Pcst $1) }
| LPAREN pattern_list RPAREN
    { mkpat_tup $2 }
| LBRACKET pattern_list RBRACKET
    { mkpat_list $2 }

pattern_list:
| pattern comma_pattern_list
    { $1 :: $2 }
| 
    { [] }

comma_pattern_list:
| COMMA pattern comma_pattern_list
    { $2 :: $3 }
| 
    { [] }

case_clause:
| pattern EQGT exp %prec prec_case
    { ($1, $3) }

case_clauses:
| case_clause BAR case_clauses
    { $1 :: $3 }
| case_clause
    { [$1] }

%%



