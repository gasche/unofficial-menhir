%{

open Tables

%}
%start entry
%token WIDGET
%token VARIANT
%token UNSAFE
%token TYSTRING
%token TYPE
%token TYINT
%token TYFLOAT
%token TYCHAR
%token TYBOOL
%token SUBTYPE
%token <string> STRING
%token SLASH
%token SEQUENCE
%token SEMICOLON
%token RPAREN
%token RBRACKET
%token RBRACE
%token QUESTION
%token OPTION
%token MODULE
%token LPAREN
%token LIST
%token LBRACKET
%token LBRACE
%token <string> IDENT
%token FUNCTION
%token EXTERNAL
%token EOF
%token COMMA
%token COLON
%token AS

%type <unit> entry
%%

TypeName:
| IDENT
    { String.uncapitalize $1 }
| WIDGET
    { "widget" }

Type0:
| TYINT
    { Int }
| TYFLOAT
    { Float }
| TYBOOL
    { Bool }
| TYCHAR
    { Char }
| TYSTRING
    { String }
| TypeName
    { UserDefined $1 }

Type0_5:
| Type0 SLASH Type0
    { if !Flags.camltk then $1 else $3 }
| Type0
    { $1 }

Type1:
| Type0_5
    { $1 }
| TypeName LPAREN IDENT RPAREN
    { Subtype ($1, $3) }
| WIDGET LPAREN IDENT RPAREN
    { Subtype ("widget", $3) }
| OPTION LPAREN IDENT RPAREN
    { Subtype ("options", $3) }
| Type1 AS STRING
    { As ($1, $3) }
| LBRACE Type_list RBRACE
    { Product $2 }

Type2:
| Type1
    { $1 }
| Type2 LIST
    { List $1 }

Labeled_type2:
| Type2
    { "", $1 }
| IDENT COLON Type2
    { $1, $3 }

Type_list:
| Type2 COMMA Type_list
    { $1 :: $3 }
| Type2
    { [$1] }

Type_record:
| Labeled_type2 COMMA Type_record
    { $1 :: $3 }
| Labeled_type2
    { [$1] }

FType:
| LPAREN RPAREN
    { Unit }
| LPAREN Type2 RPAREN
    { $2 }
| LPAREN Type_record RPAREN
    { Record $2 }

Type:
| Type2
    { $1 }
| FUNCTION FType
    { Function $2 }

SimpleArg:
| STRING
    {StringArg $1}
| Type
    {TypeArg ("", $1) }

Arg:
| STRING
    {StringArg $1}
| Type
    {TypeArg ("", $1) }
| IDENT COLON Type
    {TypeArg ($1, $3)}
| QUESTION IDENT COLON LBRACKET SimpleArgList RBRACKET DefaultList
    {OptionalArgs ( $2, $5, $7 )}
| QUESTION WIDGET COLON LBRACKET SimpleArgList RBRACKET DefaultList
    {OptionalArgs ( "widget", $5, $7 )}
| QUESTION IDENT COLON LBRACKET SimpleArgList RBRACKET
    {OptionalArgs ( $2, $5, [] )}
| QUESTION WIDGET COLON LBRACKET SimpleArgList RBRACKET
    {OptionalArgs ( "widget", $5, [] )}
| WIDGET COLON Type
    {TypeArg ("widget", $3)}
| Template
    { $1 }

SimpleArgList:
| SimpleArg SEMICOLON SimpleArgList
    { $1 :: $3}
| SimpleArg
    { [$1] }

ArgList:
| Arg SEMICOLON ArgList
    { $1 :: $3}
| Arg
    { [$1] }

DefaultList:
| LBRACKET LBRACE ArgList RBRACE RBRACKET
    {$3}

Template:
| LBRACKET ArgList RBRACKET
    { ListArg $2 }

Constructor:
| IDENT Template
    {{ component = Constructor; 
         ml_name = $1;
         var_name = getvarname $1 $2;
         template = $2;
         result = Unit;
         safe = true }}
| IDENT LPAREN IDENT RPAREN Template
    {{ component = Constructor; 
         ml_name = $1;
         var_name = $3;
         template = $5;
         result = Unit;
         safe = true }}

AbbrevConstructor:
| Constructor
    { Full $1 }
| IDENT
    { Abbrev $1 }

Constructors:
| Constructor Constructors
    { $1 :: $2 }
| Constructor
    { [$1] }

AbbrevConstructors:
| AbbrevConstructor AbbrevConstructors
    { $1 :: $2 }
| AbbrevConstructor
    { [$1] }

Safe:
| 
    { true }
| UNSAFE
    { false }

Command:
| Safe FUNCTION FType IDENT Template
    {{component = Command; ml_name = $4; var_name = "";
       template = $5; result = $3; safe = $1 }}

External:
| Safe EXTERNAL IDENT STRING
    {{component = External; ml_name = $3; var_name = "";
       template = StringArg $4; result = Unit; safe = $1}}

Option:
| OPTION IDENT Template
    {{component = Constructor; ml_name = $2; var_name = getvarname $2 $3;
       template = $3; result = Unit; safe = true }}
| OPTION IDENT LPAREN IDENT RPAREN Template
    {{component = Constructor; ml_name = $2; var_name = $4;
       template = $6; result = Unit; safe = true }}
| OPTION IDENT
    { retrieve_option $2 }

WidgetComponents:
| 
    { [] }
| Command WidgetComponents
    { $1 :: $2 }
| Option WidgetComponents
    { $1 :: $2 }
| External WidgetComponents
    { $1 :: $2 }

ModuleComponents:
| 
    { [] }
| Command ModuleComponents
    { $1 :: $2 }
| External ModuleComponents
    { $1 :: $2 }

ParserArity:
| 
    { OneToken }
| SEQUENCE
    { MultipleToken }

entry:
| TYPE ParserArity TypeName LBRACE Constructors RBRACE
    { enter_type $3 $2 $5 }
| VARIANT TYPE ParserArity TypeName LBRACE Constructors RBRACE
    { enter_type $4 $3 $6 ~variant: true }
| TYPE ParserArity TypeName EXTERNAL
    { enter_external_type $3 $2 }
| SUBTYPE ParserArity OPTION LPAREN IDENT RPAREN LBRACE AbbrevConstructors RBRACE
    { enter_subtype "options" $2 $5 $8 }
| SUBTYPE ParserArity TypeName LPAREN IDENT RPAREN LBRACE AbbrevConstructors RBRACE
    { enter_subtype $3 $2 $5 $8 }
| Command
    { enter_function $1 }
| WIDGET IDENT LBRACE WidgetComponents RBRACE
    { enter_widget $2 $4 }
| MODULE IDENT LBRACE ModuleComponents RBRACE
    { enter_module (String.uncapitalize $2) $4 }
| EOF
    { raise End_of_file }

%%



