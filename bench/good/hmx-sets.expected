File "hmx-sets.mly", line 69, characters 7-10:
Warning: the token TRY is unused.
File "hmx-sets.mly", line 72, characters 7-11:
Warning: the token WITH is unused.
%{

open Sets.Hm
open Sets.Primitives

let sequence e1 e2 =
  App(Lambda("-", e2), e1)

let sequence arg body =
  sequence (PrimApp(PrimEnsureUnit, [arg])) body

(* A pattern is either a variable or the unit constant. A wildcard pattern is viewed as a variable "-", which cannot
   be named inside expressions, because the lexer will not view it as an identifier. *)

type pattern =
  | PVariable of string
  | PUnit

let rec make_fun patterns expr =
  match patterns with
  | [] ->
      expr
  | (PVariable x) :: patterns ->
      Lambda (x, make_fun patterns expr)
  | PUnit :: patterns ->
      Lambda ("-", sequence (Var "-") (make_fun patterns expr))

let rec make_let (pattern, body) =
  match pattern with
  | PVariable x ->
      x, body
  | PUnit ->
      "-", PrimApp (PrimEnsureUnit, [body])

let rec make_set = function
  | [] ->
      PrimApp (PrimSetEmpty, [])
  | label :: rest ->
      PrimApp (PrimSetExtend label, [make_set rest])

%}
%start phrase
%token WITH
%token UNIT
%token UNDERSCORE
%token TRY
%token TILDE
%token SETMINUS
%token SEMISEMI
%token SEMI
%token RPAREN
%token RBRACE
%token QUESTION
%token PLUS
%token NORMAL
%token MATCH
%token LPAREN
%token LET
%token LBRACE
%token IN
%token <string> IDENT
%token FUN
%token EXC
%token EQUAL
%token DOT
%token CHOOSE
%token ARROW

%type <Sets.Hm.phrase> phrase
%%

phrase:
| expression SEMISEMI
    { "_", $1 }
| LET pattern pattern_list EQUAL expression SEMISEMI
    { make_let ($2, make_fun $3 $5) }

expression:
| expression2
    { $1 }
| FUN pattern_list ARROW expression
    { make_fun $2 $4 }
| LET pattern pattern_list EQUAL expression IN expression
    { let name, body = make_let ($2, make_fun $3 $5) in
                                                                  Let (name, body, $7) }

expression2:
| expression1
    { $1 }
| expression1 SEMI expression
    { sequence $1 $3 }

expression1:
| expression0
    { $1 }
| expression1 expression0
    { App ($1, $2) }
| CHOOSE expression0 expression0
    { PrimApp (PrimChoice, [$2;$3]) }

expression0:
| IDENT
    { Var $1 }
| UNIT
    { PrimApp (PrimUnit, []) }
| NORMAL
    { PrimApp (PrimNormal, []) }
| EXC
    { PrimApp (PrimExc, []) }
| MATCH
    { PrimApp (PrimMatch, []) }
| LPAREN expression RPAREN
    { $2 }
| LBRACE label_list RBRACE
    { make_set $2 }
| expression0 PLUS IDENT
    { PrimApp (PrimSetExtend $3, [$1]) }
| expression0 DOT IDENT
    { PrimApp (PrimSetMemberAssert $3, [$1]) }
| expression0 SETMINUS IDENT
    { PrimApp (PrimSetRestrict $3, [$1]) }
| expression0 QUESTION IDENT
    { PrimApp (PrimSetMemberTest $3, [$1]) }
| expression0 TILDE IDENT
    { PrimApp (PrimSetModify $3, [$1]) }

label_list:
| 
    { [] }
| IDENT
    { [$1] }
| IDENT SEMI label_list
    { $1 :: $3 }

pattern_list:
| 
    { [] }
| pattern pattern_list
    { $1 :: $2 }

pattern:
| IDENT
    { PVariable $1 }
| UNDERSCORE
    { PVariable "-" }
| UNIT
    { PUnit }

%%



