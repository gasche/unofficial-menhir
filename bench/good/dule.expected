File "dule.mly", line 66, characters 7-17:
Warning: the token AMPERAMPER is unused.
File "dule.mly", line 67, characters 7-16:
Warning: the token AMPERSAND is unused.
File "dule.mly", line 72, characters 7-13:
Warning: the token BARBAR is unused.
File "dule.mly", line 73, characters 7-18:
Warning: the token BARRBRACKET is unused.
File "dule.mly", line 74, characters 14-18:
Warning: the token CHAR is unused.
File "dule.mly", line 79, characters 7-12:
Warning: the token COMMA is unused.
File "dule.mly", line 83, characters 7-13:
Warning: the token DOTDOT is unused.
File "dule.mly", line 88, characters 7-16:
Warning: the token EXCEPTION is unused.
File "dule.mly", line 90, characters 16-21:
Warning: the token FLOAT is unused.
File "dule.mly", line 93, characters 7-14:
Warning: the token GREATER is unused.
File "dule.mly", line 94, characters 7-20:
Warning: the token GREATERRBRACE is unused.
File "dule.mly", line 95, characters 7-22:
Warning: the token GREATERRBRACKET is unused.
File "dule.mly", line 98, characters 7-14:
Warning: the token INCLUDE is unused.
File "dule.mly", line 102, characters 7-17:
Warning: the token LBRACELESS is unused.
File "dule.mly", line 104, characters 7-18:
Warning: the token LBRACKETBAR is unused.
File "dule.mly", line 105, characters 7-19:
Warning: the token LBRACKETLESS is unused.
File "dule.mly", line 106, characters 7-11:
Warning: the token LESS is unused.
File "dule.mly", line 115, characters 7-12:
Warning: the token MINUS is unused.
File "dule.mly", line 116, characters 7-15:
Warning: the token MINUSDOT is unused.
File "dule.mly", line 119, characters 7-9:
Warning: the token OF is unused.
File "dule.mly", line 120, characters 7-11:
Warning: the token OPEN is unused.
File "dule.mly", line 121, characters 7-11:
Warning: the token PLUS is unused.
File "dule.mly", line 122, characters 7-15:
Warning: the token QUESTION is unused.
File "dule.mly", line 123, characters 7-12:
Warning: the token QUOTE is unused.
File "dule.mly", line 129, characters 7-15:
Warning: the token SEMISEMI is unused.
File "dule.mly", line 130, characters 7-12:
Warning: the token SHARP is unused.
File "dule.mly", line 133, characters 7-11:
Warning: the token STAR is unused.
File "dule.mly", line 134, characters 16-22:
Warning: the token STRING is unused.
File "dule.mly", line 145, characters 7-11:
Warning: the token WHEN is unused.
%{

open Tools
open Tools.IList
open Core_front.BCore
open Mod_front.EDule

let symbol_rloc () =
  Error_rep.Location.int2t (Parsing.symbol_start()) (Parsing.symbol_end())

let rhs_loc n = 
  Error_rep.Location.int2t (Parsing.rhs_start n) (Parsing.rhs_end n)   

let mktyp f = (symbol_rloc(), f)
let mkvalu t = (symbol_rloc(), t)
let mksp p = (symbol_rloc(), p)
let mkdule m = (symbol_rloc(), m)
let mkstart li = (symbol_rloc(), li)
let mkwild () = IdIndex.loc2wild (Error_rep.Location.t2string (symbol_rloc ()))
let mkpatid () = IdIndex.loc2patt (Error_rep.Location.t2string (symbol_rloc ()))
let mkpat lt = let f = mktyp(F_x) in
	       let lf = vmap (fun _ -> f) lt in
	       mktyp (F_pp lf)
let mkint n =
  if n < 0 then failwith "Negative integers not implemented!"
  else
    let i2pr i = 
      mkvalu(T_comp (mkvalu(T_pr AtIndex.mNat), 
		     mkvalu(T_pr i)))
    in
    let rec n2con n = 
      if n = 0 then
	i2pr AtIndex.zero
      else
	let acc = n2con (n - 1) in
	mkvalu(T_appl (cons (AtIndex.arg_of_succ, acc) nil, 
		       i2pr AtIndex.succ))
    in
    n2con n

let unclosed opening_name opening_num closing_name closing_num =
  raise(Error_rep.TextualError.TextualError
	  (Error_rep.TextualError.makeUnclosed
	     (rhs_loc opening_num) opening_name
	     (rhs_loc closing_num) closing_name))

%}
%start core
%start start
%token WHEN
%token VALUE
%token UNFOLD
%token UNDERSCORE
%token UNDE
%token UNCON
%token <string> UIDENT
%token TYPE
%token THEN
%token STRUCT
%token <string> STRING
%token STAR
%token SPEC
%token SIG
%token SHARP
%token SEMISEMI
%token SEMI
%token RPAREN
%token REC
%token RBRACKET
%token RBRACE
%token QUOTE
%token QUESTION
%token PLUS
%token OPEN
%token OF
%token MODULE
%token MINUSGREATER
%token MINUSDOT
%token MINUS
%token MATCH
%token MAP
%token LOAD
%token LINK
%token <string> LIDENT
%token LIBRARY
%token LET
%token LESS
%token LBRACKETLESS
%token LBRACKETBAR
%token LBRACKET
%token LBRACELESS
%token LBRACE
%token <int> INT
%token IND
%token INCLUDE
%token IN
%token IF
%token GREATERRBRACKET
%token GREATERRBRACE
%token GREATER
%token FUN
%token FOLD
%token <string> FLOAT
%token FAIL
%token EXCEPTION
%token EQUAL
%token EOF
%token END
%token ELSE
%token DOTDOT
%token DE
%token CON
%token COMMA
%token COLONCOLON
%token COLON
%token COIND
%token <char> CHAR
%token BARRBRACKET
%token BARBAR
%token BACKQUOTE
%token ASSERT
%token AND
%token AMPERSAND
%token AMPERAMPER
%token COLONGREATER
%token WITH
%token TILDE
%token LPAREN
%token DOT
%token BAR
%nonassoc COLONGREATER 
%left WITH 
%left TILDE 
%nonassoc prec_argument 
%nonassoc LPAREN 
%left DOT BAR 
%type <Error_rep.Location.t * Core_front.BCore.valu'> core
%type <Error_rep.Location.t * Mod_front.EDule.link_item list> start
%%

type_label:
| LIDENT
    { IdIndex.s2type $1 }

value_label:
| LIDENT
    { IdIndex.s2value $1 }

case_label:
| UIDENT
    { IdIndex.s2case $1 }
| LIDENT
    { IdIndex.s2case $1 }

dule_label:
| UIDENT
    { IdIndex.s2dule $1 }

sp_label:
| UIDENT
    { IdIndex.s2sp $1 }

list0_field_typ:
| 
    { nil }
| list1_field_typ
    { $1 }

list1_field_typ:
| field_typ
    { cons $1 nil }
| list1_field_typ SEMI field_typ
    { econs $3 $1 }

field_typ:
| value_label COLON typ
    { ($1, $3) }

list0_case_typ:
| 
    { nil }
| list1_case_typ
    { $1 }

list1_case_typ:
| case_typ
    { cons $1 nil }
| list1_case_typ BAR case_typ
    { econs $3 $1 }

case_typ:
| BACKQUOTE case_label typ
    { ($2, $3) }
| BACKQUOTE case_label
    { ($2, mktyp(F_pp nil)) }

list0_param_typ:
| 
    { nil }
| list0_param_typ param_typ
    { econs $2 $1 }

param_typ:
| TILDE value_label COLON typ
    { ($2, $4) }

typ:
| typ DOT typ
    { mktyp(F_COMP ($1, $3)) }
| type_label
    { mktyp(F_PR $1) }
| dule_label
    { mktyp(F_PR $1) }
| LBRACE list0_field_typ RBRACE
    { mktyp(F_pp $2) }
| LBRACE list0_field_typ error
    { unclosed "{" 1 "}" 3 }
| LBRACKET list0_case_typ RBRACKET
    { mktyp(F_ss $2) }
| LBRACKET list0_case_typ error
    { unclosed "[" 1 "]" 3 }
| list0_param_typ MINUSGREATER typ
    { mktyp(F_ee ($1, $3)) }
| IND type_label COLON typ
    { mktyp(F_ii ($2, $4)) }
| COIND type_label COLON typ
    { mktyp(F_tt ($2, $4)) }
| LPAREN typ RPAREN
    { $2 }
| LPAREN typ error
    { unclosed "(" 1 ")" 3 }

list0_field:
| 
    { nil }
| list1_field
    { $1 }

list1_field:
| field
    { cons $1 nil }
| list1_field SEMI field
    { econs $3 $1 }

field:
| value_label EQUAL valu
    { ($1, $3) }
| value_label
    { ($1, mkvalu(T_pr $1)) }

list0_case:
| 
    { nil }
| list1_case
    { $1 }

list1_case:
| case
    { cons $1 nil }
| list1_case BAR case
    { econs $3 $1 }

case:
| BACKQUOTE case_label embedding
    { ($2, $3) }

embedding:
| valu
    { $1 }
| pattern MINUSGREATER valu
    { mkvalu(T_curry (cons (AtIndex.it, $1) nil, $3)) }
| MINUSGREATER valu
    { mkvalu(T_curry (cons (AtIndex.it, (mkwild(), mktyp(F_x))) nil, $2)) }

list1_argument:
| argument
    { cons $1 nil }
| list1_argument argument
    { econs $2 $1 }

argument:
| TILDE value_label COLON valu %prec prec_argument
    { ($2, $4) }
| TILDE value_label
    { ($2, mkvalu(T_pr $2)) }

list0_declaration:
| 
    { nil }
| list0_declaration declaration
    { econs $2 $1 }

declaration:
| pattern EQUAL valu
    { let (k, f) = $1 in
      (k, (f, $3)) }
| REC pattern EQUAL valu
    { let (k, f) = $2 in
      (k, (f, mkvalu(T_fix (k, $4)))) }

list0_param:
| 
    { nil }
| list0_param param
    { econs $2 $1 }

param:
| TILDE value_label
    { ($2, ($2, mktyp(F_x))) }
| TILDE value_label COLON pattern
    { ($2, $4) }
| TILDE LPAREN value_label COLON typ RPAREN
    { ($3, ($3, $5)) }
| TILDE LPAREN value_label COLON typ error
    { unclosed "(" 2 ")" 6 }

pattern:
| value_label COLON typ
    { ($1, $3) }
| value_label
    { ($1, mktyp(F_x)) }
| UNDERSCORE
    { (mkwild(), mktyp(F_x)) }
| LBRACE list0_field RBRACE
    { (mkpatid(), mkpat($2)) }
| LBRACE list0_field error
    { unclosed "{" 1 "}" 3 }

partial_arguments:
| LPAREN list1_argument RPAREN
    { $2 }
| LPAREN list1_argument error
    { unclosed "(" 1 ")" 3 }

valu:
| COLON typ
    { mkvalu(T_id $2) }
| valu DOT valu
    { mkvalu(T_comp ($1, $3)) }
| value_label
    { mkvalu(T_pr $1) }
| dule_label
    { mkvalu(T_pr $1) }
| LBRACE list0_field RBRACE
    { mkvalu(T_record $2) }
| LBRACE list0_field error
    { unclosed "{" 1 "}" 3 }
| valu DOT BACKQUOTE case_label
    { mkvalu(T_comp ($1, mkvalu(T_in $4))) }
| BACKQUOTE case_label
    { mkvalu(T_comp (mkvalu(T_record nil), mkvalu(T_in $2))) }
| LBRACKET list0_case RBRACKET
    { mkvalu(T_case $2) }
| LBRACKET list0_case error
    { unclosed "[" 1 "]" 3 }
| MAP embedding
    { mkvalu(T_map $2) }
| CON
    { mkvalu(T_con) }
| FOLD embedding
    { mkvalu(T_fold $2) }
| DE
    { mkvalu(T_de) }
| UNCON
    { mkvalu(T_uncon) }
| UNFOLD embedding
    { mkvalu(T_unfold $2) }
| UNDE
    { mkvalu(T_unde) }
| valu list1_argument
    { mkvalu(T_appl ($2, $1)) }
| valu TILDE
    { mkvalu(T_appl (nil, $1)) }
| MATCH valu WITH valu
    { mkvalu(T_appl (cons (AtIndex.it, $2) nil, $4)) }
| LET list0_declaration IN valu
    { mkvalu(let lift = $2 in
              let lt = vmap (fun (f, t) -> t) lift in
              let lif = bmap (fun (k, (f, t)) -> (k, f)) lift in
	      T_appl (lt, (mkvalu(T_curry (lif, $4))))) }
| FUN list0_param MINUSGREATER valu
    { mkvalu(T_curry ($2, $4)) }
| valu partial_arguments
    { mkvalu(T_pappl ($2, $1)) }
| IF valu THEN valu ELSE valu
    { let case = 
	  cons (AtIndex.tt, 
		mkvalu(T_curry (cons (AtIndex.it, 
				      (mkwild(), mktyp(F_x))) nil, $4)))
	 (cons (AtIndex.ff, 
		mkvalu(T_curry (cons (AtIndex.it, 
				      (mkwild(), mktyp(F_x))) nil, $6)))
	  nil)
        in
        mkvalu(T_appl (econs (AtIndex.it, $2) nil,
		       mkvalu(T_case case))) }
| ASSERT valu IN valu
    { mkvalu(T_assert ($2, $4)) }
| FAIL
    { mkvalu(T_fail) }
| INT
    { mkint($1) }
| LPAREN valu RPAREN
    { $2 }
| LPAREN valu error
    { unclosed "(" 1 ")" 3 }

list0_field_sp:
| 
    { nil }
| list1_field_sp
    { $1 }

list1_field_sp:
| field_sp
    { econs $1 nil }
| list1_field_sp SEMI field_sp
    { econs $3 $1 }

field_sp:
| dule_label COLON sp
    { ($1, $3) }
| dule_label
    { ($1, mksp(S_Ii (AtIndex.dule2sp $1))) }

list0_param_sp:
| 
    { nil }
| list0_param_sp param_sp
    { econs $2 $1 }

param_sp:
| TILDE field_sp
    { $2 }

list0_bb_item:
| 
    { nil }
| list0_bb_item bb_item
    { econs $2 $1 }

bb_item:
| TYPE type_label
    { ($2, Bb_type) }
| VALUE value_label COLON typ
    { ($2, Bb_value $4) }

sp:
| LBRACE list0_field_sp RBRACE
    { mksp(S_Aa $2) }
| LBRACE list0_field_sp error
    { unclosed "{" 1 "}" 3 }
| LBRACE LBRACE list0_field_sp RBRACE RBRACE
    { mksp(S_Cc $3) }
| LBRACE LBRACE list0_field_sp error
    { unclosed "{{" 1 "}}" 4 }
| list0_param_sp MINUSGREATER sp
    { mksp(S_Ee ($1, $3)) }
| SIG list0_bb_item END
    { mksp(S_Bb $2) }
| SIG list0_bb_item error
    { unclosed "sig" 1 "end" 3 }
| sp WITH dule
    { mksp(S_Ww ($3, $1)) }
| sp_label
    { mksp(S_Ii $1) }
| LPAREN sp RPAREN
    { $2 }
| LPAREN sp error
    { unclosed "(" 1 ")" 3 }

list0_field_dule:
| 
    { nil }
| list1_field_dule
    { $1 }

list1_field_dule:
| field_dule
    { econs $1 nil }
| list1_field_dule SEMI field_dule
    { econs $3 $1 }

field_dule:
| dule_label EQUAL dule
    { ($1, $3) }
| dule_label
    { ($1, mkdule(M_Pr $1)) }

list0_base_item:
| 
    { nil }
| list0_base_item base_item
    { econs $2 $1 }

base_item:
| TYPE type_label EQUAL typ
    { ($2, Base_type $4) }
| VALUE value_label EQUAL valu
    { ($2, Base_value $4) }
| VALUE REC value_label EQUAL valu
    { ($3, Base_value (mkvalu(T_fix ($3, $5)))) }

def_dule:
| dule_label EQUAL dule
    { ($1, $3) }

def_sp:
| sp_label EQUAL sp
    { ($1, $3) }

one_dule:
| def_dule
    { econs $1 nil }
| one_dule AND def_dule
    { econs $3 $1 }

one_sp:
| def_sp
    { econs $1 nil }
| one_sp AND def_sp
    { econs $3 $1 }

list0_link_item:
| 
    { [] }
| list0_link_item link_item
    { $2 :: $1 }

link_item:
| def_dule
    { let (i, m) = $1 in Link_Dule (i, m) }
| MODULE def_dule
    { let (i, m) = $2 in Link_Dule (i, m) }
| MODULE IND one_dule
    { Link_Ind_Dule $3 }
| MODULE COIND one_dule
    { Link_CoInd_Dule $3 }
| SPEC def_sp
    { let (i, p) = $2 in Link_Sp (i, p) }
| SPEC REC one_sp
    { Link_Rec_Sp $3 }
| LIBRARY def_dule
    { let (i, m) = $2 in Link_Lib (i, m) }
| LIBRARY IND one_dule
    { Link_Ind_Lib $3 }
| LIBRARY COIND one_dule
    { Link_CoInd_Lib $3 }

dule:
| COLON LBRACE LBRACE list0_field_sp RBRACE RBRACE
    { mkdule(M_Id $4) }
| COLON LBRACE LBRACE sp error
    { unclosed ": {{" 2 "}}" 5 }
| dule DOT dule
    { mkdule(M_Comp ($1, $3)) }
| dule_label
    { mkdule(M_Pr $1) }
| LBRACE list0_field_dule RBRACE
    { mkdule(M_Accord $2) }
| LBRACE list0_field_dule error
    { unclosed "{" 1 "}" 3 }
| LBRACE LBRACE list0_field_dule RBRACE RBRACE
    { mkdule(M_Concord $3) }
| LBRACE LBRACE list0_field_dule error
    { unclosed "{{" 1 "}}" 4 }
| COLONCOLON sp dule
    { mkdule(M_Spec ($3, $2)) }
| STRUCT list0_base_item END
    { mkdule(M_Base $2) }
| STRUCT list0_base_item error
    { unclosed "struct" 1 "end" 3 }
| dule BAR dule
    { mkdule(M_Inst ($1, $3)) }
| dule WITH dule
    { mkdule(M_With ($3, $1)) }
| dule COLONGREATER sp
    { mkdule(M_Trim ($1, $3)) }
| LINK list0_link_item END
    { mkdule(M_Link $2) }
| LINK list0_link_item error
    { unclosed "link" 1 "end" 3 }
| LOAD dule_label
    { mkdule(M_Load $2) }
| LPAREN dule RPAREN
    { $2 }
| LPAREN dule error
    { unclosed "(" 1 ")" 3 }

start:
| list0_link_item EOF
    { mkstart($1) }

core:
| valu EOF
    { $1 }

%%





