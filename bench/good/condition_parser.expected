%{

  open Condition

%}
%start condition_start
%token <string> STRING
%token RPAR
%token LPAR
%token <string> INT
%token <string> IDENT
%token EXISTS
%token EOF
%token DOLLAR_TYPE
%token DOLLAR_KEY
%token <string> COMP
%token COLON
%token OR
%token AND
%token NOT
%left OR 
%left AND 
%left NOT 
%type <Condition.condition> condition_start
%%

condition_start:
| condition EOF
    { $1 }

condition:
| condition OR condition
    { Or($1,$3) }
| condition AND condition
    { And($1,$3) }
| NOT condition
    { Not($2) }
| LPAR condition RPAR
    { $2 }
| atom
    { $1 }

atom:
| cte COLON STRING
    { let s = Latex_accents.normalize true $3 in
    (*i
      Printf.printf "regexp = %s\n" s;
      i*)
    Match($1, Str.regexp_case_fold s) }
| cte COMP cte
    { Comp($1,$2,$3) }
| EXISTS IDENT
    { Exists(String.uppercase $2) }

cte:
| IDENT
    { Field(String.uppercase $1) }
| INT
    { Cte($1) }
| STRING
    { Cte($1) }
| DOLLAR_KEY
    { Key }
| DOLLAR_TYPE
    { Entrytype }

%%



