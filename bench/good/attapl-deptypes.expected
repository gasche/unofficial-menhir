File "attapl-deptypes.mly", line 47, characters 28-38:
Warning: the token APOSTROPHE is unused.
File "attapl-deptypes.mly", line 49, characters 28-33:
Warning: the token BARGT is unused.
File "attapl-deptypes.mly", line 50, characters 28-37:
Warning: the token BARRCURLY is unused.
File "attapl-deptypes.mly", line 51, characters 28-38:
Warning: the token BARRSQUARE is unused.
File "attapl-deptypes.mly", line 53, characters 28-38:
Warning: the token COLONCOLON is unused.
File "attapl-deptypes.mly", line 54, characters 28-35:
Warning: the token COLONEQ is unused.
File "attapl-deptypes.mly", line 55, characters 28-37:
Warning: the token COLONHASH is unused.
File "attapl-deptypes.mly", line 57, characters 28-34:
Warning: the token DARROW is unused.
File "attapl-deptypes.mly", line 59, characters 28-35:
Warning: the token DDARROW is unused.
File "attapl-deptypes.mly", line 48, characters 28-34:
Warning: the token DQUOTE is unused.
File "attapl-deptypes.mly", line 63, characters 28-32:
Warning: the token EQEQ is unused.
File "attapl-deptypes.mly", line 64, characters 28-30:
Warning: the token GT is unused.
File "attapl-deptypes.mly", line 65, characters 28-32:
Warning: the token HASH is unused.
File "attapl-deptypes.mly", line 66, characters 28-34:
Warning: the token LCURLY is unused.
File "attapl-deptypes.mly", line 67, characters 28-37:
Warning: the token LCURLYBAR is unused.
File "attapl-deptypes.mly", line 68, characters 28-37:
Warning: the token LEFTARROW is unused.
File "attapl-deptypes.mly", line 71, characters 28-35:
Warning: the token LSQUARE is unused.
File "attapl-deptypes.mly", line 72, characters 28-38:
Warning: the token LSQUAREBAR is unused.
File "attapl-deptypes.mly", line 73, characters 28-30:
Warning: the token LT is unused.
File "attapl-deptypes.mly", line 70, characters 28-34:
Warning: the token Normal is unused.
File "attapl-deptypes.mly", line 74, characters 28-34:
Warning: the token RCURLY is unused.
File "attapl-deptypes.mly", line 76, characters 28-35:
Warning: the token RSQUARE is unused.
File "attapl-deptypes.mly", line 78, characters 28-33:
Warning: the token SLASH is unused.
File "attapl-deptypes.mly", line 80, characters 28-36:
Warning: the token TRIANGLE is unused.
File "attapl-deptypes.mly", line 30, characters 28-32:
Warning: the token TYPE is unused.
File "attapl-deptypes.mly", line 82, characters 28-32:
Warning: the token VBAR is unused.
%{
open Support.Error
open Support.Pervasive
open Syntax
let rec addbinders tyT l = match l with
   [] -> tyT
 | (tyX,k)::rest -> tyT 
%}
%start toplevel
%token <Support.Error.info> VBAR
%token <Support.Error.info> USCORE
%token <string Support.Error.withinfo> UCID
%token <Support.Error.info> TYPE
%token <Support.Error.info> TWO
%token <Support.Error.info> TRIANGLE
%token <string Support.Error.withinfo> STRINGV
%token <Support.Error.info> STAR
%token <Support.Error.info> SLASH
%token <Support.Error.info> SIGMA
%token <Support.Error.info> SEMI
%token <Support.Error.info> RSQUARE
%token <Support.Error.info> RPAREN
%token <Support.Error.info> RCURLY
%token <Support.Error.info> PROP
%token <Support.Error.info> PRF
%token <Support.Error.info> PI
%token <Support.Error.info> ONE
%token <Support.Error.info> Normal
%token <Support.Error.info> NORMAL
%token <Support.Error.info> LT
%token <Support.Error.info> LSQUAREBAR
%token <Support.Error.info> LSQUARE
%token <Support.Error.info> LPAREN
%token <Support.Error.info> LEFTARROW
%token <Support.Error.info> LCURLYBAR
%token <Support.Error.info> LCURLY
%token <string Support.Error.withinfo> LCID
%token <Support.Error.info> LAMBDA
%token <Support.Error.info> IMPORT
%token <Support.Error.info> HASH
%token <Support.Error.info> GT
%token <Support.Error.info> EQEQ
%token <Support.Error.info> EQ
%token <Support.Error.info> EOF
%token <Support.Error.info> DQUOTE
%token <Support.Error.info> DOT
%token <Support.Error.info> DDARROW
%token <Support.Error.info> DARROW
%token <Support.Error.info> COLONHASH
%token <Support.Error.info> COLONEQ
%token <Support.Error.info> COLONCOLON
%token <Support.Error.info> COLON
%token <Support.Error.info> BARRSQUARE
%token <Support.Error.info> BARRCURLY
%token <Support.Error.info> BARGT
%token <Support.Error.info> ARROW
%token <Support.Error.info> APOSTROPHE
%token <Support.Error.info> ALL
%token <Support.Error.info> COMMA
%right COMMA 
%type < Syntax.context -> (Syntax.command list * Syntax.context) > toplevel
%%

toplevel:
| EOF
    { fun ctx -> [],ctx }
| Command SEMI toplevel
    { fun ctx ->
          let cmd,ctx = $1 ctx in
          let cmds,ctx = $3 ctx in
          cmd::cmds,ctx }

Command:
| IMPORT STRINGV
    { fun ctx -> (Import($2.v)),ctx }
| Term
    { fun ctx -> (let t = $1 ctx in Whred(tmInfo t,t)),ctx }
| LPAREN NORMAL Term RPAREN
    { fun ctx -> (let t = $3 ctx in Eval(tmInfo t,t)),ctx }
| UCID TyBinder
    { fun ctx -> ((Bind($1.i, $1.v, $2 ctx)), addname ctx $1.v) }
| LCID Binder
    { fun ctx -> ((Bind($1.i,$1.v,$2 ctx)), addname ctx $1.v) }

Binder:
| COLON Type
    { fun ctx -> VarBind ($2 ctx)}
| EQ Term
    { fun ctx -> TmAbbBind($2 ctx, None) }
| EQ Term COLON Type
    {fun ctx -> TmAbbBind($2 ctx, Some($4 ctx)) }

Kind:
| PI LCID COLON Type DOT Kind
    {fun ctx -> let ctx1 = addname ctx $2.v in
          KnPi($2.v,$4 ctx,$6 ctx1)}
| ArrowKind
    {$1}

ArrowKind:
| AppType ARROW ArrowKind
    { fun ctx -> KnPi("_",$1 ctx, $3 ctx) }
| AKind
    {$1 }

AKind:
| STAR
    { fun ctx -> KnStar }
| LPAREN Kind RPAREN
    { $2 }

Type:
| AppType
    { $1 }
| AppType ARROW Type
    { fun ctx ->
          let ctx1 = addname ctx "_" in
          TyPi("_",$1 ctx,$3 ctx1) }
| PI LCID COLON Type DOT Type
    { fun ctx ->
          let ctx1 = addname ctx $2.v in
          TyPi($2.v,$4 ctx,$6 ctx1) }
| SIGMA LCID COLON Type DOT Type
    { fun ctx ->
          let ctx1 = addname ctx $2.v in
          TySigma($2.v,$4 ctx,$6 ctx1) }

AppType:
| AppType ATerm
    { fun ctx -> TyApp($1 ctx,$2 ctx) }
| AType
    { $1 }

AType:
| LPAREN Type RPAREN
    { $2 }
| PROP
    {fun ctx -> TyProp}
| PRF LPAREN Term RPAREN
    {fun ctx -> TyPrf($3 ctx)}
| UCID
    { fun ctx ->
          if isnamebound ctx $1.v then
            TyVar(name2index $1.i ctx $1.v, ctxlength ctx)
          else 
            TyId($1.v) }

Term:
| AppTerm
    { $1 }
| LAMBDA LCID COLON Type DOT Term
    { fun ctx ->
          let ctx1 = addname ctx $2.v in
          TmAbs($1, $2.v, $4 ctx, $6 ctx1) }
| ALL LCID COLON Type DOT Term
    { fun ctx ->
          let ctx1 = addname ctx $2.v in
          TmAll($1, $2.v, $4 ctx, $6 ctx1) }
| LAMBDA USCORE COLON Type DOT Term
    { fun ctx ->
          let ctx1 = addname ctx "_" in
          TmAbs($1, "_", $4 ctx, $6 ctx1) }

PathTerm:
| PathTerm DOT TWO
    { fun ctx ->
          TmProj2($2, $1 ctx) }
| PathTerm DOT ONE
    { fun ctx ->
          TmProj1($2, $1 ctx) }
| ATerm
    { $1 }

AppTerm:
| PathTerm
    {$1}
| AppTerm ATerm
    { fun ctx ->
          let e1 = $1 ctx in
          let e2 = $2 ctx in
          TmApp(tmInfo e1,e1,e2) }

ATerm:
| LPAREN Term RPAREN
    { $2 }
| LPAREN Term COMMA TermList COLON Type RPAREN
    { fun ctx -> 
          TmList($1,$2 ctx :: $4 ctx ,$6 ctx)}
| LCID
    { fun ctx ->
          TmVar($1.i, name2index $1.i ctx $1.v, ctxlength ctx) }

TermList:
| Term
    { fun ctx -> [$1 ctx] }
| Term COMMA TermList
    { fun ctx -> $1 ctx :: $3 ctx}

TyBinder:
| COLON Kind
    { fun ctx -> TyVarBind($2 ctx) }
| EQ Type
    { fun ctx -> TyAbbBind($2 ctx, None) }

%%



