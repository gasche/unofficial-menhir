%{

  open Symbols
  open C_declare_operator

%}
%start signature
%token SEMICOLON
%token KW_UNARY
%token KW_PREFIX
%token KW_POSTFIX
%token KW_INFIX
%token KW_CONSTANT
%token KW_C
%token KW_BINARY
%token KW_AC
%token <string> INT
%token <string> IDENT
%token EOF
%token COMMA
%token COLON

%type <(string list * int * Symbols.fix_type * C_declare_operator.symbol_type) list> signature
%%

signature:
| EOF
    { [] }
| decl SEMICOLON signature
    { $1::$3 }

decl:
| op_list COLON fix arity
    { let t,a = $4
    in
      if $3=INFIX & a<>2
      then Errors.semantical_error "Infix symbols must be binary"
      else ($1,a,$3,t)
  }

fix:
| KW_PREFIX
    { PREFIX }
| KW_INFIX
    { INFIX  }
| KW_POSTFIX
    { POSTFIX }
| 
    { DEFAULT }

arity:
| KW_C
    { (C,2) }
| KW_AC
    { (AC,2) }
| KW_CONSTANT
    { (FREE,0) }
| KW_UNARY
    { (FREE,1) }
| KW_BINARY
    { (FREE,2) }
| INT
    { (FREE,int_of_string $1) }

op_list:
| ident
    { [$1] }
| ident COMMA op_list
    { $1::$3 }

ident:
| IDENT
    { $1 }
| INT
    { $1 }

%%



