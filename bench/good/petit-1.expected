Warning: you are using the standard library and/or the %inline keyword. We
recommend switching on --infer in order to avoid obscure type error messages.
%{

  open MIPSOps
  open LPP
  open Primitive

%}
%start program
%token WRITELN
%token WRITE
%token WHILE
%token VAR
%token SEMICOLON
%token RPAREN
%token READLN
%token RBRACKET
%token PROGRAM
%token PROCEDURE
%token OF
%token NEW
%token LPAREN
%token INTEGER
%token <int32> INTCONST
%token IF
%token <string Location.t> ID
%token FUNCTION
%token END
%token DOT
%token DO
%token COMMA
%token COLONEQ
%token COLON
%token BOOLEAN
%token <bool> BOOLCONST
%token BEGIN
%token ARRAY
%token OR
%token AND
%token NOT
%token NE
%token LT
%token LE
%token GT
%token GE
%token EQ
%token PLUS
%token MINUS
%token TIMES
%token SLASH
%token LBRACKET
%token THEN
%token ELSE
%left OR 
%left AND 
%nonassoc NOT 
%nonassoc NE LT LE GT GE EQ 
%left PLUS MINUS 
%left TIMES SLASH 
%nonassoc unary_minus 
%nonassoc LBRACKET 
%nonassoc THEN 
%nonassoc ELSE 
%type <LPP.program> program
%%

typ:
| INTEGER
    { TypInt }
| BOOLEAN
    { TypBool }
| ARRAY OF t = typ
    { TypArray t }

expression:
| e = raw_expression
    { Location.make $startpos $endpos e }
| LPAREN e = expression RPAREN
    { e }

raw_expression:
| i = INTCONST
    { EConst (ConstInt i) }
| b = BOOLCONST
    { EConst (ConstBool b) }
| id = ID
    { EGetVar id }
| MINUS e = expression %prec unary_minus
    { EUnOp (UOpNeg, e) }
| e1 = expression PLUS e2 = expression
    {let op =
  ( OpAdd )
in
 EBinOp (op, e1, e2) }
| e1 = expression MINUS e2 = expression
    {let op =
  ( OpSub )
in
 EBinOp (op, e1, e2) }
| e1 = expression TIMES e2 = expression
    {let op =
  ( OpMul )
in
 EBinOp (op, e1, e2) }
| e1 = expression SLASH e2 = expression
    {let op =
  ( OpDiv )
in
 EBinOp (op, e1, e2) }
| e1 = expression LT e2 = expression
    {let op =
  ( OpLt )
in
 EBinOp (op, e1, e2) }
| e1 = expression LE e2 = expression
    {let op =
  ( OpLe )
in
 EBinOp (op, e1, e2) }
| e1 = expression GT e2 = expression
    {let op =
  ( OpGt )
in
 EBinOp (op, e1, e2) }
| e1 = expression GE e2 = expression
    {let op =
  ( OpGe )
in
 EBinOp (op, e1, e2) }
| e1 = expression EQ e2 = expression
    {let op =
  ( OpEq )
in
 EBinOp (op, e1, e2) }
| e1 = expression NE e2 = expression
    {let op =
  ( OpNe )
in
 EBinOp (op, e1, e2) }
| c = callee LPAREN xs0 = loption_separated_nonempty_list_COMMA_expression__ RPAREN
    {let actuals =
  let xs = xs0 in
  ( xs )
in
 EFunCall (Location.make $startpos(c) $endpos(c) c, actuals) }
| a = expression LBRACKET i = expression RBRACKET
    { EArrayGet (a, i) }
| NEW ARRAY OF t = typ LBRACKET e = expression RBRACKET
    { EArrayAlloc (t, e) }

condition:
| e = expression
    { CExpression e }
| c = nontrivial_condition
    { c }

lvalue:
| id = ID
    { fun e -> ISetVar (id, e) }
| a = expression LBRACKET i = expression RBRACKET
    { fun e -> IArraySet (a, i, e) }

procedure:
| FUNCTION f = ID LPAREN formals = separated_bindings RPAREN COLON t0 = typ SEMICOLON locals = variables body = block SEMICOLON
    {let result =
  let t = t0 in
  ( Some t )
in

      f, {
        formals = formals;
        result = result;
        locals = locals;
        body = body
      }
    }
| PROCEDURE f = ID LPAREN formals = separated_bindings RPAREN SEMICOLON locals = variables body = block SEMICOLON
    {let result =
  ( None )
in

      f, {
        formals = formals;
        result = result;
        locals = locals;
        body = body
      }
    }

separated_bindings:
| xs0 = loption_separated_nonempty_list_SEMICOLON_binding__
    {let bindings =
  let xs = xs0 in
  ( xs )
in
 List.flatten bindings }

terminated_bindings:
| bindings = nonempty_list_terminated_binding_SEMICOLON__
    { List.flatten bindings }

variables:
| vars = loption_preceded_VAR_terminated_bindings__
    { vars }

program:
| PROGRAM globals = variables defs = list_procedure_ main = block DOT
    {{
       globals = globals;
       defs = defs;
       main = main
    }}

loption_separated_nonempty_list_SEMICOLON_instruction__:
| 
    { [] }
| x = separated_nonempty_list_SEMICOLON_instruction_
    { x }

loption_separated_nonempty_list_SEMICOLON_binding__:
| 
    { [] }
| x = separated_nonempty_list_SEMICOLON_binding_
    { x }

loption_separated_nonempty_list_COMMA_expression__:
| 
    { [] }
| x = separated_nonempty_list_COMMA_expression_
    { x }

loption_preceded_VAR_terminated_bindings__:
| 
    { [] }
| VAR x0 = terminated_bindings
    {let x =
  let x = x0 in
  ( x )
in
 x }

list_procedure_:
| 
    { [] }
| x = procedure xs = list_procedure_
    { x :: xs }

nonempty_list_terminated_binding_SEMICOLON__:
| x0 = binding SEMICOLON
    {let x =
  let x = x0 in
  ( x )
in
 [ x ] }
| x0 = binding SEMICOLON xs = nonempty_list_terminated_binding_SEMICOLON__
    {let x =
  let x = x0 in
  ( x )
in
 x :: xs }

separated_nonempty_list_SEMICOLON_instruction_:
| x = instruction
    { [ x ] }
| x = instruction SEMICOLON xs = separated_nonempty_list_SEMICOLON_instruction_
    { x :: xs }

separated_nonempty_list_SEMICOLON_binding_:
| x = binding
    { [ x ] }
| x = binding SEMICOLON xs = separated_nonempty_list_SEMICOLON_binding_
    { x :: xs }

separated_nonempty_list_COMMA_expression_:
| x = expression
    { [ x ] }
| x = expression COMMA xs = separated_nonempty_list_COMMA_expression_
    { x :: xs }

separated_nonempty_list_COMMA_ID_:
| x = ID
    { [ x ] }
| x = ID COMMA xs = separated_nonempty_list_COMMA_ID_
    { x :: xs }

nontrivial_condition:
| NOT c = condition
    { CNot c }
| c1 = condition AND c2 = condition
    { CAnd (c1, c2) }
| c1 = condition OR c2 = condition
    { COr (c1, c2) }
| LPAREN c = nontrivial_condition RPAREN
    { c }

instruction:
| c = callee LPAREN xs0 = loption_separated_nonempty_list_COMMA_expression__ RPAREN
    {let actuals =
  let xs = xs0 in
  ( xs )
in
 IProcCall (Location.make $startpos(c) $endpos(c) c, actuals) }
| lvalue = lvalue COLONEQ e = expression
    { (lvalue : LPP.expression -> LPP.instruction) e }
| READLN LPAREN lvalue = lvalue RPAREN
    { let callee = Location.make $startpos($1) $endpos($1) (CPrimitiveFunction Readln) in
      let e = Location.make $startpos $endpos (EFunCall (callee, [])) in
      (lvalue : LPP.expression -> LPP.instruction) e }
| IF c = condition THEN b = instruction_or_block
    { IIf (c, b, ISeq []) }
| IF c = condition THEN b1 = instruction_or_block ELSE b2 = instruction_or_block
    { IIf (c, b1, b2) }
| WHILE c = condition DO b = instruction_or_block
    { IWhile (c, b) }

block:
| BEGIN xs0 = loption_separated_nonempty_list_SEMICOLON_instruction__ END
    {let is =
  let xs = xs0 in
  ( xs )
in
 ISeq is }

instruction_or_block:
| i = instruction
    { i }
| b = block
    { b }

callee:
| WRITE
    { CPrimitiveFunction Write }
| WRITELN
    { CPrimitiveFunction Writeln }
| id = ID
    { CUserFunction (Location.content id)}

binding:
| ids = separated_nonempty_list_COMMA_ID_ COLON t = typ
    { List.map (fun id -> (id, t)) ids }

%%



