%{
open Records
%}
%start expression
%token SND
%token SEMI
%token RPAREN
%token RBRACE
%token <string> OP
%token LPAREN
%token LET
%token LBRACE
%token <int> INT
%token IN
%token <string> IDENT
%token FUN
%token FST
%token EQUAL
%token EOF
%token DOT
%token AT
%token ARROW
%token COMMA
%right prec_fun 
%right prec_let 
%right COMMA 
%type <Records.expression> expression
%%

expression:
| expr EOF
    { $1 }

expr:
| application
    { $1 }
| expr COMMA expr
    { Paire($1, $3) }
| FUN IDENT ARROW expr %prec prec_fun
    { Fun($2, $4) }
| LET IDENT EQUAL expr IN expr %prec prec_let
    { Let($2, $4, $6) }

application:
| application closed_expr
    { App($1, $2) }
| FST closed_expr
    { Fst $2 }
| SND closed_expr
    { Snd $2 }
| application AT LBRACE IDENT EQUAL expr RBRACE
    { App (Exten $4, Paire ($1, $6)) }
| closed_expr
    { $1 }

closed_expr:
| IDENT
    { Var $1 }
| OP
    { Op $1 }
| INT
    { Const $1 }
| LPAREN expr RPAREN
    { $2 }
| LBRACE entries RBRACE
    { Enreg $2 }
| closed_expr DOT IDENT
    { App (Proj $3, $1) }

entries:
| entry
    { [ $1 ] }
| entries SEMI entry
    { $3 :: $1 }

entry:
| IDENT EQUAL application
    { $1, $3 }

%%



