Warning: you are using the standard library and/or the %inline keyword. We
recommend switching on --infer in order to avoid obscure type error messages.
%{
%}
%start main
%token WITH
%token VisibleString
%token VideotexString
%token <string> UpperField
%token <string> Upper
%token UniversalString
%token UTF8String
%token UTCTime
%token UNIVERSAL
%token UNIQUE
%token UNION
%token TeletexString
%token TYPE_IDENTIFIER
%token TRUE
%token TAGS
%token T61String
%token SemiColon
%token SYNTAX
%token STRING
%token SIZE
%token SET
%token SEQUENCE
%token RightParen
%token RightDoubleBracket
%token RightBracket
%token RightBrace
%token <string> RealNumber
%token RELATIVE_OID
%token REAL
%token PrintableString
%token PRIVATE
%token PRESENT
%token PLUS_INFINITY
%token PDV
%token PATTERN
%token ObjectDescriptor
%token OPTIONAL
%token OF
%token OCTET
%token OBJECT
%token NumericString
%token <string> Number
%token NULL
%token Middle
%token MINUS_INFINITY
%token MIN
%token MAX
%token <string> LowerField
%token <string> Lower
%token LessThan
%token LeftParen
%token LeftDoubleBracket
%token LeftBracket
%token LeftBrace
%token ISO646String
%token INTERSECTION
%token INTEGER
%token INSTANCE
%token INCLUDES
%token IMPORTS
%token IMPLIED
%token IMPLICIT
%token IDENTIFIER
%token IA5String
%token Hyphen
%token <string> Hstring
%token GraphicString
%token GeneralizedTime
%token GeneralString
%token FROM
%token FALSE
%token Ellipsis
%token EXTERNAL
%token EXTENSIBILITY
%token EXPORTS
%token EXPLICIT
%token EXCEPT
%token EOF
%token ENUMERATED
%token END
%token ENCODED
%token EMBEDDED
%token DoubleDot
%token Dot
%token <string> DefinedSyntax
%token DEFINITIONS
%token DEFAULT
%token <string> Cstring
%token Comma
%token Colon
%token Circumflex
%token CONTAINING
%token CONSTRAINED
%token COMPONENTS
%token COMPONENT
%token CLASS
%token CHOICE
%token CHARACTER
%token <string> Bstring
%token Bang
%token BY
%token BOOLEAN
%token BMPString
%token BIT
%token BEGIN
%token AtDot
%token At
%token Assignment
%token AUTOMATIC
%token APPLICATION
%token ALL
%token ABSTRACT_SYNTAX
%token ABSENT

%type <unit> main
%%

main:
| moduleDefinition EOF
    {}

moduleDefinition:
| moduleIdentifier DEFINITIONS tagDefault extensionDefault Assignment BEGIN moduleBody END
    {}

moduleIdentifier:
| Upper definitiveIdentifier
    {}

definitiveIdentifier:
| LeftBrace definitiveObjIdComponentList RightBrace
    {}
| 
    {let _1 =
  ()
in
}

definitiveObjIdComponentList:
| definitiveObjIdComponent
    {}
| definitiveObjIdComponent definitiveObjIdComponentList
    {}

definitiveObjIdComponent:
| nameForm
    {}
| definitiveNumberForm
    {}
| definitiveNameAndNumberForm
    {}

definitiveNumberForm:
| Number
    {}

definitiveNameAndNumberForm:
| Lower LeftParen definitiveNumberForm RightParen
    {}

tagDefault:
| EXPLICIT TAGS
    {}
| IMPLICIT TAGS
    {}
| AUTOMATIC TAGS
    {}
| 
    {let _1 =
  ()
in
}

extensionDefault:
| EXTENSIBILITY IMPLIED
    {}
| 
    {let _1 =
  ()
in
}

moduleBody:
| exports imports assignmentList
    {}
| 
    {let _1 =
  ()
in
}

exports:
| EXPORTS symbolsExported SemiColon
    {}
| EXPORTS ALL SemiColon
    {}
| 
    {let _1 =
  ()
in
}

symbolsExported:
| symbolList
    {}
| 
    {let _1 =
  ()
in
}

imports:
| IMPORTS symbolsImported SemiColon
    {}
| 
    {let _1 =
  ()
in
}

symbolsImported:
| symbolsFromModuleList
    {}
| 
    {let _1 =
  ()
in
}

symbolsFromModuleList:
| symbolsFromModule
    {}
| symbolsFromModuleList symbolsFromModule
    {}

symbolsFromModule:
| symbolList FROM globalModuleReference
    {}

globalModuleReference:
| Upper assignedIdentifier
    {}

assignedIdentifier:
| objectIdentifierValue
    {}
| definedValue
    {}
| 
    {let _1 =
  ()
in
}

symbolList:
| symbol
    {}
| symbolList Comma symbol
    {}

symbol:
| reference
    {}
| parameterizedReference
    {}

reference:
| Upper
    {}
| Lower
    {}

assignmentList:
| assignment
    {}
| assignmentList assignment
    {}

assignment:
| typeAssignment
    {}
| valueAssignment
    {}
| valueSetTypeAssignment
    {}
| objectClassAssignment
    {}
| objectAssignment
    {}
| objectSetAssignment
    {}
| parameterizedAssignment
    {}

definedType:
| externalTypeReference
    {}
| Upper
    {}
| parameterizedType
    {}
| parameterizedValueSetType
    {}

externalTypeReference:
| Upper Dot Upper
    {}

definedValue:
| externalValueReference
    {}
| Lower
    {}
| parameterizedValue
    {}

externalValueReference:
| Upper Dot Lower
    {}

typeAssignment:
| Upper Assignment type_x
    {}

valueAssignment:
| Lower type_x Assignment value
    {}

valueSetTypeAssignment:
| Upper type_x Assignment valueSet
    {}

valueSet:
| LeftBrace elementSetSpecs RightBrace
    {}

type_x:
| builtinType
    {}
| referencedType
    {}
| constrainedType
    {}

builtinType:
| bitStringType
    {}
| booleanType
    {}
| characterStringType
    {}
| choiceType
    {}
| embeddedPDVType
    {}
| enumeratedType
    {}
| externalType
    {}
| instanceOfType
    {}
| integerType
    {}
| nullType
    {}
| objectClassFieldType
    {}
| objectIdentifierType
    {}
| octetStringType
    {}
| realType
    {}
| relativeOIDType
    {}
| sequenceType
    {}
| sequenceOfType
    {}
| setType
    {}
| setOfType
    {}
| taggedType
    {}

namedType:
| Lower type_x
    {}

referencedType:
| definedType
    {}
| usefulType
    {}
| selectionType
    {}
| typeFromObject
    {}
| valueSetFromObjects
    {}

value:
| builtinValue
    {}
| referencedValue
    {}
| objectClassFieldValue
    {}

builtinValue:
| bitStringValue
    {}
| booleanValue
    {}
| characterStringValue
    {}
| choiceValue
    {}
| embeddedPDVValue
    {}
| enumeratedValue
    {}
| externalValue
    {}
| integerValue
    {}
| nullValue
    {}
| objectIdentifierValue
    {}
| octetStringValue
    {}
| realValue
    {}
| relativeOIDValue
    {}
| sequenceValue
    {}
| sequenceOfValue
    {}
| setValue
    {}
| setOfValue
    {}

referencedValue:
| definedValue
    {}
| valueFromObject
    {}

namedValue:
| Lower value
    {}

booleanType:
| BOOLEAN
    {}

booleanValue:
| TRUE
    {}
| FALSE
    {}

integerType:
| INTEGER
    {}
| INTEGER LeftBrace namedNumberList RightBrace
    {}

namedNumberList:
| namedNumber
    {}
| namedNumberList Comma namedNumber
    {}

namedNumber:
| Lower LeftParen signedNumber RightParen
    {}
| Lower LeftParen definedValue RightParen
    {}

signedNumber:
| Number
    {}
| Hyphen Number
    {}

integerValue:
| signedNumber
    {}
| Lower
    {}

enumeratedType:
| ENUMERATED LeftBrace enumerations RightBrace
    {}

enumerations:
| rootEnumeration
    {}
| rootEnumeration Comma Ellipsis exceptionSpec
    {}
| rootEnumeration Comma Ellipsis exceptionSpec Comma additionalEnumeration
    {}

rootEnumeration:
| enumeration
    {}

additionalEnumeration:
| enumeration
    {}

enumeration:
| enumerationItem
    {}
| enumerationItem Comma enumeration
    {}

enumerationItem:
| Lower
    {}
| namedNumber
    {}

enumeratedValue:
| Lower
    {}

realType:
| REAL
    {}

realValue:
| numericRealValue
    {}
| specialRealValue
    {}

specialRealValue:
| PLUS_INFINITY
    {}
| MINUS_INFINITY
    {}

octetStringType:
| OCTET STRING
    {}

sequenceType:
| SEQUENCE LeftBrace RightBrace
    {}
| SEQUENCE LeftBrace extensionAndException optionalExtensionMarker RightBrace
    {}
| SEQUENCE LeftBrace componentTypeLists RightBrace
    {}

optionalExtensionMarker:
| Comma Ellipsis
    {}
| 
    {let _1 =
  ()
in
}

versionNumber:
| 
    {let _1 =
  ()
in
}
| Number Colon
    {}

sequenceValue:
| LeftBrace componentValueList RightBrace
    {}
| LeftBrace RightBrace
    {}

sequenceOfType:
| SEQUENCE OF type_x
    {}
| SEQUENCE OF namedType
    {}

setOfType:
| SET OF type_x
    {}
| SET OF namedType
    {}

optionalGroup:
| LeftBracket nonempty_list_tokenOrGroupSpec_ RightBrace
    {}

option_withSyntaxSpec_:
| 
    { None }
| x = withSyntaxSpec
    { Some x }

option_valueSetOptionalitySpec_:
| 
    { None }
| x = valueSetOptionalitySpec
    { Some x }

option_valueOptionalitySpec_:
| 
    { None }
| x = valueOptionalitySpec
    { Some x }

option_typeOptionalitySpec_:
| 
    { None }
| x = typeOptionalitySpec
    { Some x }

option_objectSetOptionalitySpec_:
| 
    { None }
| x = objectSetOptionalitySpec
    { Some x }

option_objectOptionalitySpec_:
| 
    { None }
| x = objectOptionalitySpec
    { Some x }

option_UNIQUE_:
| 
    { None }
| x = UNIQUE
    { Some x }

separated_nonempty_list_Dot_primitiveFieldName_:
| x = primitiveFieldName
    { [ x ] }
| x = primitiveFieldName Dot xs = separated_nonempty_list_Dot_primitiveFieldName_
    { x :: xs }

separated_nonempty_list_Dot_Lower_:
| x = Lower
    { [ x ] }
| x = Lower Dot xs = separated_nonempty_list_Dot_Lower_
    { x :: xs }

separated_nonempty_list_Comma_userDefinedConstraintParameter_:
| x = userDefinedConstraintParameter
    { [ x ] }
| x = userDefinedConstraintParameter Comma xs = separated_nonempty_list_Comma_userDefinedConstraintParameter_
    { x :: xs }

numericRealValue:
| RealNumber
    {}
| Hyphen RealNumber
    {}
| sequenceValue
    {}

bitStringType:
| BIT STRING
    {}
| BIT STRING LeftBrace namedBitList RightBrace
    {}

namedBitList:
| namedBit
    {}
| namedBitList Comma namedBit
    {}

namedBit:
| Lower LeftParen Number RightParen
    {}
| Lower LeftParen definedValue RightParen
    {}

bitStringValue:
| Bstring
    {}
| Hstring
    {}
| LeftBrace identifierList RightBrace
    {}
| LeftBrace RightBrace
    {}
| CONTAINING value
    {}

identifierList:
| Lower
    {}
| identifierList Comma Lower
    {}

octetStringValue:
| Bstring
    {}
| Hstring
    {}
| CONTAINING value
    {}

nullType:
| NULL
    {}

nullValue:
| NULL
    {}

extensionAndException:
| Ellipsis
    {}
| Ellipsis exceptionSpec
    {}

componentTypeLists:
| rootComponentTypeList
    {}
| rootComponentTypeList Comma extensionAndException extensionAdditions optionalExtensionMarker
    {}
| rootComponentTypeList Comma extensionAndException extensionAdditions extensionEndMarker Comma rootComponentTypeList
    {}
| extensionAndException extensionAdditions extensionEndMarker Comma rootComponentTypeList
    {}
| extensionAndException extensionAdditions optionalExtensionMarker
    {}

rootComponentTypeList:
| componentTypeList
    {}

extensionEndMarker:
| Comma Ellipsis
    {}

extensionAddition:
| componentType
    {}
| extensionAdditionGroup
    {}

extensionAdditionGroup:
| LeftDoubleBracket versionNumber componentTypeList RightDoubleBracket
    {}

componentTypeList:
| componentType
    {}
| componentTypeList Comma componentType
    {}

componentType:
| namedType
    {}
| namedType OPTIONAL
    {}
| namedType DEFAULT value
    {}
| COMPONENTS OF type_x
    {}

componentValueList:
| namedValue
    {}
| componentValueList Comma namedValue
    {}

choiceType:
| CHOICE LeftBrace alternativeTypeLists RightBrace
    {}

alternativeTypeLists:
| rootAlternativeTypeList
    {}
| rootAlternativeTypeList Comma extensionAndException extensionAdditionAlternatives optionalExtensionMarker
    {}

extensionAdditionAlternatives:
| Comma extensionAdditionAlternativesList
    {}
| 
    {let _1 =
  ()
in
}

extensionAdditionAlternativesList:
| extensionAdditionAlternative
    {}
| extensionAdditionAlternativesList Comma extensionAdditionAlternative
    {}

extensionAdditionAlternative:
| extensionAdditionAlternativesGroup
    {}
| namedType
    {}

extensionAdditionAlternativesGroup:
| LeftDoubleBracket versionNumber alternativeTypeList RightDoubleBracket
    {}

alternativeTypeList:
| namedType
    {}
| alternativeTypeList Comma namedType
    {}

choiceValue:
| Lower Colon value
    {}

classNumber:
| Number
    {}
| definedValue
    {}

class_x:
| UNIVERSAL
    {}
| APPLICATION
    {}
| PRIVATE
    {}
| 
    {let _1 =
  ()
in
}

embeddedPDVType:
| EMBEDDED PDV
    {}

embeddedPDVValue:
| sequenceValue
    {}

objIdComponentsList:
| objIdComponents
    {}
| objIdComponents objIdComponentsList
    {}

nameForm:
| Lower
    {}

nameAndNumberForm:
| Lower LeftParen numberForm RightParen
    {}

nonempty_list_tokenOrGroupSpec_:
| x = tokenOrGroupSpec
    { [ x ] }
| x = tokenOrGroupSpec xs = nonempty_list_tokenOrGroupSpec_
    { x :: xs }

extensionAdditions:
| Comma extensionAdditionList
    {}
| 
    {let _1 =
  ()
in
}

extensionAdditionList:
| extensionAddition
    {}
| extensionAdditionList Comma extensionAddition
    {}

sequenceOfValue:
| LeftBrace valueList RightBrace
    {}
| LeftBrace namedValueList RightBrace
    {}
| LeftBrace RightBrace
    {}

valueList:
| value
    {}
| valueList Comma value
    {}

namedValueList:
| namedValue
    {}
| namedValueList Comma namedValue
    {}

setType:
| SET LeftBrace RightBrace
    {}
| SET LeftBrace extensionAndException optionalExtensionMarker RightBrace
    {}
| SET LeftBrace componentTypeLists RightBrace
    {}

setValue:
| LeftBrace componentValueList RightBrace
    {}
| LeftBrace RightBrace
    {}

setOfValue:
| LeftBrace valueList RightBrace
    {}
| LeftBrace namedValueList RightBrace
    {}
| LeftBrace RightBrace
    {}

rootAlternativeTypeList:
| alternativeTypeList
    {}

selectionType:
| Lower LessThan type_x
    {}

taggedType:
| tag type_x
    {}
| tag IMPLICIT type_x
    {}
| tag EXPLICIT type_x
    {}

tag:
| LeftBracket class_x classNumber RightBracket
    {}

externalType:
| EXTERNAL
    {}

externalValue:
| sequenceValue
    {}

objectIdentifierType:
| OBJECT IDENTIFIER
    {}

relativeOIDType:
| RELATIVE_OID
    {}

relativeOIDValue:
| LeftBrace relativeOIDComponentsList RightBrace
    {}

relativeOIDComponentsList:
| relativeOIDComponents
    {}
| relativeOIDComponents relativeOIDComponentsList
    {}

relativeOIDComponents:
| numberForm
    {}
| nameAndNumberForm
    {}
| definedValue
    {}

restrictedCharacterStringType:
| BMPString
    {}
| GeneralString
    {}
| GraphicString
    {}
| IA5String
    {}
| ISO646String
    {}
| NumericString
    {}
| PrintableString
    {}
| TeletexString
    {}
| T61String
    {}
| UniversalString
    {}
| UTF8String
    {}
| VideotexString
    {}
| VisibleString
    {}

restrictedCharacterStringValue:
| Cstring
    {}
| characterStringList
    {}
| quadruple
    {}
| tuple
    {}

quadruple:
| LeftBrace group Comma plane Comma row Comma cell RightBrace
    {}

plane:
| Number
    {}

row:
| Number
    {}

tuple:
| LeftBrace tableColumn Comma tableRow RightBrace
    {}

tableColumn:
| Number
    {}

tableRow:
| Number
    {}

unrestrictedCharacterStringType:
| CHARACTER STRING
    {}

unrestrictedCharacterStringValue:
| sequenceValue
    {}

usefulType:
| GeneralizedTime
    {}
| UTCTime
    {}
| ObjectDescriptor
    {}

typeWithConstraint:
| SET constraint_x OF type_x
    {}
| SET sizeConstraint OF type_x
    {}
| SEQUENCE constraint_x OF type_x
    {}
| SEQUENCE sizeConstraint OF type_x
    {}
| SET constraint_x OF namedType
    {}
| SET sizeConstraint OF namedType
    {}
| SEQUENCE constraint_x OF namedType
    {}
| SEQUENCE sizeConstraint OF namedType
    {}

subtypeConstraint:
| elementSetSpecs
    {}

rootElementSetSpec:
| elementSetSpec
    {}

unions:
| intersections
    {}
| uElems unionMark intersections
    {}

uElems:
| unions
    {}

unionMark:
| Middle
    {}
| UNION
    {}

subtypeElements:
| singleValue
    {}
| containedSubtype
    {}
| valueRange
    {}
| permittedAlphabet
    {}
| sizeConstraint
    {}
| typeConstraint
    {}
| innerTypeConstraints
    {}
| patternConstraint
    {}

singleValue:
| value
    {}

valueRange:
| lowerEndPoint DoubleDot upperEndPoint
    {}

upperEndPoint:
| upperEndValue
    {}
| LessThan upperEndValue
    {}

upperEndValue:
| value
    {}
| MAX
    {}

sizeConstraint:
| SIZE constraint_x
    {}

permittedAlphabet:
| FROM constraint_x
    {}

typeConstraint:
| type_x
    {}

singleTypeConstraint:
| constraint_x
    {}

partialSpecification:
| LeftBrace Ellipsis Comma typeConstraints RightBrace
    {}

typeConstraints:
| namedConstraint
    {}
| namedConstraint Comma typeConstraints
    {}

valueConstraint:
| constraint_x
    {}
| 
    {let _1 =
  ()
in
}

usefulObjectClassReference:
| TYPE_IDENTIFIER
    {}
| ABSTRACT_SYNTAX
    {}

typeFieldSpec:
| UpperField option_typeOptionalitySpec_
    {}

typeOptionalitySpec:
| OPTIONAL
    {}
| DEFAULT type_x
    {}

valueOptionalitySpec:
| OPTIONAL
    {}
| DEFAULT value
    {}

variableTypeValueFieldSpec:
| LowerField fieldName option_valueOptionalitySpec_
    {}

valueSetOptionalitySpec:
| OPTIONAL
    {}
| DEFAULT valueSet
    {}

variableTypeValueSetFieldSpec:
| UpperField fieldName option_valueSetOptionalitySpec_
    {}

withSyntaxSpec:
| WITH SYNTAX syntaxList
    {}

syntaxList:
| LeftBrace nonempty_list_tokenOrGroupSpec_ RightBrace
    {}

tokenOrGroupSpec:
| requiredToken
    {}
| optionalGroup
    {}

separated_nonempty_list_Comma_parameter_:
| x = parameter
    { [ x ] }
| x = parameter Comma xs = separated_nonempty_list_Comma_parameter_
    { x :: xs }

separated_nonempty_list_Comma_fieldSpec_:
| x = fieldSpec
    { [ x ] }
| x = fieldSpec Comma xs = separated_nonempty_list_Comma_fieldSpec_
    { x :: xs }

separated_nonempty_list_Comma_fieldSetting_:
| x = fieldSetting
    { [ x ] }
| x = fieldSetting Comma xs = separated_nonempty_list_Comma_fieldSetting_
    { x :: xs }

separated_nonempty_list_Comma_atNotation_:
| x = atNotation
    { [ x ] }
| x = atNotation Comma xs = separated_nonempty_list_Comma_atNotation_
    { x :: xs }

separated_nonempty_list_Comma_actualParameter_:
| x = actualParameter
    { [ x ] }
| x = actualParameter Comma xs = separated_nonempty_list_Comma_actualParameter_
    { x :: xs }

objectIdentifierValue:
| LeftBrace objIdComponentsList RightBrace
    {}
| LeftBrace definedValue objIdComponentsList RightBrace
    {}

objIdComponents:
| nameForm
    {}
| numberForm
    {}
| nameAndNumberForm
    {}
| definedValue
    {}

numberForm:
| Number
    {}
| definedValue
    {}

characterStringType:
| restrictedCharacterStringType
    {}
| unrestrictedCharacterStringType
    {}

characterStringList:
| LeftBrace charSyms RightBrace
    {}

charSyms:
| charsDefn
    {}
| charSyms Comma charsDefn
    {}

charsDefn:
| Cstring
    {}
| quadruple
    {}
| tuple
    {}
| definedValue
    {}

group:
| Number
    {}

cell:
| Number
    {}

characterStringValue:
| restrictedCharacterStringValue
    {}
| unrestrictedCharacterStringValue
    {}

constrainedType:
| type_x constraint_x
    {}
| typeWithConstraint
    {}

constraint_x:
| LeftParen constraintSpec exceptionSpec RightParen
    {}

constraintSpec:
| subtypeConstraint
    {}
| generalConstraint
    {}

exceptionSpec:
| Bang exceptionIdentification
    {}
| 
    {let _1 =
  ()
in
}

exceptionIdentification:
| signedNumber
    {}
| definedValue
    {}
| type_x Colon value
    {}

elementSetSpecs:
| rootElementSetSpec
    {}
| rootElementSetSpec Comma Ellipsis
    {}
| rootElementSetSpec Comma Ellipsis Comma additionalElementSetSpec
    {}

additionalElementSetSpec:
| elementSetSpec
    {}

elementSetSpec:
| unions
    {}
| ALL exclusions
    {}

intersections:
| intersectionElements
    {}
| iElems intersectionMark intersectionElements
    {}

iElems:
| intersections
    {}

intersectionElements:
| elements
    {}
| elems exclusions
    {}

elems:
| elements
    {}

exclusions:
| EXCEPT elements
    {}

intersectionMark:
| Circumflex
    {}
| INTERSECTION
    {}

elements:
| subtypeElements
    {}
| objectSetElements
    {}
| LeftParen elementSetSpec RightParen
    {}

containedSubtype:
| includes type_x
    {}

includes:
| INCLUDES
    {}
| 
    {let _1 =
  ()
in
}

lowerEndPoint:
| lowerEndValue
    {}
| lowerEndValue LessThan
    {}

lowerEndValue:
| value
    {}
| MIN
    {}

innerTypeConstraints:
| WITH COMPONENT singleTypeConstraint
    {}
| WITH COMPONENTS multipleTypeConstraints
    {}

multipleTypeConstraints:
| fullSpecification
    {}
| partialSpecification
    {}

fullSpecification:
| LeftBrace typeConstraints RightBrace
    {}

namedConstraint:
| Lower componentConstraint
    {}

componentConstraint:
| valueConstraint presenceConstraint
    {}

presenceConstraint:
| PRESENT
    {}
| ABSENT
    {}
| OPTIONAL
    {}
| 
    {let _1 =
  ()
in
}

patternConstraint:
| PATTERN value
    {}

definedObjectClass:
| externalObjectClassReference
    {}
| Upper
    {}
| usefulObjectClassReference
    {}

externalObjectClassReference:
| Upper Dot Upper
    {}

objectClassAssignment:
| Upper Assignment objectClass
    {}

loption_separated_nonempty_list_Comma_userDefinedConstraintParameter__:
| 
    { [] }
| x = separated_nonempty_list_Comma_userDefinedConstraintParameter_
    { x }

loption_separated_nonempty_list_Comma_fieldSetting__:
| 
    { [] }
| x = separated_nonempty_list_Comma_fieldSetting_
    { x }

objectClass:
| definedObjectClass
    {}
| objectClassDefn
    {}
| parameterizedObjectClass
    {}

objectClassDefn:
| CLASS LeftBrace separated_nonempty_list_Comma_fieldSpec_ RightBrace option_withSyntaxSpec_
    {}

fieldSpec:
| typeFieldSpec
    {}
| fixedTypeValueFieldSpec
    {}
| variableTypeValueFieldSpec
    {}
| fixedTypeValueSetFieldSpec
    {}
| variableTypeValueSetFieldSpec
    {}
| objectFieldSpec
    {}
| objectSetFieldSpec
    {}

primitiveFieldName:
| UpperField
    {}
| LowerField
    {}

fieldName:
| separated_nonempty_list_Dot_primitiveFieldName_
    {}

fixedTypeValueFieldSpec:
| LowerField type_x option_UNIQUE_ option_valueOptionalitySpec_
    {}

fixedTypeValueSetFieldSpec:
| UpperField type_x option_valueSetOptionalitySpec_
    {}

objectFieldSpec:
| LowerField definedObjectClass option_objectOptionalitySpec_
    {}

objectOptionalitySpec:
| OPTIONAL
    {}
| DEFAULT object_x
    {}

objectSetFieldSpec:
| UpperField definedObjectClass option_objectSetOptionalitySpec_
    {}

objectSetOptionalitySpec:
| OPTIONAL
    {}
| DEFAULT objectSet
    {}

requiredToken:
| literal
    {}
| primitiveFieldName
    {}

literal:
| Upper
    {}
| Comma
    {}

definedObject:
| externalObjectReference
    {}
| Lower
    {}

externalObjectReference:
| Upper Dot Lower
    {}

objectAssignment:
| Lower definedObjectClass Assignment object_x
    {}

object_x:
| definedObject
    {}
| objectDefn
    {}
| objectFromObject
    {}
| parameterizedObject
    {}

objectDefn:
| defaultSyntax
    {}
| DefinedSyntax
    {}

defaultSyntax:
| LeftBrace xs0 = loption_separated_nonempty_list_Comma_fieldSetting__ RightBrace
    {let _2 =
  let xs = xs0 in
  ( xs )
in
}

fieldSetting:
| primitiveFieldName setting
    {}

setting:
| type_x
    {}
| value
    {}
| valueSet
    {}
| object_x
    {}
| objectSet
    {}

definedObjectSet:
| externalObjectSetReference
    {}
| Upper
    {}

externalObjectSetReference:
| Upper Dot Upper
    {}

objectSetAssignment:
| Upper definedObjectClass Assignment objectSet
    {}

objectSet:
| LeftBrace objectSetSpec RightBrace
    {}

objectSetSpec:
| rootElementSetSpec
    {}
| rootElementSetSpec Comma Ellipsis
    {}
| Ellipsis
    {}
| Ellipsis Comma additionalElementSetSpec
    {}
| rootElementSetSpec Comma Ellipsis Comma additionalElementSetSpec
    {}

objectSetElements:
| object_x
    {}
| definedObjectSet
    {}
| objectSetFromObjects
    {}
| parameterizedObjectSet
    {}

objectClassFieldType:
| definedObjectClass Dot fieldName
    {}

objectClassFieldValue:
| openTypeFieldVal
    {}
| fixedTypeFieldVal
    {}

openTypeFieldVal:
| type_x Colon value
    {}

fixedTypeFieldVal:
| builtinValue
    {}
| referencedValue
    {}

referencedObjects:
| definedObject
    {}
| parameterizedObject
    {}
| definedObjectSet
    {}
| parameterizedObjectSet
    {}

valueFromObject:
| referencedObjects Dot fieldName
    {}

valueSetFromObjects:
| referencedObjects Dot fieldName
    {}

typeFromObject:
| referencedObjects Dot fieldName
    {}

objectFromObject:
| referencedObjects Dot fieldName
    {}

objectSetFromObjects:
| referencedObjects Dot fieldName
    {}

instanceOfType:
| INSTANCE OF definedObjectClass
    {}

generalConstraint:
| userDefinedConstraint
    {}
| tableConstraint
    {}
| contentsConstraint
    {}

userDefinedConstraint:
| CONSTRAINED BY LeftBrace xs0 = loption_separated_nonempty_list_Comma_userDefinedConstraintParameter__ RightBrace
    {let _4 =
  let xs = xs0 in
  ( xs )
in
}

userDefinedConstraintParameter:
| governor Colon value
    {}
| governor Colon valueSet
    {}
| governor Colon object_x
    {}
| governor Colon objectSet
    {}
| type_x
    {}
| definedObjectClass
    {}

tableConstraint:
| simpleTableConstraint
    {}
| componentRelationConstraint
    {}

simpleTableConstraint:
| objectSet
    {}

componentRelationConstraint:
| LeftBrace definedObjectSet RightBrace LeftBrace separated_nonempty_list_Comma_atNotation_ RightBrace
    {}

atNotation:
| At componentIdList
    {}
| AtDot level componentIdList
    {}

level:
| Dot level
    {}
| 
    {let _1 =
  ()
in
}

componentIdList:
| separated_nonempty_list_Dot_Lower_
    {}

contentsConstraint:
| CONTAINING type_x
    {}
| ENCODED BY value
    {}
| CONTAINING type_x ENCODED BY value
    {}

parameterizedAssignment:
| parameterizedTypeAssignment
    {}
| parameterizedValueAssignment
    {}
| parameterizedValueSetTypeAssignment
    {}
| parameterizedObjectClassAssignment
    {}
| parameterizedObjectAssignment
    {}
| parameterizedObjectSetAssignment
    {}

parameterizedTypeAssignment:
| Upper parameterList Assignment type_x
    {}

parameterizedValueAssignment:
| Lower parameterList type_x Assignment value
    {}

parameterizedValueSetTypeAssignment:
| Upper parameterList type_x Assignment valueSet
    {}

parameterizedObjectClassAssignment:
| Upper parameterList Assignment objectClass
    {}

parameterizedObjectAssignment:
| Lower parameterList definedObjectClass Assignment object_x
    {}

parameterizedObjectSetAssignment:
| Upper parameterList definedObjectClass Assignment objectSet
    {}

parameterList:
| LeftBrace separated_nonempty_list_Comma_parameter_ RightBrace
    {}

parameter:
| paramGovernor Colon dummyReference
    {}
| dummyReference
    {}

paramGovernor:
| governor
    {}
| dummyGovernor
    {}

governor:
| type_x
    {}
| definedObjectClass
    {}

dummyGovernor:
| dummyReference
    {}

dummyReference:
| reference
    {}

parameterizedReference:
| reference
    {}
| reference LeftBrace RightBrace
    {}

simpleDefinedType:
| externalTypeReference
    {}
| Upper
    {}

simpleDefinedValue:
| externalValueReference
    {}
| Lower
    {}

parameterizedType:
| simpleDefinedType actualParameterList
    {}

parameterizedValue:
| simpleDefinedValue actualParameterList
    {}

parameterizedValueSetType:
| simpleDefinedType actualParameterList
    {}

parameterizedObjectClass:
| definedObjectSet actualParameterList
    {}

parameterizedObject:
| definedObject actualParameterList
    {}

parameterizedObjectSet:
| definedObjectSet actualParameterList
    {}

actualParameterList:
| LeftBrace separated_nonempty_list_Comma_actualParameter_ RightBrace
    {}

actualParameter:
| type_x
    {}
| value
    {}
| valueSet
    {}
| definedObjectClass
    {}
| object_x
    {}
| objectSet
    {}

%%



