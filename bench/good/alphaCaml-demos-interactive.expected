%{

open Syntax.Raw

%}
%start declarations
%token <string> VAR
%token FAIL
%token EQUAL
%token EOF
%token <int> CONST
%token PLUS
%left PLUS 
%type <Syntax.Raw.declarations> declarations
%%

expr:
| VAR
    { EVar $1 }
| CONST
    { EConst $1 }
| expr PLUS expr
    { EAdd ($1, $3) }
| FAIL
    { EFail }

declarations:
| VAR EQUAL expr EOF
    { D ($1, $3, Suspension.create (fun () -> !ParserFix.declarations())) }

%%



