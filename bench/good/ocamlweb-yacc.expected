%{

  open Lex_syntax
  open Yacc_syntax
    
  let dummy_loc =
    { start_pos = Lexing.dummy_pos;
      end_pos = Lexing.dummy_pos;
      start_line = 0 ;
      start_col = 0 }

%}
%start yacc_definitions
%token <Yacc_syntax.location> Ttypedecl
%token Ttype
%token Ttoken
%token Tstart
%token Tsemicolon
%token Tright
%token Tprec
%token Tor
%token Tnonassoc
%token Tmark
%token Tleft
%token <Yacc_syntax.ident> Tident
%token Terror
%token Tcolon
%token <Yacc_syntax.location> Taction
%token EOF

%type <Yacc_syntax.yacc_definitions> yacc_definitions
%%

yacc_definitions:
| header tokendecls Tmark rules header EOF
    { { header = $1 ; 
	  decls = $2;
	  rules = $4;
	  trailer = $5 } }

header:
| Taction
    { $1 }
| 
    { dummy_loc }

tokendecls:
| tokendecl tokendecls
    { $1::$2 }
| 
    { [] }

tokendecl:
| Ttoken Ttypedecl idlist
    { Typed_tokens($2,$3) }
| Ttoken idlist
    { Untyped_tokens($2) }
| Ttype Ttypedecl idlist
    { Non_terminals_type($2,$3) }
| Tstart idlist
    { Start_symbols($2) }
| Tleft idlist
    { Tokens_assoc($2) }
| Tnonassoc idlist
    { Tokens_assoc($2) }
| Tright idlist
    { Tokens_assoc($2) }

idlist:
| Tident
    { [$1] }
| Tident idlist
    { $1 :: $2 }

rules:
| 
    { [] }
| general_rule rules
    { $1 :: $2 }

general_rule:
| rule Tsemicolon
    { $1 }
| rule
    { Yacc_syntax.issue_warning "ocamlyacc documentation recommends adding a semicolon at end of each grammar rules";
      $1 }

rule:
| Tident Tcolon right_part
    { ($1,$3) }
| Tident Tcolon Tor right_part
    { ($1,$4) }

right_part:
| word Taction
    { [($1,$2)] }
| word Taction Tor right_part
    { ($1,$2) :: $4 }

word:
| 
    { [] }
| Tident word
    { $1 :: $2 }
| Tprec Tident word
    { $2 :: $3 }
| Terror word
    { $2 }

%%



