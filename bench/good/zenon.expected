File "zenon.mly", line 52, characters 7-19:
Warning: the token INPUT_CLAUSE is unused.
File "zenon.mly", line 59, characters 7-15:
Warning: the token NEGATIVE is unused.
File "zenon.mly", line 58, characters 7-15:
Warning: the token POSITIVE is unused.
%{
Version.add "$Id: parser.mly,v 1.14 2004/09/28 13:12:58 doligez Exp $";;

open Expr;;
open Phrase;;

let rec mk_quant q vs body =
  match vs with
  | [] -> body
  | h::t -> q (h, "", mk_quant q t body)
;;

let rec myfold f e el =
  match el with
  | [] -> e
  | h::t -> f (e, myfold f h t)
;;

let mkand e el = myfold eand e el;;
let mkor e el = myfold eor e el;;
let mkimply e el = myfold eimply e el;;
let mkequiv e el = myfold eequiv e el;;

let hyp_counter = ref 0;;

%}
%start coqfile
%start phrase
%start theory
%start tpfile
%token XOR
%token <string> UIDENT
%token TRUE
%token TOBE
%token THEN
%token TAU
%token <string> STRING
%token RIMPLY
%token RBRACKET
%token QED
%token POSITIVE
%token OR
%token OPEN
%token NOT
%token NOR
%token NEGATIVE
%token NAND
%token LOCAL
%token <string> LIDENT
%token LET
%token LBRACKET
%token <int> INT
%token INPUT_FORMULA
%token INPUT_CLAUSE
%token INCLUDE
%token IN
%token IMPLY
%token IF
%token <string> IDENT
%token GOAL
%token FUNARROW
%token FUN
%token FORALL
%token FALSE
%token EX
%token EQUIV
%token EOF
%token ENDPROOF
%token DOT
%token DEF
%token COMMA
%token COLONEQUAL
%token COLON
%token CLOSE
%token BYDEF
%token BY
%token <string> BEGINPROOF
%token AND
%token ALL
%token ELSE
%token ARROW
%token DOUBLEARROW
%token BACKSLASHSLASH
%token SLASHBACKSLASH
%token TILDE
%token EQUAL
%nonassoc ELSE 
%nonassoc forall 
%right ARROW 
%nonassoc DOUBLEARROW 
%right BACKSLASHSLASH 
%right SLASHBACKSLASH 
%nonassoc TILDE 
%nonassoc EQUAL 
%type <string * Phrase.phrase list> coqfile
%type <Phrase.phrase> phrase
%type <Phrase.phrase list> theory
%type <Phrase.tpphrase list> tpfile
%%

theory:
| EOF
    { [] }
| phrase theory
    { $1 :: $2 }

phrase:
| DEF IDENT OPEN ident_list CLOSE expr
    { Def (DefReal ($2, $4, $6)) }
| int_opt hyp_name expr
    { Hyp ($2, $3, $1) }
| GOAL expr
    { Globals.goal_found := true;
                                           Hyp ("_Zgoal", enot $2, 0) }

expr:
| IDENT
    { evar $1 }
| OPEN IDENT expr_list CLOSE
    { eapp ($2, $3) }
| OPEN NOT expr CLOSE
    { enot ($3) }
| OPEN AND expr expr_list CLOSE
    { mkand $3 $4 }
| OPEN OR expr expr_list CLOSE
    { mkor $3 $4 }
| OPEN IMPLY expr expr_list CLOSE
    { mkimply $3 $4 }
| OPEN EQUIV expr expr_list CLOSE
    { mkequiv $3 $4 }
| OPEN TRUE CLOSE
    { etrue }
| TRUE
    { etrue }
| OPEN FALSE CLOSE
    { efalse }
| FALSE
    { efalse }
| OPEN ALL lambda CLOSE
    { eall $3 }
| OPEN EX lambda CLOSE
    { eex $3 }
| OPEN TAU lambda CLOSE
    { etau $3 }
| OPEN EQUAL expr expr CLOSE
    { eapp ("=", [$3; $4]) }

expr_list:
| expr expr_list
    { $1 :: $2 }
| 
    { [] }

lambda:
| OPEN OPEN IDENT STRING CLOSE expr CLOSE
    { (evar $3, $4, $6) }
| OPEN OPEN IDENT CLOSE expr CLOSE
    { (evar $3, "", $5) }

ident_list:
| 
    { [] }
| IDENT ident_list
    { evar $1 :: $2 }

int_opt:
| 
    { 1 }
| INT
    { $1 }

hyp_name:
| 
    { incr hyp_counter; Printf.sprintf "_hyp%d" !hyp_counter }
| STRING
    { incr hyp_counter; $1 }

tpfile:
| EOF
    { [] }
| tpphrase tpfile
    { $1 :: $2 }

tpphrase:
| INCLUDE OPEN STRING CLOSE DOT
    { Phrase.Include $3 }
| INPUT_FORMULA OPEN LIDENT COMMA LIDENT COMMA tpformula CLOSE DOT
    { Phrase.Formula ($3, $5, $7) }

tpexpr:
| UIDENT
    { evar ($1) }
| LIDENT tparguments
    { eapp ($1, $2) }
| EQUAL OPEN tpexpr COMMA tpexpr CLOSE
    { eapp ("=", [$3; $5]) }

tparguments:
| OPEN tpexpr_list CLOSE
    { $2 }
| 
    { [] }

tpexpr_list:
| tpexpr COMMA tpexpr_list
    { $1 :: $3 }
| tpexpr
    { [$1] }

tpformula:
| tpatom
    { $1 }
| tpatom AND tpformula
    { eand ($1, $3) }
| tpatom OR tpformula
    { eor ($1, $3) }
| tpatom IMPLY tpformula
    { eimply ($1, $3) }
| tpatom EQUIV tpformula
    { eequiv ($1, $3) }
| tpatom RIMPLY tpformula
    { eimply ($3, $1) }
| tpatom XOR tpformula
    { enot (eequiv ($1, $3)) }
| tpatom NOR tpformula
    { enot (eor ($1, $3)) }
| tpatom NAND tpformula
    { enot (eand ($1, $3)) }

tpatom:
| ALL LBRACKET tpvar_list RBRACKET COLON tpatom
    { mk_quant eall $3 $6 }
| EX LBRACKET tpvar_list RBRACKET COLON tpatom
    { mk_quant eex $3 $6 }
| NOT tpatom
    { enot ($2) }
| OPEN tpformula CLOSE
    { $2 }
| tpexpr
    { $1 }

tpvar_list:
| UIDENT COMMA tpvar_list
    { evar $1 :: $3 }
| UIDENT
    { [evar $1] }

coqfile:
| LOCAL IDENT COLON coqexpr COLONEQUAL TOBE coqexpr coq_hyp_def_list QED EOF
    { ($2, Hyp ("_Zgoal", enot $4, 0) :: $8) }
| BEGINPROOF coqexpr coq_hyp_def_list ENDPROOF EOF
    { ($1, Hyp ("_Zgoal", enot $2, 0) :: $3) }

coqexpr:
| OPEN coqexpr CLOSE
    { $2 }
| OPEN IDENT COLON IDENT CLOSE coqexpr %prec forall
    { eall (evar $2, $4, $6) }
| FORALL IDENT COLON IDENT COMMA coqexpr %prec forall
    { eall (evar $2, $4, $6) }
| coqapplication
    { eapp $1 }
| TILDE coqexpr
    { enot ($2) }
| OPEN AND coqexpr coqexpr CLOSE
    { eand ($3, $4) }
| OPEN OR coqexpr coqexpr CLOSE
    { eor ($3, $4) }
| IF coqexpr THEN coqexpr ELSE coqexpr
    { eapp ("_if_then_else", [$2; $4; $6]) }
| OPEN coqexpr EQUAL coqexpr CLOSE
    { eapp ("=", [$2; $4]) }
| IDENT
    { evar ($1) }
| coqexpr ARROW coqexpr
    { eimply ($1, $3) }
| coqexpr DOUBLEARROW coqexpr
    { eequiv ($1, $3) }
| coqexpr SLASHBACKSLASH coqexpr
    { eand ($1, $3) }
| coqexpr BACKSLASHSLASH coqexpr
    { eor ($1, $3) }
| LBRACKET IDENT COLONEQUAL coqexpr RBRACKET coqexpr %prec forall
    { Expr.substitute [(evar $2, $4)] $6 }
| LET IDENT COLONEQUAL coqexpr IN coqexpr %prec forall
    { Expr.substitute [(evar $2, $4)] $6 }

coqapplication:
| OPEN IDENT coqexpr_list1 CLOSE
    { ($2, $3) }
| OPEN coqapplication coqexpr_list1 CLOSE
    { let (sym, args1) = $2 in (sym, args1 @ $3) }

coqexpr_list1:
| coqexpr
    { [$1] }
| coqexpr coqexpr_list1
    { $1 :: $2 }

id_or_coqexpr:
| IDENT
    { $1 }
| STRING
    { $1 }

coqhyp:
| id_or_coqexpr COLON coqexpr
    { Hyp ($1, $3, 1) }

coqhyp_list:
| 
    { [] }
| coqhyp coqhyp_list
    { $1 :: $2 }

coqdef:
| id_or_coqexpr COLONEQUAL coqparam_expr
    { let (params, expr) = $3 in Def (DefReal ($1, params, expr)) }

coqparam_expr:
| coqexpr
    { ([], $1) }
| LBRACKET IDENT COLON IDENT RBRACKET coqparam_expr
    { let (params, expr) = $6 in ((evar $2) :: params, expr) }
| FUN OPEN IDENT COLON IDENT CLOSE FUNARROW coqparam_expr
    { let (params, expr) = $8 in ((evar $3) :: params, expr) }

coqdef_list:
| 
    { [] }
| coqdef coqdef_list
    { $1 :: $2 }

coq_hyp_def_list:
| BY coqhyp_list coq_hyp_def_list
    { $2 @ $3 }
| BYDEF coqdef_list coq_hyp_def_list
    { $2 @ $3 }
| 
    { [] }

%%





