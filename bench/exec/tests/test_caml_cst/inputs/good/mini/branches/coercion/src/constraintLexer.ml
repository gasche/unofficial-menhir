# 3 "constraintLexer.mll"
 

  open Lexing
  open ConstraintParser
  open Positions

  let comment_level = ref 0

(*------------------*
 | Error handling.  |
 *------------------*)

exception Error of string * int * int

let fail lexbuf message =
  raise (Error(message, Lexing.lexeme_start lexbuf, Lexing.lexeme_end lexbuf))
  
(*-----------------------*
 | Keyword recognition.  |
 *-----------------------*)

let table = 
  let t = Hashtbl.create 149 in
    List.iter (fun (keyword, token) ->
		 Hashtbl.add t keyword token
	      ) [
    "let", (fun x -> LET x);
    "in", (fun x -> IN x);
    "and", (fun x -> AND x);
    "\xE2\x88\xA7", (fun x -> AND x);
    "forall", (fun x -> FORALL x);
    "\xE2\x88\x80", (fun x -> FORALL x);
    "exists", (fun x -> EXISTS x);
    "\xE2\x88\x83", (fun x -> EXISTS x);
    "true", (fun x -> TRUE x);
    "false", (fun x -> FALSE x);
    "dump", (fun x -> DUMP x);
    ] ;
    t
      
let filter lexbuf =
  let lid = (Lexing.lexeme lexbuf) in
    try
      (Hashtbl.find table lid) (cpos lexbuf)
    with Not_found ->
      LID (cpos lexbuf, lid)


# 51 "constraintLexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\234\255\233\255\255\255\001\000\005\000\000\000\162\000\
    \002\000\248\255\247\255\001\000\245\255\244\255\243\255\242\255\
    \241\255\240\255\000\000\001\000\236\255\235\255\238\255\249\255\
    \029\000\002\000\000\000\253\255\252\255\251\255\114\000\003\000\
    \005\000\005\000\254\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\000\000\001\000\022\000\005\000\
    \022\000\255\255\255\255\009\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\022\000\018\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\004\000\
    \004\000\003\000\255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \007\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \007\000\255\255\255\255\000\000\000\000\000\000\029\000\255\255\
    \255\255\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\005\000\003\000\003\000\005\000\004\000\005\000\028\000\
    \000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \005\000\000\000\000\000\000\000\000\000\005\000\000\000\007\000\
    \011\000\012\000\007\000\023\000\003\000\018\000\009\000\034\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\021\000\020\000\010\000\019\000\022\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\013\000\017\000\014\000\000\000\007\000\
    \000\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\015\000\028\000\016\000\000\000\033\000\
    \027\000\000\000\000\000\028\000\000\000\000\000\000\000\000\000\
    \026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\032\000\000\000\031\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\029\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\007\000\000\000\000\000\007\000\000\000\008\000\000\000\
    \000\000\000\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\000\000\000\000\000\000\025\000\
    \000\000\000\000\006\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\000\000\000\000\000\000\
    \001\000\007\000\255\255\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \024\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\004\000\000\000\000\000\005\000\033\000\
    \255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\005\000\255\255\000\000\
    \000\000\000\000\000\000\011\000\031\000\000\000\000\000\032\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\018\000\019\000\
    \025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\030\000\000\000\255\255\030\000\
    \026\000\255\255\255\255\026\000\255\255\255\255\255\255\255\255\
    \006\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\030\000\255\255\030\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\026\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\007\000\255\255\255\255\007\000\255\255\000\000\255\255\
    \255\255\255\255\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\255\255\255\255\255\255\007\000\
    \255\255\255\255\000\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\255\255\255\255\255\255\
    \000\000\007\000\008\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\024\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \007\000\255\255\030\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 84 "constraintLexer.mll"
            ( let pos = lexbuf.lex_curr_p in
		lexbuf.lex_curr_p <- 
		{ pos with 
		    pos_lnum = pos.pos_lnum + 1;
		    pos_bol  = pos.pos_cnum;
		};
		token lexbuf )
# 206 "constraintLexer.ml"

  | 1 ->
# 92 "constraintLexer.mll"
            ( token lexbuf )
# 211 "constraintLexer.ml"

  | 2 ->
# 93 "constraintLexer.mll"
            ( FORALL (cpos lexbuf) )
# 216 "constraintLexer.ml"

  | 3 ->
# 94 "constraintLexer.mll"
            ( EXISTS (cpos lexbuf) )
# 221 "constraintLexer.ml"

  | 4 ->
# 95 "constraintLexer.mll"
            ( AND (cpos lexbuf) )
# 226 "constraintLexer.ml"

  | 5 ->
# 97 "constraintLexer.mll"
            ( filter lexbuf )
# 231 "constraintLexer.ml"

  | 6 ->
# 99 "constraintLexer.mll"
            ( comment_level := 0; comment lexbuf; token lexbuf )
# 236 "constraintLexer.ml"

  | 7 ->
# 101 "constraintLexer.mll"
            ( DOT (cpos lexbuf)  )
# 241 "constraintLexer.ml"

  | 8 ->
# 102 "constraintLexer.mll"
            ( LESS (cpos lexbuf)  )
# 246 "constraintLexer.ml"

  | 9 ->
# 103 "constraintLexer.mll"
            ( LPAREN (cpos lexbuf)  )
# 251 "constraintLexer.ml"

  | 10 ->
# 104 "constraintLexer.mll"
            ( RPAREN (cpos lexbuf)  )
# 256 "constraintLexer.ml"

  | 11 ->
# 105 "constraintLexer.mll"
            ( LBRACKET (cpos lexbuf)  )
# 261 "constraintLexer.ml"

  | 12 ->
# 106 "constraintLexer.mll"
            ( RBRACKET (cpos lexbuf)  )
# 266 "constraintLexer.ml"

  | 13 ->
# 107 "constraintLexer.mll"
            ( LBRACE (cpos lexbuf)  )
# 271 "constraintLexer.ml"

  | 14 ->
# 108 "constraintLexer.mll"
            ( RBRACE (cpos lexbuf)  )
# 276 "constraintLexer.ml"

  | 15 ->
# 109 "constraintLexer.mll"
            ( BACKSLASH (cpos lexbuf)  )
# 281 "constraintLexer.ml"

  | 16 ->
# 110 "constraintLexer.mll"
            ( TIMES (cpos lexbuf) )
# 286 "constraintLexer.ml"

  | 17 ->
# 111 "constraintLexer.mll"
            ( ARROW (cpos lexbuf)  )
# 291 "constraintLexer.ml"

  | 18 ->
# 112 "constraintLexer.mll"
            ( EQ (cpos lexbuf)  )
# 296 "constraintLexer.ml"

  | 19 ->
# 113 "constraintLexer.mll"
            ( SEMI (cpos lexbuf) )
# 301 "constraintLexer.ml"

  | 20 ->
# 114 "constraintLexer.mll"
            ( COLON (cpos lexbuf)  )
# 306 "constraintLexer.ml"

  | 21 ->
# 115 "constraintLexer.mll"
            ( EOF (cpos lexbuf) )
# 311 "constraintLexer.ml"

  | 22 ->
# 116 "constraintLexer.mll"
            ( fail lexbuf ("Illegal character"^Lexing.lexeme lexbuf) )
# 316 "constraintLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 30
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 120 "constraintLexer.mll"
            ( if !comment_level <> 0 then (decr comment_level; comment lexbuf) )
# 327 "constraintLexer.ml"

  | 1 ->
# 122 "constraintLexer.mll"
            ( incr comment_level; comment lexbuf )
# 332 "constraintLexer.ml"

  | 2 ->
# 124 "constraintLexer.mll"
            ( fail lexbuf "Unterminated comment" )
# 337 "constraintLexer.ml"

  | 3 ->
# 126 "constraintLexer.mll"
            ( let pos = lexbuf.lex_curr_p in
		lexbuf.lex_curr_p <- 
		{ pos with 
		    pos_lnum = pos.pos_lnum + 1;
		    pos_bol  = pos.pos_cnum;
		};
		comment lexbuf )
# 348 "constraintLexer.ml"

  | 4 ->
# 134 "constraintLexer.mll"
            ( comment lexbuf )
# 353 "constraintLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

