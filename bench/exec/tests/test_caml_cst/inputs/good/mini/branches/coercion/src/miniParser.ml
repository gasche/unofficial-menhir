type token =
  | LID of (Positions.position * string)
  | LONGID of (Positions.position * string)
  | UID of (Positions.position * string)
  | INTEGER of (Positions.position * int)
  | CHAR of (Positions.position * char)
  | LET of (Positions.position)
  | VAL of (Positions.position)
  | IN of (Positions.position)
  | EQUAL of (Positions.position)
  | BACKSLASH of (Positions.position)
  | DOT of (Positions.position)
  | LBRACE of (Positions.position)
  | RBRACE of (Positions.position)
  | LBRACKET of (Positions.position)
  | RBRACKET of (Positions.position)
  | LANGLE of (Positions.position)
  | RANGLE of (Positions.position)
  | TYPE of (Positions.position)
  | EXISTS of (Positions.position)
  | FORALL of (Positions.position)
  | ARROW of (Positions.position)
  | DARROW of (Positions.position)
  | LPAREN of (Positions.position)
  | RPAREN of (Positions.position)
  | SEMI of (Positions.position)
  | COMMA of (Positions.position)
  | EOF of (Positions.position)
  | BANG of (Positions.position)
  | BAR of (Positions.position)
  | ANDC of (Positions.position)
  | COLON of (Positions.position)
  | COERCE of (Positions.position)
  | SLASH of (Positions.position)
  | DATA of (Positions.position)
  | REF of (Positions.position)
  | MUTABLE of (Positions.position)
  | LEFTARROW of (Positions.position)
  | WILD of (Positions.position)
  | AS of (Positions.position)
  | REC of (Positions.position)
  | AND of (Positions.position)
  | MATCH of (Positions.position)
  | WITH of (Positions.position)
  | END of (Positions.position)
  | ASSIGN of (Positions.position)
  | UNIT of (Positions.position)
  | STAR of (Positions.position)
  | INFIXOP0 of (Positions.position * string)
  | INFIXOP1 of (Positions.position * string)
  | INFIXOP2 of (Positions.position * string)
  | INFIXOP3 of (Positions.position * string)
  | INFIXOP4 of (Positions.position * string)
  | ASSERT_FALSE of (Positions.position)

open Parsing;;
# 4 "miniParser.mly"

open Sig
open Positions
open AstPositions
open MiniAst

let unclosed b e l1 l2 = 
  let l1 = lex_join (Parsing.rhs_start_pos l1) (Parsing.rhs_end_pos l1)
  and l2 = lex_join (Parsing.rhs_start_pos l2) (Parsing.rhs_end_pos l2)
  in
    raise (ParsingExceptions.Unclosed (b, e, l1, l2))
			    

let match_unit pos =
  PData (pos, [], "_Unit", [])

let app e1 e2 =
  EApp (joine e1 e2, e1, e2)

let infix (x,y) e1 e2 =
  app (app (EVar (x,y)) e1) e2

let seq e1 e2 =
  let pos = joine e1 e2 in
    EBinding (pos, BindValue (pos, [ pos, [], 
				     match_unit (position e1), e1 ]), e2)
     
let fold_pair f ts = 
  match ts with 
    | a :: b :: q -> List.fold_left f (f a b) q
    | _ -> assert false

let tuple2 pos t1 t2 = 
  EDCon (pos, "_Tuple", [ t1; t2 ])

let tuple pos = 
  fold_pair (tuple2 pos) 

let arrow_type pos t1 t2 =
  TypApp (pos, TypVar (pos, "->"), [ t1; t2 ])

let tuple_type2 pos t1 t2 = 
  TypApp (pos, TypVar (pos, "*"), [ t1; t2 ])

let tuple_type pos = 
  fold_pair (tuple_type2 pos)  

let ref_type pos t = 
  TypApp (pos, TypVar (pos, "ref"), [ t ])

let tuple_pat2 pos t1 t2 = 
  PData (pos, [], "_Tuple", [ t1 ; t2 ])

let tuple_pat pos = 
  fold_pair (tuple_pat2 pos) 

let assign pos e1 e2 = 
  EApp (pos, EApp (pos, EVar (pos, "_assign"), e1), e2)

let deref pos e = 
  EApp (pos, EVar (pos, "_deref"), e)

let mkref pos e = 
  EApp (pos, EVar (pos, "_ref"), e)

# 124 "miniParser.ml"
let yytransl_const = [|
    0|]

let yytransl_block = [|
  257 (* LID *);
  258 (* LONGID *);
  259 (* UID *);
  260 (* INTEGER *);
  261 (* CHAR *);
  262 (* LET *);
  263 (* VAL *);
  264 (* IN *);
  265 (* EQUAL *);
  266 (* BACKSLASH *);
  267 (* DOT *);
  268 (* LBRACE *);
  269 (* RBRACE *);
  270 (* LBRACKET *);
  271 (* RBRACKET *);
  272 (* LANGLE *);
  273 (* RANGLE *);
  274 (* TYPE *);
  275 (* EXISTS *);
  276 (* FORALL *);
  277 (* ARROW *);
  278 (* DARROW *);
  279 (* LPAREN *);
  280 (* RPAREN *);
  281 (* SEMI *);
  282 (* COMMA *);
    0 (* EOF *);
  283 (* BANG *);
  284 (* BAR *);
  285 (* ANDC *);
  286 (* COLON *);
  287 (* COERCE *);
  288 (* SLASH *);
  289 (* DATA *);
  290 (* REF *);
  291 (* MUTABLE *);
  292 (* LEFTARROW *);
  293 (* WILD *);
  294 (* AS *);
  295 (* REC *);
  296 (* AND *);
  297 (* MATCH *);
  298 (* WITH *);
  299 (* END *);
  300 (* ASSIGN *);
  301 (* UNIT *);
  302 (* STAR *);
  303 (* INFIXOP0 *);
  304 (* INFIXOP1 *);
  305 (* INFIXOP2 *);
  306 (* INFIXOP3 *);
  307 (* INFIXOP4 *);
  308 (* ASSERT_FALSE *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\004\000\004\000\005\000\006\000\006\000\
\008\000\007\000\009\000\009\000\010\000\011\000\011\000\012\000\
\012\000\013\000\013\000\015\000\015\000\015\000\015\000\014\000\
\014\000\016\000\016\000\017\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\020\000\020\000\023\000\022\000\022\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\025\000\
\025\000\024\000\024\000\028\000\028\000\028\000\028\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\030\000\030\000\029\000\029\000\
\029\000\031\000\002\000\002\000\021\000\021\000\021\000\033\000\
\033\000\034\000\035\000\035\000\036\000\036\000\037\000\038\000\
\032\000\032\000\039\000\041\000\041\000\041\000\019\000\042\000\
\042\000\043\000\043\000\044\000\044\000\044\000\045\000\045\000\
\045\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\047\000\048\000\048\000\046\000\046\000\000\000"

let yylen = "\002\000\
\002\000\000\000\003\000\001\000\002\000\001\000\001\000\003\000\
\003\000\001\000\003\000\001\000\001\000\003\000\001\000\001\000\
\002\000\001\000\002\000\001\000\003\000\003\000\005\000\001\000\
\002\000\001\000\003\000\001\000\004\000\004\000\004\000\005\000\
\003\000\003\000\001\000\001\000\003\000\003\000\005\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\001\000\002\000\
\001\000\003\000\001\000\001\000\003\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\002\000\003\000\
\003\000\007\000\005\000\005\000\001\000\003\000\000\000\001\000\
\003\000\003\000\000\000\002\000\002\000\003\000\002\000\001\000\
\003\000\005\000\001\000\003\000\001\000\003\000\003\000\002\000\
\001\000\003\000\003\000\002\000\004\000\002\000\001\000\001\000\
\003\000\001\000\003\000\001\000\003\000\003\000\001\000\002\000\
\003\000\001\000\001\000\002\000\001\000\001\000\001\000\002\000\
\003\000\005\000\003\000\001\000\003\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\075\000\000\000\120\000\000\000\000\000\000\000\001\000\076\000\
\000\000\000\000\000\000\000\000\089\000\000\000\000\000\080\000\
\006\000\000\000\000\000\000\000\106\000\000\000\110\000\111\000\
\000\000\109\000\000\000\000\000\000\000\000\000\003\000\005\000\
\000\000\108\000\000\000\000\000\112\000\000\000\103\000\000\000\
\096\000\098\000\000\000\000\000\000\000\000\000\091\000\090\000\
\000\000\000\000\081\000\000\000\000\000\000\000\104\000\000\000\
\113\000\000\000\000\000\000\000\000\000\056\000\058\000\057\000\
\060\000\061\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\059\000\092\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\051\000\020\000\000\000\000\000\000\000\
\000\000\000\000\010\000\000\000\013\000\000\000\016\000\018\000\
\000\000\094\000\000\000\000\000\115\000\099\000\119\000\105\000\
\000\000\000\000\097\000\101\000\102\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\000\000\054\000\055\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\000\000\007\000\000\000\
\000\000\019\000\000\000\000\000\000\000\025\000\084\000\000\000\
\082\000\000\000\000\000\114\000\000\000\000\000\062\000\000\000\
\000\000\000\000\065\000\064\000\000\000\000\000\000\000\033\000\
\034\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\053\000\000\000\021\000\000\000\022\000\000\000\093\000\
\011\000\014\000\000\000\000\000\117\000\029\000\074\000\073\000\
\031\000\030\000\000\000\000\000\000\000\000\000\000\000\036\000\
\000\000\000\000\009\000\008\000\000\000\000\000\000\000\087\000\
\086\000\000\000\068\000\067\000\000\000\000\000\000\000\032\000\
\000\000\050\000\000\000\023\000\088\000\070\000\000\000\038\000\
\037\000\027\000\066\000"

let yydgoto = "\002\000\
\003\000\004\000\011\000\018\000\019\000\134\000\135\000\136\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\198\000\
\187\000\077\000\105\000\191\000\078\000\079\000\192\000\080\000\
\081\000\082\000\083\000\084\000\112\000\188\000\113\000\012\000\
\015\000\016\000\050\000\145\000\146\000\200\000\013\000\039\000\
\047\000\040\000\041\000\042\000\043\000\055\000\034\000\106\000"

let yysindex = "\011\000\
\000\000\000\000\000\000\002\000\249\254\028\255\000\000\000\000\
\037\255\023\255\176\000\016\255\000\000\071\255\064\255\000\000\
\000\000\106\255\037\255\016\255\000\000\117\255\000\000\000\000\
\138\000\000\000\204\255\023\255\086\255\028\255\000\000\000\000\
\037\255\000\000\097\255\068\255\000\000\041\255\000\000\109\255\
\000\000\000\000\060\255\118\255\176\255\204\255\000\000\000\000\
\123\255\152\255\000\000\143\255\224\000\176\000\000\000\176\000\
\000\000\224\000\176\255\013\001\013\001\000\000\000\000\000\000\
\000\000\000\000\224\000\163\255\037\255\037\255\056\255\171\255\
\171\255\118\255\000\000\000\000\000\000\160\255\153\255\168\255\
\171\255\002\255\136\255\000\000\000\000\164\000\244\255\176\255\
\164\000\175\255\000\000\164\255\000\000\141\255\000\000\000\000\
\032\255\000\000\086\255\187\255\000\000\000\000\000\000\000\000\
\166\255\174\255\000\000\000\000\000\000\191\255\195\255\198\255\
\172\255\206\255\208\255\000\000\085\255\000\000\000\000\158\255\
\118\255\118\255\223\255\000\000\091\255\091\255\091\255\091\255\
\091\255\091\255\171\255\000\000\196\255\212\255\000\000\203\255\
\130\255\000\000\118\255\176\255\176\255\000\000\000\000\200\255\
\000\000\205\255\224\000\000\000\118\255\118\255\000\000\163\255\
\118\255\118\255\000\000\000\000\118\255\176\255\224\000\000\000\
\000\000\207\255\221\255\099\255\099\255\099\255\062\255\201\255\
\201\255\000\000\176\255\000\000\244\255\000\000\176\255\000\000\
\000\000\000\000\023\255\187\255\000\000\000\000\000\000\000\000\
\000\000\000\000\227\255\247\255\241\254\225\255\020\255\000\000\
\091\255\254\255\000\000\000\000\009\000\249\255\176\255\000\000\
\000\000\118\255\000\000\000\000\176\255\118\255\224\000\000\000\
\171\255\000\000\176\255\000\000\000\000\000\000\013\000\000\000\
\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\058\001\000\000\000\000\000\000\
\000\000\058\001\000\000\010\000\000\000\000\000\015\000\000\000\
\000\000\000\000\015\255\028\000\000\000\192\255\000\000\000\000\
\000\000\000\000\000\000\058\001\000\000\000\000\000\000\000\000\
\000\000\000\000\220\255\211\000\000\000\000\000\000\000\129\255\
\000\000\000\000\076\255\000\000\000\000\000\000\000\000\000\000\
\029\000\000\000\000\000\000\000\000\000\000\001\000\000\049\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\026\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\033\002\107\000\
\160\000\245\001\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\084\002\000\000\056\002\000\000\000\000\
\216\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\034\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\024\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\024\000\000\000\000\000\000\000\000\000\000\000\026\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\054\000\107\000\085\001\129\001\174\001\040\001\206\000\
\251\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\089\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\037\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\010\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\146\000\008\000\000\000\153\000\214\255\000\000\
\187\000\000\000\188\000\000\000\251\255\233\000\000\000\120\000\
\216\255\142\255\231\255\000\000\072\001\000\000\130\000\149\255\
\149\000\110\000\189\255\000\000\191\000\137\000\000\000\078\001\
\000\000\059\001\247\000\167\000\000\000\000\000\064\001\135\000\
\047\001\000\000\042\001\066\000\000\000\111\000\062\001\208\000"

let yytablesize = 892
let yytable = "\038\000\
\052\000\007\000\090\000\076\000\118\000\119\000\160\000\161\000\
\204\000\077\000\125\000\001\000\009\000\124\000\079\000\205\000\
\107\000\163\000\163\000\163\000\163\000\163\000\163\000\085\000\
\020\000\004\000\032\000\078\000\014\000\004\000\117\000\010\000\
\085\000\120\000\182\000\020\000\020\000\017\000\185\000\186\000\
\052\000\110\000\009\000\087\000\020\000\137\000\020\000\207\000\
\126\000\127\000\128\000\129\000\130\000\050\000\088\000\028\000\
\062\000\063\000\064\000\065\000\066\000\005\000\208\000\170\000\
\057\000\067\000\058\000\068\000\021\000\020\000\022\000\023\000\
\024\000\006\000\069\000\070\000\114\000\115\000\071\000\116\000\
\132\000\033\000\072\000\138\000\155\000\163\000\100\000\060\000\
\061\000\073\000\025\000\062\000\063\000\064\000\065\000\066\000\
\074\000\100\000\176\000\100\000\029\000\100\000\068\000\030\000\
\026\000\100\000\049\000\075\000\156\000\183\000\157\000\129\000\
\130\000\071\000\158\000\189\000\031\000\072\000\062\000\063\000\
\064\000\065\000\066\000\005\000\073\000\108\000\109\000\067\000\
\195\000\068\000\033\000\049\000\197\000\190\000\053\000\006\000\
\069\000\070\000\059\000\095\000\071\000\124\000\075\000\099\000\
\072\000\027\000\127\000\128\000\129\000\130\000\095\000\073\000\
\095\000\174\000\095\000\175\000\213\000\101\000\074\000\047\000\
\100\000\046\000\215\000\111\000\103\000\216\000\104\000\121\000\
\197\000\075\000\054\000\062\000\063\000\064\000\065\000\066\000\
\085\000\122\000\123\000\131\000\046\000\190\000\068\000\139\000\
\140\000\086\000\141\000\087\000\054\000\144\000\054\000\147\000\
\107\000\071\000\107\000\107\000\107\000\148\000\088\000\159\000\
\107\000\149\000\107\000\150\000\021\000\044\000\022\000\023\000\
\024\000\089\000\151\000\152\000\044\000\107\000\107\000\107\000\
\153\000\107\000\154\000\107\000\107\000\107\000\075\000\162\000\
\172\000\171\000\025\000\173\000\107\000\179\000\106\000\194\000\
\180\000\045\000\164\000\165\000\166\000\167\000\168\000\169\000\
\026\000\106\000\193\000\106\000\133\000\106\000\206\000\106\000\
\106\000\106\000\045\000\130\000\202\000\086\000\210\000\087\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\005\000\
\052\000\052\000\088\000\052\000\052\000\052\000\203\000\077\000\
\212\000\077\000\052\000\006\000\079\000\089\000\079\000\052\000\
\052\000\052\000\052\000\077\000\052\000\085\000\052\000\085\000\
\079\000\078\000\211\000\078\000\219\000\083\000\071\000\043\000\
\052\000\085\000\052\000\052\000\116\000\078\000\072\000\052\000\
\052\000\052\000\052\000\052\000\052\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\069\000\050\000\050\000\085\000\
\050\000\050\000\050\000\026\000\199\000\196\000\177\000\050\000\
\178\000\142\000\218\000\008\000\050\000\050\000\050\000\050\000\
\217\000\050\000\214\000\050\000\046\000\209\000\184\000\020\000\
\051\000\143\000\201\000\048\000\098\000\050\000\102\000\050\000\
\050\000\056\000\181\000\000\000\050\000\050\000\050\000\050\000\
\050\000\050\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\000\000\049\000\049\000\000\000\000\000\049\000\049\000\
\000\000\000\000\000\000\000\000\049\000\000\000\000\000\000\000\
\041\000\049\000\049\000\049\000\049\000\000\000\049\000\000\000\
\049\000\000\000\035\000\000\000\036\000\023\000\024\000\000\000\
\000\000\000\000\049\000\000\000\049\000\049\000\000\000\000\000\
\000\000\049\000\049\000\049\000\049\000\049\000\049\000\047\000\
\025\000\037\000\000\000\000\000\085\000\047\000\000\000\047\000\
\047\000\000\000\000\000\000\000\047\000\042\000\026\000\087\000\
\021\000\047\000\022\000\023\000\024\000\000\000\000\000\047\000\
\047\000\047\000\088\000\047\000\000\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\089\000\025\000\047\000\
\000\000\047\000\047\000\000\000\000\000\044\000\047\000\047\000\
\047\000\047\000\047\000\044\000\026\000\044\000\044\000\024\000\
\000\000\000\000\044\000\000\000\000\000\107\000\000\000\044\000\
\035\000\000\000\036\000\023\000\024\000\044\000\044\000\044\000\
\107\000\044\000\107\000\044\000\107\000\000\000\107\000\107\000\
\107\000\000\000\000\000\000\000\040\000\044\000\025\000\044\000\
\044\000\000\000\045\000\000\000\044\000\044\000\044\000\044\000\
\045\000\000\000\045\000\045\000\026\000\000\000\000\000\045\000\
\000\000\039\000\118\000\000\000\045\000\021\000\000\000\036\000\
\023\000\024\000\045\000\045\000\045\000\118\000\045\000\118\000\
\045\000\118\000\000\000\118\000\118\000\118\000\000\000\000\000\
\035\000\000\000\045\000\025\000\045\000\045\000\000\000\043\000\
\000\000\045\000\045\000\045\000\045\000\043\000\000\000\043\000\
\043\000\026\000\000\000\000\000\043\000\000\000\000\000\015\000\
\000\000\043\000\002\000\108\000\002\000\002\000\002\000\043\000\
\043\000\043\000\000\000\043\000\000\000\043\000\108\000\000\000\
\108\000\000\000\108\000\000\000\108\000\108\000\108\000\043\000\
\002\000\043\000\043\000\012\000\046\000\000\000\043\000\043\000\
\043\000\002\000\046\000\000\000\046\000\046\000\002\000\000\000\
\000\000\046\000\002\000\000\000\002\000\000\000\046\000\000\000\
\000\000\000\000\000\000\000\000\046\000\046\000\046\000\002\000\
\046\000\000\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\000\000\000\046\000\000\000\046\000\046\000\
\041\000\000\000\000\000\046\000\000\000\000\000\041\000\000\000\
\041\000\041\000\000\000\000\000\000\000\041\000\000\000\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\041\000\041\000\041\000\000\000\041\000\000\000\041\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\041\000\000\000\041\000\041\000\000\000\042\000\000\000\041\000\
\000\000\000\000\000\000\042\000\000\000\042\000\042\000\000\000\
\000\000\000\000\042\000\000\000\000\000\000\000\000\000\042\000\
\000\000\000\000\000\000\000\000\000\000\042\000\042\000\042\000\
\000\000\042\000\000\000\042\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\000\000\042\000\
\042\000\000\000\000\000\000\000\042\000\024\000\000\000\024\000\
\024\000\000\000\024\000\000\000\024\000\000\000\000\000\000\000\
\000\000\024\000\000\000\000\000\024\000\024\000\000\000\024\000\
\024\000\024\000\000\000\024\000\040\000\024\000\024\000\000\000\
\000\000\000\000\040\000\000\000\040\000\000\000\000\000\024\000\
\000\000\040\000\000\000\000\000\000\000\024\000\040\000\000\000\
\000\000\039\000\000\000\000\000\040\000\040\000\040\000\039\000\
\040\000\039\000\040\000\000\000\000\000\000\000\039\000\000\000\
\000\000\000\000\000\000\039\000\040\000\000\000\040\000\040\000\
\035\000\039\000\039\000\039\000\000\000\039\000\035\000\039\000\
\035\000\000\000\000\000\000\000\000\000\035\000\000\000\000\000\
\000\000\039\000\035\000\039\000\039\000\000\000\000\000\000\000\
\035\000\000\000\035\000\000\000\035\000\015\000\035\000\015\000\
\015\000\000\000\015\000\000\000\015\000\000\000\000\000\000\000\
\035\000\015\000\035\000\035\000\015\000\015\000\000\000\015\000\
\015\000\015\000\000\000\015\000\000\000\015\000\015\000\000\000\
\000\000\012\000\000\000\012\000\012\000\000\000\012\000\015\000\
\012\000\000\000\000\000\000\000\000\000\012\000\000\000\000\000\
\000\000\012\000\000\000\012\000\012\000\012\000\000\000\012\000\
\000\000\012\000\012\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\012\000"

let yycheck = "\025\000\
\000\000\000\000\045\000\044\000\072\000\073\000\121\000\122\000\
\024\001\000\000\009\001\001\000\020\001\081\000\000\000\031\001\
\059\000\125\000\126\000\127\000\128\000\129\000\130\000\000\000\
\001\001\011\001\019\000\000\000\001\001\015\001\071\000\039\001\
\001\001\074\000\149\000\012\001\013\001\001\001\153\000\154\000\
\033\000\067\000\020\001\012\001\021\001\088\000\023\001\028\001\
\047\001\048\001\049\001\050\001\051\001\000\000\023\001\040\001\
\001\001\002\001\003\001\004\001\005\001\006\001\043\001\131\000\
\024\001\010\001\026\001\012\001\001\001\046\001\003\001\004\001\
\005\001\018\001\019\001\020\001\069\000\070\000\023\001\024\001\
\086\000\014\001\027\001\089\000\000\001\193\000\011\001\028\001\
\029\001\034\001\023\001\001\001\002\001\003\001\004\001\005\001\
\041\001\022\001\139\000\024\001\030\001\026\001\012\001\040\001\
\037\001\030\001\000\000\052\001\024\001\150\000\026\001\050\001\
\051\001\023\001\030\001\158\000\011\001\027\001\001\001\002\001\
\003\001\004\001\005\001\006\001\034\001\060\000\061\000\010\001\
\171\000\012\001\014\001\046\001\175\000\159\000\038\001\018\001\
\019\001\020\001\030\001\011\001\023\001\209\000\052\001\021\001\
\027\001\011\000\048\001\049\001\050\001\051\001\022\001\034\001\
\024\001\024\001\026\001\026\001\199\000\015\001\041\001\000\000\
\009\001\027\000\205\000\001\001\054\000\206\000\056\000\008\001\
\211\000\052\001\036\000\001\001\002\001\003\001\004\001\005\001\
\001\001\025\001\011\001\044\001\046\000\207\000\012\001\009\001\
\021\001\010\001\046\001\012\001\054\000\003\001\056\000\026\001\
\001\001\023\001\003\001\004\001\005\001\024\001\023\001\042\001\
\009\001\011\001\011\001\009\001\001\001\000\000\003\001\004\001\
\005\001\034\001\013\001\040\001\009\001\022\001\023\001\024\001\
\011\001\026\001\011\001\028\001\029\001\030\001\052\001\001\001\
\013\001\030\001\023\001\025\001\037\001\030\001\011\001\011\001\
\028\001\030\001\125\000\126\000\127\000\128\000\129\000\130\000\
\037\001\022\001\036\001\024\001\001\001\026\001\022\001\028\001\
\029\001\030\001\000\000\051\001\026\001\010\001\001\001\012\001\
\000\001\001\001\002\001\003\001\004\001\005\001\006\001\006\001\
\008\001\009\001\023\001\011\001\012\001\013\001\024\001\006\001\
\024\001\008\001\018\001\018\001\006\001\034\001\008\001\023\001\
\024\001\025\001\026\001\018\001\028\001\006\001\030\001\008\001\
\018\001\006\001\026\001\008\001\024\001\009\001\013\001\000\000\
\040\001\018\001\042\001\043\001\024\001\018\001\013\001\047\001\
\048\001\049\001\050\001\051\001\052\001\000\001\001\001\002\001\
\003\001\004\001\005\001\006\001\024\001\008\001\009\001\040\001\
\011\001\012\001\013\001\024\001\179\000\173\000\140\000\018\001\
\141\000\097\000\211\000\004\000\023\001\024\001\025\001\026\001\
\207\000\028\001\202\000\030\001\000\000\193\000\152\000\010\000\
\030\000\099\000\180\000\028\000\046\000\040\001\053\000\042\001\
\043\001\036\000\147\000\255\255\047\001\048\001\049\001\050\001\
\051\001\052\001\000\001\001\001\002\001\003\001\004\001\005\001\
\006\001\255\255\008\001\009\001\255\255\255\255\012\001\013\001\
\255\255\255\255\255\255\255\255\018\001\255\255\255\255\255\255\
\000\000\023\001\024\001\025\001\026\001\255\255\028\001\255\255\
\030\001\255\255\001\001\255\255\003\001\004\001\005\001\255\255\
\255\255\255\255\040\001\255\255\042\001\043\001\255\255\255\255\
\255\255\047\001\048\001\049\001\050\001\051\001\052\001\000\001\
\023\001\024\001\255\255\255\255\001\001\006\001\255\255\008\001\
\009\001\255\255\255\255\255\255\013\001\000\000\037\001\012\001\
\001\001\018\001\003\001\004\001\005\001\255\255\255\255\024\001\
\025\001\026\001\023\001\028\001\255\255\030\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\034\001\023\001\040\001\
\255\255\042\001\043\001\255\255\255\255\000\001\047\001\048\001\
\049\001\050\001\051\001\006\001\037\001\008\001\009\001\000\000\
\255\255\255\255\013\001\255\255\255\255\011\001\255\255\018\001\
\001\001\255\255\003\001\004\001\005\001\024\001\025\001\026\001\
\022\001\028\001\024\001\030\001\026\001\255\255\028\001\029\001\
\030\001\255\255\255\255\255\255\000\000\040\001\023\001\042\001\
\043\001\255\255\000\001\255\255\047\001\048\001\049\001\050\001\
\006\001\255\255\008\001\009\001\037\001\255\255\255\255\013\001\
\255\255\000\000\011\001\255\255\018\001\001\001\255\255\003\001\
\004\001\005\001\024\001\025\001\026\001\022\001\028\001\024\001\
\030\001\026\001\255\255\028\001\029\001\030\001\255\255\255\255\
\000\000\255\255\040\001\023\001\042\001\043\001\255\255\000\001\
\255\255\047\001\048\001\049\001\050\001\006\001\255\255\008\001\
\009\001\037\001\255\255\255\255\013\001\255\255\255\255\000\000\
\255\255\018\001\001\001\011\001\003\001\004\001\005\001\024\001\
\025\001\026\001\255\255\028\001\255\255\030\001\022\001\255\255\
\024\001\255\255\026\001\255\255\028\001\029\001\030\001\040\001\
\023\001\042\001\043\001\000\000\000\001\255\255\047\001\048\001\
\049\001\001\001\006\001\255\255\008\001\009\001\037\001\255\255\
\255\255\013\001\010\001\255\255\012\001\255\255\018\001\255\255\
\255\255\255\255\255\255\255\255\024\001\025\001\026\001\023\001\
\028\001\255\255\030\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\034\001\255\255\040\001\255\255\042\001\043\001\
\000\001\255\255\255\255\047\001\255\255\255\255\006\001\255\255\
\008\001\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\255\255\018\001\255\255\255\255\255\255\255\255\255\255\
\024\001\025\001\026\001\255\255\028\001\255\255\030\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\040\001\255\255\042\001\043\001\255\255\000\001\255\255\047\001\
\255\255\255\255\255\255\006\001\255\255\008\001\009\001\255\255\
\255\255\255\255\013\001\255\255\255\255\255\255\255\255\018\001\
\255\255\255\255\255\255\255\255\255\255\024\001\025\001\026\001\
\255\255\028\001\255\255\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\040\001\255\255\042\001\
\043\001\255\255\255\255\255\255\047\001\006\001\255\255\008\001\
\009\001\255\255\011\001\255\255\013\001\255\255\255\255\255\255\
\255\255\018\001\255\255\255\255\021\001\022\001\255\255\024\001\
\025\001\026\001\255\255\028\001\000\001\030\001\031\001\255\255\
\255\255\255\255\006\001\255\255\008\001\255\255\255\255\040\001\
\255\255\013\001\255\255\255\255\255\255\046\001\018\001\255\255\
\255\255\000\001\255\255\255\255\024\001\025\001\026\001\006\001\
\028\001\008\001\030\001\255\255\255\255\255\255\013\001\255\255\
\255\255\255\255\255\255\018\001\040\001\255\255\042\001\043\001\
\000\001\024\001\025\001\026\001\255\255\028\001\006\001\030\001\
\008\001\255\255\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\040\001\018\001\042\001\043\001\255\255\255\255\255\255\
\024\001\255\255\026\001\255\255\028\001\006\001\030\001\008\001\
\009\001\255\255\011\001\255\255\013\001\255\255\255\255\255\255\
\040\001\018\001\042\001\043\001\021\001\022\001\255\255\024\001\
\025\001\026\001\255\255\028\001\255\255\030\001\031\001\255\255\
\255\255\006\001\255\255\008\001\009\001\255\255\011\001\040\001\
\013\001\255\255\255\255\255\255\255\255\018\001\255\255\255\255\
\255\255\022\001\255\255\024\001\025\001\026\001\255\255\028\001\
\255\255\030\001\031\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\040\001"

let yynames_const = "\
  "

let yynames_block = "\
  LID\000\
  LONGID\000\
  UID\000\
  INTEGER\000\
  CHAR\000\
  LET\000\
  VAL\000\
  IN\000\
  EQUAL\000\
  BACKSLASH\000\
  DOT\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  LANGLE\000\
  RANGLE\000\
  TYPE\000\
  EXISTS\000\
  FORALL\000\
  ARROW\000\
  DARROW\000\
  LPAREN\000\
  RPAREN\000\
  SEMI\000\
  COMMA\000\
  EOF\000\
  BANG\000\
  BAR\000\
  ANDC\000\
  COLON\000\
  COERCE\000\
  SLASH\000\
  DATA\000\
  REF\000\
  MUTABLE\000\
  LEFTARROW\000\
  WILD\000\
  AS\000\
  REC\000\
  AND\000\
  MATCH\000\
  WITH\000\
  END\000\
  ASSIGN\000\
  UNIT\000\
  STAR\000\
  INFIXOP0\000\
  INFIXOP1\000\
  INFIXOP2\000\
  INFIXOP3\000\
  INFIXOP4\000\
  ASSERT_FALSE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'bindings) in
    let _2 = (peek_val parser_env 0 : Positions.position) in
    Obj.repr(
# 139 "miniParser.mly"
                                                    ( List.rev _1 )
# 620 "miniParser.ml"
               : MiniAst.binding list))
; (fun parser_env ->
    Obj.repr(
# 143 "miniParser.mly"
                                                    ( [] )
# 626 "miniParser.ml"
               : 'forall))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : Positions.position) in
    let _2 = (peek_val parser_env 1 : 'quantifiers) in
    let _3 = (peek_val parser_env 0 : Positions.position) in
    Obj.repr(
# 144 "miniParser.mly"
                                                    ( _2 )
# 635 "miniParser.ml"
               : 'forall))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'quantifier) in
    Obj.repr(
# 148 "miniParser.mly"
                                                    ( [ _1 ] )
# 642 "miniParser.ml"
               : 'quantifiers))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'quantifier) in
    let _2 = (peek_val parser_env 0 : 'quantifiers) in
    Obj.repr(
# 149 "miniParser.mly"
                                                    ( _1 :: _2 )
# 650 "miniParser.ml"
               : 'quantifiers))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Positions.position * string) in
    Obj.repr(
# 153 "miniParser.mly"
                                                    ( _1 )
# 657 "miniParser.ml"
               : 'quantifier))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'typ) in
    Obj.repr(
# 157 "miniParser.mly"
               ( [], _1 )
# 664 "miniParser.ml"
               : 'attributes))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'attribute) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'attributes) in
    Obj.repr(
# 158 "miniParser.mly"
                                  ( _1 :: (fst _3), snd _3 )
# 673 "miniParser.ml"
               : 'attributes))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : Positions.position * string) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'typ) in
    Obj.repr(
# 162 "miniParser.mly"
                        ( snd _1, _3 )
# 682 "miniParser.ml"
               : 'attribute))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'type2) in
    Obj.repr(
# 166 "miniParser.mly"
                                                    ( _1 )
# 689 "miniParser.ml"
               : 'typ))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'type10) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'type2) in
    Obj.repr(
# 171 "miniParser.mly"
  ( arrow_type (tjoin _1 _3) _1 _3  )
# 698 "miniParser.ml"
               : 'type2))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'type10) in
    Obj.repr(
# 172 "miniParser.mly"
                                                     ( _1 )
# 705 "miniParser.ml"
               : 'type2))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'star_types) in
    Obj.repr(
# 177 "miniParser.mly"
( match _1 with
    | [] -> assert false
    | [ a ] -> a
    | l -> tuple_type (tlposition _1) l
)
# 716 "miniParser.ml"
               : 'type10))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'type1) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'star_types) in
    Obj.repr(
# 185 "miniParser.mly"
                                                    ( _1 :: _3 )
# 725 "miniParser.ml"
               : 'star_types))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'type1) in
    Obj.repr(
# 186 "miniParser.mly"
                 ( [ _1 ] )
# 732 "miniParser.ml"
               : 'star_types))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'type0) in
    Obj.repr(
# 190 "miniParser.mly"
        ( _1 )
# 739 "miniParser.ml"
               : 'type1))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : Positions.position) in
    let _2 = (peek_val parser_env 0 : 'type0) in
    Obj.repr(
# 191 "miniParser.mly"
                         ( TypRowUniform (_1, _2) )
# 747 "miniParser.ml"
               : 'type1))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'type00s) in
    Obj.repr(
# 196 "miniParser.mly"
  ( 
    match _1 with
	[] -> assert false
      | [ t ] -> t
      | t :: q -> 
	  TypApp (join (tposition t)
		    (tlposition q),
		    t,
		    q) 
  )
# 763 "miniParser.ml"
               : 'type0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : Positions.position) in
    let _2 = (peek_val parser_env 0 : 'type0) in
    Obj.repr(
# 206 "miniParser.mly"
            ( ref_type _1 _2 )
# 771 "miniParser.ml"
               : 'type0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Positions.position * string) in
    Obj.repr(
# 210 "miniParser.mly"
                                                    ( TypVar (fst _1, snd _1) )
# 778 "miniParser.ml"
               : 'type00))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : Positions.position) in
    let _2 = (peek_val parser_env 1 : 'attributes) in
    let _3 = (peek_val parser_env 0 : Positions.position) in
    Obj.repr(
# 212 "miniParser.mly"
      ( let pos = join _1 _3 in
	TypApp (pos, TypVar (pos, "pi"), [ TypRowCons 
					     (join _1 _3, 
					      fst _2, 
					      snd _2) ])
      )
# 792 "miniParser.ml"
               : 'type00))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : Positions.position) in
    let _2 = (peek_val parser_env 1 : 'typ) in
    let _3 = (peek_val parser_env 0 : Positions.position) in
    Obj.repr(
# 218 "miniParser.mly"
                                                    ( _2 )
# 801 "miniParser.ml"
               : 'type00))
; (fun parser_env ->
    let _1 = (peek_val parser_env 4 : Positions.position) in
    let _2 = (peek_val parser_env 3 : 'typ) in
    let _3 = (peek_val parser_env 2 : Positions.position) in
    let _4 = (peek_val parser_env 1 : 'types) in
    let _5 = (peek_val parser_env 0 : Positions.position) in
    Obj.repr(
# 219 "miniParser.mly"
                                                    ( tuple_type (join _1 _5)
							(_2 :: _4) )
# 813 "miniParser.ml"
               : 'type00))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'type00) in
    Obj.repr(
# 226 "miniParser.mly"
                      ( [ _1 ] )
# 820 "miniParser.ml"
               : 'type00s))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'type00) in
    let _2 = (peek_val parser_env 0 : 'type00s) in
    Obj.repr(
# 227 "miniParser.mly"
                       ( _1 :: _2 )
# 828 "miniParser.ml"
               : 'type00s))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'typ) in
    Obj.repr(
# 231 "miniParser.mly"
                                                    ( [ _1 ] )
# 835 "miniParser.ml"
               : 'types))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'typ) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'types) in
    Obj.repr(
# 232 "miniParser.mly"
                                                    ( _1 :: _3 )
# 844 "miniParser.ml"
               : 'types))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'expression400) in
    Obj.repr(
# 236 "miniParser.mly"
                                                    ( _1 )
# 851 "miniParser.ml"
               : 'expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 3 : Positions.position) in
    let _2 = (peek_val parser_env 2 : 'pattern) in
    let _3 = (peek_val parser_env 1 : Positions.position) in
    let _4 = (peek_val parser_env 0 : 'expression400) in
    Obj.repr(
# 241 "miniParser.mly"
( 
  ELambda (join _1 (position _4), _2, _4) 
)
# 863 "miniParser.ml"
               : 'expression400))
; (fun parser_env ->
    let _1 = (peek_val parser_env 3 : Positions.position) in
    let _2 = (peek_val parser_env 2 : 'quantifiers) in
    let _3 = (peek_val parser_env 1 : Positions.position) in
    let _4 = (peek_val parser_env 0 : 'expression400) in
    Obj.repr(
# 245 "miniParser.mly"
(
  EForall (join _1 (position _4), snd (List.split _2), _4)
)
# 875 "miniParser.ml"
               : 'expression400))
; (fun parser_env ->
    let _1 = (peek_val parser_env 3 : Positions.position) in
    let _2 = (peek_val parser_env 2 : 'quantifiers) in
    let _3 = (peek_val parser_env 1 : Positions.position) in
    let _4 = (peek_val parser_env 0 : 'expression400) in
    Obj.repr(
# 249 "miniParser.mly"
(
  EExists (join _1 (position _4), snd (List.split _2), _4)
)
# 887 "miniParser.ml"
               : 'expression400))
; (fun parser_env ->
    let _1 = (peek_val parser_env 4 : Positions.position) in
    let _2 = (peek_val parser_env 3 : 'expression) in
    let _3 = (peek_val parser_env 2 : Positions.position) in
    let _4 = (peek_val parser_env 1 : 'clauses) in
    let _5 = (peek_val parser_env 0 : Positions.position) in
    Obj.repr(
# 253 "miniParser.mly"
( 
  EMatch (join _1 _5, _2, List.rev _4)
)
# 900 "miniParser.ml"
               : 'expression400))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'binding) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'expression400) in
    Obj.repr(
# 257 "miniParser.mly"
( 
  EBinding (join (bposition _1) (position _3), _1, _3) 
)
# 911 "miniParser.ml"
               : 'expression400))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expression300) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'expression400) in
    Obj.repr(
# 265 "miniParser.mly"
                                                    ( seq _1 _3 )
# 920 "miniParser.ml"
               : 'expression400))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'expression300) in
    Obj.repr(
# 266 "miniParser.mly"
                                                    ( _1 )
# 927 "miniParser.ml"
               : 'expression400))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'clause) in
    Obj.repr(
# 270 "miniParser.mly"
                 ( [ _1 ] )
# 934 "miniParser.ml"
               : 'clauses))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'clauses) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'clause) in
    Obj.repr(
# 271 "miniParser.mly"
                            ( _3 :: _1 )
# 943 "miniParser.ml"
               : 'clauses))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'pattern) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'expression) in
    Obj.repr(
# 275 "miniParser.mly"
                                  ( (join 
							 (pposition _1)
							 (position _3),
						       _1, _3) )
# 955 "miniParser.ml"
               : 'clause))
; (fun parser_env ->
    let _1 = (peek_val parser_env 4 : 'expression50) in
    let _2 = (peek_val parser_env 3 : Positions.position) in
    let _3 = (peek_val parser_env 2 : Positions.position * string) in
    let _4 = (peek_val parser_env 1 : Positions.position) in
    let _5 = (peek_val parser_env 0 : 'expression100) in
    Obj.repr(
# 283 "miniParser.mly"
  ( 
    ERecordUpdate (joine _1 _5, _1, snd _3, _5) 
  )
# 968 "miniParser.ml"
               : 'expression300))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'expression200) in
    Obj.repr(
# 286 "miniParser.mly"
                                                    ( _1 )
# 975 "miniParser.ml"
               : 'expression300))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expression200) in
    let _2 = (peek_val parser_env 1 : Positions.position * string) in
    let _3 = (peek_val parser_env 0 : 'expression200) in
    Obj.repr(
# 290 "miniParser.mly"
                                                    ( infix _2 _1 _3 )
# 984 "miniParser.ml"
               : 'expression200))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expression200) in
    let _2 = (peek_val parser_env 1 : Positions.position * string) in
    let _3 = (peek_val parser_env 0 : 'expression200) in
    Obj.repr(
# 291 "miniParser.mly"
                                                    ( infix _2 _1 _3 )
# 993 "miniParser.ml"
               : 'expression200))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expression200) in
    let _2 = (peek_val parser_env 1 : Positions.position * string) in
    let _3 = (peek_val parser_env 0 : 'expression200) in
    Obj.repr(
# 292 "miniParser.mly"
                                                    ( infix _2 _1 _3 )
# 1002 "miniParser.ml"
               : 'expression200))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expression200) in
    let _2 = (peek_val parser_env 1 : Positions.position * string) in
    let _3 = (peek_val parser_env 0 : 'expression200) in
    Obj.repr(
# 293 "miniParser.mly"
                                                    ( infix _2 _1 _3 )
# 1011 "miniParser.ml"
               : 'expression200))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expression200) in
    let _2 = (peek_val parser_env 1 : Positions.position * string) in
    let _3 = (peek_val parser_env 0 : 'expression200) in
    Obj.repr(
# 294 "miniParser.mly"
                                                    ( infix _2 _1 _3 )
# 1020 "miniParser.ml"
               : 'expression200))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expression200) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'expression200) in
    Obj.repr(
# 295 "miniParser.mly"
                                                    ( infix (_2, "=") _1 _3 )
# 1029 "miniParser.ml"
               : 'expression200))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'expression100) in
    Obj.repr(
# 296 "miniParser.mly"
                                                    ( _1 )
# 1036 "miniParser.ml"
               : 'expression200))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'expression100) in
    let _2 = (peek_val parser_env 0 : 'expression0) in
    Obj.repr(
# 301 "miniParser.mly"
  ( 
    match _1 with
	EDCon (p, k, args) -> EDCon (p, k, args @ [ _2 ])
      | _ -> EApp (joine _1 _2, _1, _2) 
  )
# 1048 "miniParser.ml"
               : 'expression100))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'expression50) in
    Obj.repr(
# 306 "miniParser.mly"
                                                    ( _1 )
# 1055 "miniParser.ml"
               : 'expression100))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expression50) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : Positions.position * string) in
    Obj.repr(
# 311 "miniParser.mly"
  ( 
    ERecordAccess (join (position _1) (fst _3), _1, snd _3) 
  )
# 1066 "miniParser.ml"
               : 'expression50))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'expression10) in
    Obj.repr(
# 314 "miniParser.mly"
                        ( _1 )
# 1073 "miniParser.ml"
               : 'expression50))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'expression0) in
    Obj.repr(
# 318 "miniParser.mly"
                       ( _1 )
# 1080 "miniParser.ml"
               : 'expression10))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expression0) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'expression0) in
    Obj.repr(
# 319 "miniParser.mly"
                                       ( assign (joine _1 _3)
							 _1 _3 
						     )
# 1091 "miniParser.ml"
               : 'expression10))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : Positions.position) in
    let _2 = (peek_val parser_env 0 : 'expression0) in
    Obj.repr(
# 322 "miniParser.mly"
                           ( deref 
							 (join _1 
							    (position _2))
							 _2 
						     )
# 1103 "miniParser.ml"
               : 'expression10))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : Positions.position) in
    let _2 = (peek_val parser_env 0 : 'expression0) in
    Obj.repr(
# 327 "miniParser.mly"
                          ( mkref 
							 (join _1 
							    (position _2))
							 _2 
						     )
# 1115 "miniParser.ml"
               : 'expression10))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Positions.position * string) in
    Obj.repr(
# 335 "miniParser.mly"
                                                     ( EVar (fst _1, snd _1) )
# 1122 "miniParser.ml"
               : 'expression0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Positions.position * string) in
    Obj.repr(
# 337 "miniParser.mly"
( 
  EDCon (fst _1, snd _1, []) 
)
# 1131 "miniParser.ml"
               : 'expression0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Positions.position * string) in
    Obj.repr(
# 340 "miniParser.mly"
                                                     ( EVar (fst _1, snd _1) )
# 1138 "miniParser.ml"
               : 'expression0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Positions.position) in
    Obj.repr(
# 341 "miniParser.mly"
                               ( EAssertFalse (_1) )
# 1145 "miniParser.ml"
               : 'expression0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Positions.position * int) in
    Obj.repr(
# 342 "miniParser.mly"
                                                     ( EPrimApp 
							 (fst _1, 
							  PIntegerConstant 
							    (snd _1), 
							  []) )
# 1156 "miniParser.ml"
               : 'expression0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Positions.position * char) in
    Obj.repr(
# 347 "miniParser.mly"
                                                     ( EPrimApp 
							 (fst _1, 
							  PCharConstant 
							    (snd _1), 
							  []) )
# 1167 "miniParser.ml"
               : 'expression0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : Positions.position) in
    let _2 = (peek_val parser_env 1 : 'record_bindings) in
    let _3 = (peek_val parser_env 0 : Positions.position) in
    Obj.repr(
# 352 "miniParser.mly"
                                                     ( ERecordExtend (
							 join _1 _3,
							 List.rev _2,
							 ERecordEmpty undefined_position) 
						     )
# 1180 "miniParser.ml"
               : 'expression0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : Positions.position) in
    let _2 = (peek_val parser_env 0 : Positions.position) in
    Obj.repr(
# 357 "miniParser.mly"
                                                     ( EPrimApp (
							 join _1 _2,
							 PUnit,
							 [])
						     )
# 1192 "miniParser.ml"
               : 'expression0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : Positions.position) in
    let _2 = (peek_val parser_env 1 : 'expression) in
    let _3 = (peek_val parser_env 0 : Positions.position) in
    Obj.repr(
# 362 "miniParser.mly"
                                                     ( _2 )
# 1201 "miniParser.ml"
               : 'expression0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : Positions.position) in
    let _2 = (peek_val parser_env 1 : 'expression) in
    Obj.repr(
# 364 "miniParser.mly"
      (
	unclosed "(" ")" 1 3
      )
# 1211 "miniParser.ml"
               : 'expression0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 6 : Positions.position) in
    let _2 = (peek_val parser_env 5 : 'expression) in
    let _3 = (peek_val parser_env 4 : Positions.position) in
    let _4 = (peek_val parser_env 3 : 'typ) in
    let _5 = (peek_val parser_env 2 : Positions.position) in
    let _6 = (peek_val parser_env 1 : 'typ) in
    let _7 = (peek_val parser_env 0 : Positions.position) in
    Obj.repr(
# 369 "miniParser.mly"
(
  ECoerce (join _1 (tposition _6), _2, _4, _6)
)
# 1226 "miniParser.ml"
               : 'expression0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 4 : Positions.position) in
    let _2 = (peek_val parser_env 3 : 'expression) in
    let _3 = (peek_val parser_env 2 : Positions.position) in
    let _4 = (peek_val parser_env 1 : 'typ) in
    let _5 = (peek_val parser_env 0 : Positions.position) in
    Obj.repr(
# 375 "miniParser.mly"
    ( ETypeConstraint (join _1 _5, 
		       _2, ([], _4)) )
# 1238 "miniParser.ml"
               : 'expression0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 4 : Positions.position) in
    let _2 = (peek_val parser_env 3 : 'expression) in
    let _3 = (peek_val parser_env 2 : Positions.position) in
    let _4 = (peek_val parser_env 1 : 'expressions) in
    let _5 = (peek_val parser_env 0 : Positions.position) in
    Obj.repr(
# 377 "miniParser.mly"
                                                     ( tuple (join _1 _5) (_2 :: _4) )
# 1249 "miniParser.ml"
               : 'expression0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'expression) in
    Obj.repr(
# 381 "miniParser.mly"
                                                     ( [ _1 ] )
# 1256 "miniParser.ml"
               : 'expressions))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expression) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'expressions) in
    Obj.repr(
# 382 "miniParser.mly"
                                                     ( _1 :: _3 )
# 1265 "miniParser.ml"
               : 'expressions))
; (fun parser_env ->
    Obj.repr(
# 386 "miniParser.mly"
                ( [] )
# 1271 "miniParser.ml"
               : 'record_bindings))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'record_binding) in
    Obj.repr(
# 387 "miniParser.mly"
                 ( [ _1 ] )
# 1278 "miniParser.ml"
               : 'record_bindings))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'record_binding) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'record_bindings) in
    Obj.repr(
# 388 "miniParser.mly"
                                     ( _1 :: _3 )
# 1287 "miniParser.ml"
               : 'record_bindings))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : Positions.position * string) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'expression) in
    Obj.repr(
# 392 "miniParser.mly"
                       ( (snd _1, _3) )
# 1296 "miniParser.ml"
               : 'record_binding))
; (fun parser_env ->
    Obj.repr(
# 396 "miniParser.mly"
                                                     ( [] )
# 1302 "miniParser.ml"
               : 'bindings))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'bindings) in
    let _2 = (peek_val parser_env 0 : 'binding) in
    Obj.repr(
# 397 "miniParser.mly"
                                                     ( _2 :: _1 )
# 1310 "miniParser.ml"
               : 'bindings))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : Positions.position) in
    let _2 = (peek_val parser_env 0 : 'value_definitions) in
    Obj.repr(
# 402 "miniParser.mly"
  (
    BindValue (join _1 (vlposition _2), _2) 
  )
# 1320 "miniParser.ml"
               : 'binding))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : Positions.position) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'value_definitions) in
    Obj.repr(
# 405 "miniParser.mly"
                                                     ( BindRecValue 
							 (join _1 (vlposition _3),
							  _3) )
# 1331 "miniParser.ml"
               : 'binding))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : Positions.position) in
    let _2 = (peek_val parser_env 0 : 'type_definitions) in
    Obj.repr(
# 408 "miniParser.mly"
                                ( TypeDec (join _1 (tdlposition _2), 
								_2) )
# 1340 "miniParser.ml"
               : 'binding))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'type_definition) in
    Obj.repr(
# 414 "miniParser.mly"
                         ( [ _1 ] )
# 1347 "miniParser.ml"
               : 'type_definitions))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'type_definitions) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'type_definition) in
    Obj.repr(
# 415 "miniParser.mly"
                                             ( _3 :: _1 )
# 1356 "miniParser.ml"
               : 'type_definitions))
; (fun parser_env ->
    let _1 = (peek_val parser_env 4 : Positions.position * string) in
    let _2 = (peek_val parser_env 3 : Positions.position) in
    let _3 = (peek_val parser_env 2 : 'kind) in
    let _4 = (peek_val parser_env 1 : Positions.position) in
    let _5 = (peek_val parser_env 0 : 'algebraic_datatype_definitions) in
    Obj.repr(
# 420 "miniParser.mly"
  ( (fst _1, snd _3, snd _1, DAlgebraic _5) )
# 1367 "miniParser.ml"
               : 'type_definition))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Positions.position) in
    Obj.repr(
# 426 "miniParser.mly"
           ( (_1, KStar) )
# 1374 "miniParser.ml"
               : 'kind))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : Positions.position) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'kind) in
    Obj.repr(
# 427 "miniParser.mly"
                  ( (join _1 (fst _3), KArrow (KStar, snd _3)) )
# 1383 "miniParser.ml"
               : 'kind))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'algebraic_datatype_definition) in
    Obj.repr(
# 431 "miniParser.mly"
                                       ( [ _1 ] )
# 1390 "miniParser.ml"
               : 'algebraic_datatype_definitions))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'algebraic_datatype_definition) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'algebraic_datatype_definitions) in
    Obj.repr(
# 432 "miniParser.mly"
                                                                   ( _1 :: _3 )
# 1399 "miniParser.ml"
               : 'algebraic_datatype_definitions))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : Positions.position * string) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'scheme) in
    Obj.repr(
# 436 "miniParser.mly"
                            ( (fst _1, snd _1, 
							 snd (List.split 
								(fst _3)), 
							 snd _3) )
# 1411 "miniParser.ml"
               : 'algebraic_datatype_definition))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'forall) in
    let _2 = (peek_val parser_env 0 : 'typ) in
    Obj.repr(
# 442 "miniParser.mly"
                   ( (_1, _2) )
# 1419 "miniParser.ml"
               : 'scheme))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'value_definition) in
    Obj.repr(
# 446 "miniParser.mly"
                                                      ( [ _1 ] )
# 1426 "miniParser.ml"
               : 'value_definitions))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'value_definitions) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'value_definition) in
    Obj.repr(
# 447 "miniParser.mly"
                                                      ( _3 :: _1 )
# 1435 "miniParser.ml"
               : 'value_definitions))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'forall) in
    let _2 = (peek_val parser_env 1 : 'pattern0) in
    let _3 = (peek_val parser_env 0 : 'equal_expression) in
    Obj.repr(
# 451 "miniParser.mly"
                                                      ( (position _3, 
							 snd (List.split _1), 
							 _2, _3) )
# 1446 "miniParser.ml"
               : 'value_definition))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : Positions.position) in
    let _2 = (peek_val parser_env 0 : 'expression) in
    Obj.repr(
# 457 "miniParser.mly"
                                                      ( _2 )
# 1454 "miniParser.ml"
               : 'equal_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 3 : Positions.position) in
    let _2 = (peek_val parser_env 2 : 'typ) in
    let _3 = (peek_val parser_env 1 : Positions.position) in
    let _4 = (peek_val parser_env 0 : 'expression) in
    Obj.repr(
# 459 "miniParser.mly"
      ( ETypeConstraint 
	  (join _1 (position _4), _4, ([], _2)) )
# 1465 "miniParser.ml"
               : 'equal_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'pattern0) in
    let _2 = (peek_val parser_env 0 : 'equal_expression) in
    Obj.repr(
# 461 "miniParser.mly"
                                                      ( ELambda 
							  (join 
							     (pposition _1) 
							     (position _2), _1, _2) )
# 1476 "miniParser.ml"
               : 'equal_expression))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'pattern3) in
    Obj.repr(
# 468 "miniParser.mly"
                                                       ( _1 )
# 1483 "miniParser.ml"
               : 'pattern))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'pattern2) in
    Obj.repr(
# 472 "miniParser.mly"
                                                       ( _1 )
# 1490 "miniParser.ml"
               : 'pattern3))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'pattern3) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'typ) in
    Obj.repr(
# 474 "miniParser.mly"
      ( PTypeConstraint 
	  (join 
	     (pposition _1) 
	     (tposition _3), _1, ([], _3)) 
      )
# 1503 "miniParser.ml"
               : 'pattern3))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'pattern1) in
    Obj.repr(
# 482 "miniParser.mly"
                                                       ( _1 )
# 1510 "miniParser.ml"
               : 'pattern2))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : Positions.position * string) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'pattern2) in
    Obj.repr(
# 483 "miniParser.mly"
                                                       ( PAlias 
							   (join (fst _1) (pposition _3), 
							    snd _1, _3) )
# 1521 "miniParser.ml"
               : 'pattern2))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'pattern10) in
    Obj.repr(
# 489 "miniParser.mly"
                       ( _1 )
# 1528 "miniParser.ml"
               : 'pattern1))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'pattern10) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'pattern1) in
    Obj.repr(
# 490 "miniParser.mly"
                                   ( POr (pjoin _1 _3, [_1 ; _3]) )
# 1537 "miniParser.ml"
               : 'pattern1))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'pattern10) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'pattern1) in
    Obj.repr(
# 491 "miniParser.mly"
                                   ( PAnd (pjoin _1 _3,[_1; _3]) )
# 1546 "miniParser.ml"
               : 'pattern1))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'pattern0) in
    Obj.repr(
# 495 "miniParser.mly"
           ( _1 )
# 1553 "miniParser.ml"
               : 'pattern10))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : Positions.position * string) in
    let _2 = (peek_val parser_env 0 : 'pattern1s) in
    Obj.repr(
# 497 "miniParser.mly"
      ( PData 
	  (join (fst _1) (plposition _2), 
	   [],
	   snd _1,
	   _2) 
      )
# 1566 "miniParser.ml"
               : 'pattern10))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : Positions.position * string) in
    let _2 = (peek_val parser_env 1 : 'localvars) in
    let _3 = (peek_val parser_env 0 : 'pattern1s) in
    Obj.repr(
# 505 "miniParser.mly"
      ( PData 
	  (join (fst _1) (plposition _3), 
	   _2,
	   snd _1,
	   _3) 
      )
# 1580 "miniParser.ml"
               : 'pattern10))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Positions.position * string) in
    Obj.repr(
# 514 "miniParser.mly"
                                                        ( PVar (fst _1, snd _1) )
# 1587 "miniParser.ml"
               : 'pattern0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Positions.position * string) in
    Obj.repr(
# 515 "miniParser.mly"
      ( PData (fst _1, [], snd _1, []) )
# 1594 "miniParser.ml"
               : 'pattern0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : Positions.position * string) in
    let _2 = (peek_val parser_env 0 : 'localvars) in
    Obj.repr(
# 516 "miniParser.mly"
                ( PData (fst _1, _2, snd _1, []) )
# 1602 "miniParser.ml"
               : 'pattern0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Positions.position) in
    Obj.repr(
# 517 "miniParser.mly"
                                                        ( PWildcard _1 )
# 1609 "miniParser.ml"
               : 'pattern0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Positions.position * int) in
    Obj.repr(
# 518 "miniParser.mly"
                                                 ( let pos = fst _1
						   and value = snd _1 in
						     PPrimitive 
						     (pos,
						      PIntegerConstant value) )
# 1620 "miniParser.ml"
               : 'pattern0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Positions.position * char) in
    Obj.repr(
# 523 "miniParser.mly"
                                              ( let pos = fst _1
						   and value = snd _1 in
						     PPrimitive 
						     (pos,
						      PCharConstant value)
						 )
# 1632 "miniParser.ml"
               : 'pattern0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : Positions.position) in
    let _2 = (peek_val parser_env 0 : Positions.position) in
    Obj.repr(
# 529 "miniParser.mly"
                                                        ( match_unit _1 )
# 1640 "miniParser.ml"
               : 'pattern0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : Positions.position) in
    let _2 = (peek_val parser_env 1 : 'pattern) in
    let _3 = (peek_val parser_env 0 : Positions.position) in
    Obj.repr(
# 531 "miniParser.mly"
                                                        ( _2 )
# 1649 "miniParser.ml"
               : 'pattern0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 4 : Positions.position) in
    let _2 = (peek_val parser_env 3 : 'pattern) in
    let _3 = (peek_val parser_env 2 : Positions.position) in
    let _4 = (peek_val parser_env 1 : 'patterns) in
    let _5 = (peek_val parser_env 0 : Positions.position) in
    Obj.repr(
# 533 "miniParser.mly"
( tuple_pat (join _1 _5) 
    (_2 :: _4) )
# 1661 "miniParser.ml"
               : 'pattern0))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : Positions.position) in
    let _2 = (peek_val parser_env 1 : 'quantifiers) in
    let _3 = (peek_val parser_env 0 : Positions.position) in
    Obj.repr(
# 538 "miniParser.mly"
                               ( snd (List.split _2) )
# 1670 "miniParser.ml"
               : 'localvars))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'pattern) in
    Obj.repr(
# 542 "miniParser.mly"
                                                        ( [ _1 ] )
# 1677 "miniParser.ml"
               : 'patterns))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'pattern) in
    let _2 = (peek_val parser_env 1 : Positions.position) in
    let _3 = (peek_val parser_env 0 : 'patterns) in
    Obj.repr(
# 543 "miniParser.mly"
                                                        ( _1 :: _3 )
# 1686 "miniParser.ml"
               : 'patterns))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'pattern0) in
    Obj.repr(
# 547 "miniParser.mly"
                ( [ _1 ] )
# 1693 "miniParser.ml"
               : 'pattern1s))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'pattern0) in
    let _2 = (peek_val parser_env 0 : 'pattern1s) in
    Obj.repr(
# 548 "miniParser.mly"
                         ( _1 :: _2 )
# 1701 "miniParser.ml"
               : 'pattern1s))
(* Entry program *)
; (fun parser_env -> raise (YYexit (peek_val parser_env 0)))
|]
let yytables =
  { actions=yyact;
    transl_const=yytransl_const;
    transl_block=yytransl_block;
    lhs=yylhs;
    len=yylen;
    defred=yydefred;
    dgoto=yydgoto;
    sindex=yysindex;
    rindex=yyrindex;
    gindex=yygindex;
    tablesize=yytablesize;
    table=yytable;
    check=yycheck;
    error_function=parse_error;
    names_const=yynames_const;
    names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (yyparse yytables 1 lexfun lexbuf : MiniAst.binding list)
