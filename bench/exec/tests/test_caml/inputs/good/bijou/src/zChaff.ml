# 5 "zChaff.mll"
 

  exception Failure


# 8 "zChaff.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\254\255\001\000\002\000\006\000\007\000\008\000\012\000\
    \000\000\252\255\000\000\000\000\013\000\255\255\014\000\000\000\
    \000\000\000\000\001\000\001\000\000\000\001\000\000\000\001\000\
    \002\000\002\000\005\000\002\000\000\000\004\000\001\000\001\000\
    \007\000\009\000\000\000\008\000\004\000\008\000\006\000\012\000\
    \017\000\026\000\026\000\017\000\025\000\017\000\253\255\018\000\
    \000\000\010\000\038\000\095\000\105\000";
  Lexing.lex_backtrk = 
   "\255\255\255\255\000\000\000\000\001\000\255\255\255\255\255\255\
    \255\255\255\255\003\000\003\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\
    \255\255\002\000\002\000\255\255\255\255";
  Lexing.lex_default = 
   "\004\000\000\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \009\000\000\000\255\255\255\255\012\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \046\000\255\255\255\255\255\255\255\255";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\002\000\002\000\002\000\003\000\003\000\003\000\
    \005\000\002\000\002\000\006\000\003\000\003\000\005\000\013\000\
    \013\000\006\000\014\000\046\000\046\000\000\000\047\000\000\000\
    \012\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\049\000\000\000\000\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\000\000\000\000\013\000\000\000\
    \000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\023\000\000\000\024\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \000\000\018\000\036\000\011\000\020\000\021\000\027\000\031\000\
    \033\000\029\000\032\000\034\000\035\000\001\000\015\000\019\000\
    \025\000\038\000\040\000\016\000\017\000\026\000\028\000\030\000\
    \037\000\039\000\041\000\042\000\043\000\044\000\045\000\013\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\001\000\000\000\000\000\000\000\000\000\000\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\255\255\255\255\000\000\000\000\000\000\255\255\255\255\
    \255\255\000\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\002\000\003\000\000\000\002\000\003\000\
    \004\000\005\000\006\000\004\000\005\000\006\000\007\000\012\000\
    \014\000\007\000\012\000\045\000\047\000\255\255\045\000\255\255\
    \011\000\021\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\048\000\255\255\255\255\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\255\255\255\255\050\000\255\255\
    \255\255\008\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\022\000\255\255\022\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \255\255\017\000\023\000\008\000\019\000\020\000\026\000\030\000\
    \032\000\028\000\031\000\033\000\034\000\035\000\010\000\018\000\
    \024\000\037\000\039\000\015\000\016\000\025\000\027\000\029\000\
    \036\000\038\000\040\000\041\000\042\000\043\000\044\000\051\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\052\000\255\255\255\255\255\255\255\255\255\255\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\002\000\003\000\255\255\255\255\255\255\004\000\005\000\
    \006\000\255\255\255\255\255\255\007\000\012\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec main lexbuf =
    __ocaml_lex_main_rec lexbuf 0
and __ocaml_lex_main_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 26 "zChaff.mll"
    ( body lexbuf )
# 149 "zChaff.ml"

  | 1 ->
# 29 "zChaff.mll"
    ( raise Failure )
# 154 "zChaff.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_main_rec lexbuf __ocaml_lex_state

and body lexbuf =
    __ocaml_lex_body_rec lexbuf 8
and __ocaml_lex_body_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 33 "zChaff.mll"
    ( body lexbuf )
# 165 "zChaff.ml"

  | 1 ->
# 35 "zChaff.mll"
    ( [] )
# 170 "zChaff.ml"

  | 2 ->
# 37 "zChaff.mll"
    ( [ List.rev (solution 1 [] lexbuf) ] )
# 175 "zChaff.ml"

  | 3 ->
# 40 "zChaff.mll"
    ( raise Failure )
# 180 "zChaff.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_body_rec lexbuf __ocaml_lex_state

and solution v accu lexbuf =
    __ocaml_lex_solution_rec v accu lexbuf 48
and __ocaml_lex_solution_rec v accu lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->

  let n = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1) in
# 44 "zChaff.mll"
    ( assert (string_of_int v = n);
      solution (v + 1) (v :: accu) lexbuf )
# 194 "zChaff.ml"

  | 1 ->

  let n = Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 47 "zChaff.mll"
    ( assert (string_of_int v = n);
      solution (v + 1) accu lexbuf )
# 202 "zChaff.ml"

  | 2 ->
# 51 "zChaff.mll"
    ( accu )
# 207 "zChaff.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_solution_rec v accu lexbuf __ocaml_lex_state

;;

