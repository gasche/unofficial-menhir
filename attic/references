http://www.i3s.unice.fr/langages/pub/these-fortes.ps.gz

le générateur lalr produit des tables (et non du code) et va 2-3 fois plus vite que yacc;
accepte l'EBNF; explique mieux les conflits que yacc. Cf J. Grosch, `Lalr---a generator for
efficient parsers', Software Practice & Experience 20(11):1115--1135, nov 1990. J'ai lu
l'article, il est sans intérêt. L'algorithme de rapport des conflits est celui de DeRemer
et Pennello (1982).

Jean Gallier et Karl Schimpf ont écrit un outil nommé LR1GEN, mentionné
dans le CV en ligne de Gallier. Où le trouver? Cf. la thèse de Schimpf.
Le code semble identique à celui de Menhir en ce qui concerne l'algo de
Pager.

[Pager77]
A Practical General Method for Constructing LR(k) Parsers
David Pager
Acta Informatica 7, 1977, p. 249-268

[WeSha81]
LR -- Automatic Parser Generator and LR(1) Parser
Charles Wetherell, Alfred Shannon
IEEE Transactions on Software Engineering SE-7:3, May 1981, p. 274-278

[Ives86]
Unifying View of Recent LALR(1) Lookahead Set Algorithms
Fred Ives
SIGPLAN 1986 Symposium on Compiler Construction, p. 131-135

[BeSchi86]
A Practical Arbitrary Look-ahead LR Parsing Technique
Manuel Bermudez, Karl Schimpf
SIGPLAN 1986 Symposium on Compiler Construction, p. 136-144

[Spector88]
Efficient Full LR(1) Parser Generation
David Spector
SIGPLAN Notices 23:12, Dec 1998, p. 143-150

[Burshteyn94]
Algorithms in Muskok parser generator
Boris Burshteyn
comp.compilers, March 16, 1994

Pfahler: `Optimizing directly executable LR parsers', in Compiler Compilers (1990)

 + Aho and Ullman, `A technique for speeding up LR(k) parsers', SIAM J. Comput. 2(2), June 1973, 106-127.
   Aho and Ullman, `Optimization of LR(k) parsers', J. Comput. Syst. Sci 6(6), December 1972, 573-602.
   La notion de "don't care error entry" est apparemment importante pour éliminer les "single productions".
   Soisalon-Soininen, `Inessential error entries and their use in LR parser optimization'.

Compression des tables:

Optimization of parser tables for portable compilers (Dencker, Dürre, Heuft)
Minimizing Row Displacement Dispatch Tables (Karel Driesen and Urs Holzle)

Autres outils:

Jacc (Mark Jones) pour Java (http://web.cecs.pdx.edu/~mpj/jacc/index.html)
Merr (Clinton Jeffery) pour la gestion des erreurs (http://doi.acm.org/10.1145/937563.937566)
(http://unicon.sourceforge.net/merr/)

 + Idée d'optim pour la vitesse: mémoriser le suffixe de la pile dont la forme est connue
   à l'aide de paramètres supplémentaires aux fonctions run (donc, si tout va bien, dans
   les registres). Du coup, on alloue seulement lorsqu'on fait un décalage avec oubli, et
   on accède à la mémoire seulement lorsqu'on fait une réduction avec redécouverte. Ca
   permettrait d'avoir gratuitement quelques optimisations du style "si on sait qu'on va
   réduire tout de suite, alors on n'alloue pas de cellule sur la pile (shiftreduce)".

Quelques liens en vrac:

These d'Eelco Visser
http://www.cs.uu.nl/people/visser/ftp/Vis97.ps.gz

COCOM tool set
http://cocom.sourceforge.net/

YACC/M
http://david.tribble.com/yaccm.html

Comp.compilers: Algorithms in Muskok parser generator
http://compilers.iecc.com/comparch/article/94-03-067

Produire des tables. Voir
  "Optimization of parser tables for portable compilers",
  http://portal.acm.org/citation.cfm?id=1802&coll=portal&dl=ACM
  (La compression peut-elle remplacer une erreur par une réduction?)
  Tarjan & Yao, "Storing a Sparse Table",
  http://doi.acm.org/10.1145/359168.359175
  Approche de Bison,
  http://www.cs.uic.edu/~spopuri/cparser.html

